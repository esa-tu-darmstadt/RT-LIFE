//
// Generated by Bluespec Compiler (build e76ca21)
//
//
//
//
// Ports:
// Name                         I/O  size props
// RDY_hart0_server_reset_request_put  O     1 reg
// hart0_server_reset_response_get  O     1 reg
// RDY_hart0_server_reset_response_get  O     1 reg
// imem_master_awvalid            O     1 reg
// imem_master_awid               O     4 reg
// imem_master_awaddr             O    64 reg
// imem_master_awlen              O     8 reg
// imem_master_awsize             O     3 reg
// imem_master_awburst            O     2 reg
// imem_master_awlock             O     1 reg
// imem_master_awcache            O     4 reg
// imem_master_awprot             O     3 reg
// imem_master_awqos              O     4 reg
// imem_master_awregion           O     4 reg
// imem_master_wvalid             O     1 reg
// imem_master_wdata              O    64 reg
// imem_master_wstrb              O     8 reg
// imem_master_wlast              O     1 reg
// imem_master_bready             O     1 reg
// imem_master_arvalid            O     1 reg
// imem_master_arid               O     4 reg
// imem_master_araddr             O    64 reg
// imem_master_arlen              O     8 reg
// imem_master_arsize             O     3 reg
// imem_master_arburst            O     2 reg
// imem_master_arlock             O     1 reg
// imem_master_arcache            O     4 reg
// imem_master_arprot             O     3 reg
// imem_master_arqos              O     4 reg
// imem_master_arregion           O     4 reg
// imem_master_rready             O     1 reg
// dmem_master_awvalid            O     1 reg
// dmem_master_awid               O     4 reg
// dmem_master_awaddr             O    64 reg
// dmem_master_awlen              O     8 reg
// dmem_master_awsize             O     3 reg
// dmem_master_awburst            O     2 reg
// dmem_master_awlock             O     1 reg
// dmem_master_awcache            O     4 reg
// dmem_master_awprot             O     3 reg
// dmem_master_awqos              O     4 reg
// dmem_master_awregion           O     4 reg
// dmem_master_wvalid             O     1 reg
// dmem_master_wdata              O    64 reg
// dmem_master_wstrb              O     8 reg
// dmem_master_wlast              O     1 reg
// dmem_master_bready             O     1 reg
// dmem_master_arvalid            O     1 reg
// dmem_master_arid               O     4 reg
// dmem_master_araddr             O    64 reg
// dmem_master_arlen              O     8 reg
// dmem_master_arsize             O     3 reg
// dmem_master_arburst            O     2 reg
// dmem_master_arlock             O     1 reg
// dmem_master_arcache            O     4 reg
// dmem_master_arprot             O     3 reg
// dmem_master_arqos              O     4 reg
// dmem_master_arregion           O     4 reg
// dmem_master_rready             O     1 reg
// RDY_set_verbosity              O     1 const
// trace_data_out_get             O   235 reg
// RDY_trace_data_out_get         O     1 reg
// dexie_cfdata_out_get           O    96
// RDY_dexie_cfdata_out_get       O     1
// dexie_dfmemdata_out_get        O   101
// RDY_dexie_dfmemdata_out_get    O     1
// dexie_dfregdata_out_get        O    69
// RDY_dexie_dfregdata_out_get    O     1
// CLK                            I     1 clock
// RST_N                          I     1 reset
// hart0_server_reset_request_put  I     1 reg
// imem_master_awready            I     1
// imem_master_wready             I     1
// imem_master_bvalid             I     1
// imem_master_bid                I     4 reg
// imem_master_bresp              I     2 reg
// imem_master_arready            I     1
// imem_master_rvalid             I     1
// imem_master_rid                I     4 reg
// imem_master_rdata              I    64 reg
// imem_master_rresp              I     2 reg
// imem_master_rlast              I     1 reg
// dmem_master_awready            I     1
// dmem_master_wready             I     1
// dmem_master_bvalid             I     1
// dmem_master_bid                I     4 reg
// dmem_master_bresp              I     2 reg
// dmem_master_arready            I     1
// dmem_master_rvalid             I     1
// dmem_master_rid                I     4 reg
// dmem_master_rdata              I    64 reg
// dmem_master_rresp              I     2 reg
// dmem_master_rlast              I     1 reg
// m_external_interrupt_req_set_not_clear  I     1 reg
// s_external_interrupt_req_set_not_clear  I     1 reg
// software_interrupt_req_set_not_clear  I     1 reg
// timer_interrupt_req_set_not_clear  I     1 reg
// nmi_req_set_not_clear          I     1
// set_verbosity_verbosity        I     4 reg
// set_verbosity_logdelay         I    64 reg
// dexie_stall_set_or_clear       I     1
// dexie_stallOnStore_set_or_clear  I     1
// dexie_continueStore_set_or_clear  I     1
// EN_hart0_server_reset_request_put  I     1
// EN_set_verbosity               I     1
// EN_hart0_server_reset_response_get  I     1
// EN_trace_data_out_get          I     1
// EN_dexie_cfdata_out_get        I     1
// EN_dexie_dfmemdata_out_get     I     1
// EN_dexie_dfregdata_out_get     I     1
//
// Combinational paths from inputs to outputs:
//   (dexie_stall_set_or_clear,
//    dexie_stallOnStore_set_or_clear,
//    dexie_continueStore_set_or_clear) -> RDY_dexie_cfdata_out_get
//   (dexie_stall_set_or_clear,
//    dexie_stallOnStore_set_or_clear,
//    dexie_continueStore_set_or_clear) -> RDY_dexie_dfmemdata_out_get
//   (dexie_stall_set_or_clear,
//    dexie_stallOnStore_set_or_clear,
//    dexie_continueStore_set_or_clear) -> RDY_dexie_dfregdata_out_get
//   (dexie_stall_set_or_clear,
//    dexie_stallOnStore_set_or_clear,
//    dexie_continueStore_set_or_clear) -> dexie_cfdata_out_get
//   (dexie_stall_set_or_clear,
//    dexie_stallOnStore_set_or_clear,
//    dexie_continueStore_set_or_clear) -> dexie_dfmemdata_out_get
//   (dexie_stall_set_or_clear,
//    dexie_stallOnStore_set_or_clear,
//    dexie_continueStore_set_or_clear) -> dexie_dfregdata_out_get
//
//

`ifdef BSV_ASSIGNMENT_DELAY
`else
  `define BSV_ASSIGNMENT_DELAY
`endif

`ifdef BSV_POSITIVE_RESET
  `define BSV_RESET_VALUE 1'b1
  `define BSV_RESET_EDGE posedge
`else
  `define BSV_RESET_VALUE 1'b0
  `define BSV_RESET_EDGE negedge
`endif

module mkCPU(CLK,
	     RST_N,

	     hart0_server_reset_request_put,
	     EN_hart0_server_reset_request_put,
	     RDY_hart0_server_reset_request_put,

	     EN_hart0_server_reset_response_get,
	     hart0_server_reset_response_get,
	     RDY_hart0_server_reset_response_get,

	     imem_master_awvalid,

	     imem_master_awid,

	     imem_master_awaddr,

	     imem_master_awlen,

	     imem_master_awsize,

	     imem_master_awburst,

	     imem_master_awlock,

	     imem_master_awcache,

	     imem_master_awprot,

	     imem_master_awqos,

	     imem_master_awregion,

	     imem_master_awready,

	     imem_master_wvalid,

	     imem_master_wdata,

	     imem_master_wstrb,

	     imem_master_wlast,

	     imem_master_wready,

	     imem_master_bvalid,
	     imem_master_bid,
	     imem_master_bresp,

	     imem_master_bready,

	     imem_master_arvalid,

	     imem_master_arid,

	     imem_master_araddr,

	     imem_master_arlen,

	     imem_master_arsize,

	     imem_master_arburst,

	     imem_master_arlock,

	     imem_master_arcache,

	     imem_master_arprot,

	     imem_master_arqos,

	     imem_master_arregion,

	     imem_master_arready,

	     imem_master_rvalid,
	     imem_master_rid,
	     imem_master_rdata,
	     imem_master_rresp,
	     imem_master_rlast,

	     imem_master_rready,

	     dmem_master_awvalid,

	     dmem_master_awid,

	     dmem_master_awaddr,

	     dmem_master_awlen,

	     dmem_master_awsize,

	     dmem_master_awburst,

	     dmem_master_awlock,

	     dmem_master_awcache,

	     dmem_master_awprot,

	     dmem_master_awqos,

	     dmem_master_awregion,

	     dmem_master_awready,

	     dmem_master_wvalid,

	     dmem_master_wdata,

	     dmem_master_wstrb,

	     dmem_master_wlast,

	     dmem_master_wready,

	     dmem_master_bvalid,
	     dmem_master_bid,
	     dmem_master_bresp,

	     dmem_master_bready,

	     dmem_master_arvalid,

	     dmem_master_arid,

	     dmem_master_araddr,

	     dmem_master_arlen,

	     dmem_master_arsize,

	     dmem_master_arburst,

	     dmem_master_arlock,

	     dmem_master_arcache,

	     dmem_master_arprot,

	     dmem_master_arqos,

	     dmem_master_arregion,

	     dmem_master_arready,

	     dmem_master_rvalid,
	     dmem_master_rid,
	     dmem_master_rdata,
	     dmem_master_rresp,
	     dmem_master_rlast,

	     dmem_master_rready,

	     m_external_interrupt_req_set_not_clear,

	     s_external_interrupt_req_set_not_clear,

	     software_interrupt_req_set_not_clear,

	     timer_interrupt_req_set_not_clear,

	     nmi_req_set_not_clear,

	     set_verbosity_verbosity,
	     set_verbosity_logdelay,
	     EN_set_verbosity,
	     RDY_set_verbosity,

	     EN_trace_data_out_get,
	     trace_data_out_get,
	     RDY_trace_data_out_get,

	     EN_dexie_cfdata_out_get,
	     dexie_cfdata_out_get,
	     RDY_dexie_cfdata_out_get,

	     EN_dexie_dfmemdata_out_get,
	     dexie_dfmemdata_out_get,
	     RDY_dexie_dfmemdata_out_get,

	     EN_dexie_dfregdata_out_get,
	     dexie_dfregdata_out_get,
	     RDY_dexie_dfregdata_out_get,

	     dexie_stall_set_or_clear,

	     dexie_stallOnStore_set_or_clear,

	     dexie_continueStore_set_or_clear);
  input  CLK;
  input  RST_N;

  // action method hart0_server_reset_request_put
  input  hart0_server_reset_request_put;
  input  EN_hart0_server_reset_request_put;
  output RDY_hart0_server_reset_request_put;

  // actionvalue method hart0_server_reset_response_get
  input  EN_hart0_server_reset_response_get;
  output hart0_server_reset_response_get;
  output RDY_hart0_server_reset_response_get;

  // value method imem_master_m_awvalid
  output imem_master_awvalid;

  // value method imem_master_m_awid
  output [3 : 0] imem_master_awid;

  // value method imem_master_m_awaddr
  output [63 : 0] imem_master_awaddr;

  // value method imem_master_m_awlen
  output [7 : 0] imem_master_awlen;

  // value method imem_master_m_awsize
  output [2 : 0] imem_master_awsize;

  // value method imem_master_m_awburst
  output [1 : 0] imem_master_awburst;

  // value method imem_master_m_awlock
  output imem_master_awlock;

  // value method imem_master_m_awcache
  output [3 : 0] imem_master_awcache;

  // value method imem_master_m_awprot
  output [2 : 0] imem_master_awprot;

  // value method imem_master_m_awqos
  output [3 : 0] imem_master_awqos;

  // value method imem_master_m_awregion
  output [3 : 0] imem_master_awregion;

  // value method imem_master_m_awuser

  // action method imem_master_m_awready
  input  imem_master_awready;

  // value method imem_master_m_wvalid
  output imem_master_wvalid;

  // value method imem_master_m_wdata
  output [63 : 0] imem_master_wdata;

  // value method imem_master_m_wstrb
  output [7 : 0] imem_master_wstrb;

  // value method imem_master_m_wlast
  output imem_master_wlast;

  // value method imem_master_m_wuser

  // action method imem_master_m_wready
  input  imem_master_wready;

  // action method imem_master_m_bvalid
  input  imem_master_bvalid;
  input  [3 : 0] imem_master_bid;
  input  [1 : 0] imem_master_bresp;

  // value method imem_master_m_bready
  output imem_master_bready;

  // value method imem_master_m_arvalid
  output imem_master_arvalid;

  // value method imem_master_m_arid
  output [3 : 0] imem_master_arid;

  // value method imem_master_m_araddr
  output [63 : 0] imem_master_araddr;

  // value method imem_master_m_arlen
  output [7 : 0] imem_master_arlen;

  // value method imem_master_m_arsize
  output [2 : 0] imem_master_arsize;

  // value method imem_master_m_arburst
  output [1 : 0] imem_master_arburst;

  // value method imem_master_m_arlock
  output imem_master_arlock;

  // value method imem_master_m_arcache
  output [3 : 0] imem_master_arcache;

  // value method imem_master_m_arprot
  output [2 : 0] imem_master_arprot;

  // value method imem_master_m_arqos
  output [3 : 0] imem_master_arqos;

  // value method imem_master_m_arregion
  output [3 : 0] imem_master_arregion;

  // value method imem_master_m_aruser

  // action method imem_master_m_arready
  input  imem_master_arready;

  // action method imem_master_m_rvalid
  input  imem_master_rvalid;
  input  [3 : 0] imem_master_rid;
  input  [63 : 0] imem_master_rdata;
  input  [1 : 0] imem_master_rresp;
  input  imem_master_rlast;

  // value method imem_master_m_rready
  output imem_master_rready;

  // value method dmem_master_m_awvalid
  output dmem_master_awvalid;

  // value method dmem_master_m_awid
  output [3 : 0] dmem_master_awid;

  // value method dmem_master_m_awaddr
  output [63 : 0] dmem_master_awaddr;

  // value method dmem_master_m_awlen
  output [7 : 0] dmem_master_awlen;

  // value method dmem_master_m_awsize
  output [2 : 0] dmem_master_awsize;

  // value method dmem_master_m_awburst
  output [1 : 0] dmem_master_awburst;

  // value method dmem_master_m_awlock
  output dmem_master_awlock;

  // value method dmem_master_m_awcache
  output [3 : 0] dmem_master_awcache;

  // value method dmem_master_m_awprot
  output [2 : 0] dmem_master_awprot;

  // value method dmem_master_m_awqos
  output [3 : 0] dmem_master_awqos;

  // value method dmem_master_m_awregion
  output [3 : 0] dmem_master_awregion;

  // value method dmem_master_m_awuser

  // action method dmem_master_m_awready
  input  dmem_master_awready;

  // value method dmem_master_m_wvalid
  output dmem_master_wvalid;

  // value method dmem_master_m_wdata
  output [63 : 0] dmem_master_wdata;

  // value method dmem_master_m_wstrb
  output [7 : 0] dmem_master_wstrb;

  // value method dmem_master_m_wlast
  output dmem_master_wlast;

  // value method dmem_master_m_wuser

  // action method dmem_master_m_wready
  input  dmem_master_wready;

  // action method dmem_master_m_bvalid
  input  dmem_master_bvalid;
  input  [3 : 0] dmem_master_bid;
  input  [1 : 0] dmem_master_bresp;

  // value method dmem_master_m_bready
  output dmem_master_bready;

  // value method dmem_master_m_arvalid
  output dmem_master_arvalid;

  // value method dmem_master_m_arid
  output [3 : 0] dmem_master_arid;

  // value method dmem_master_m_araddr
  output [63 : 0] dmem_master_araddr;

  // value method dmem_master_m_arlen
  output [7 : 0] dmem_master_arlen;

  // value method dmem_master_m_arsize
  output [2 : 0] dmem_master_arsize;

  // value method dmem_master_m_arburst
  output [1 : 0] dmem_master_arburst;

  // value method dmem_master_m_arlock
  output dmem_master_arlock;

  // value method dmem_master_m_arcache
  output [3 : 0] dmem_master_arcache;

  // value method dmem_master_m_arprot
  output [2 : 0] dmem_master_arprot;

  // value method dmem_master_m_arqos
  output [3 : 0] dmem_master_arqos;

  // value method dmem_master_m_arregion
  output [3 : 0] dmem_master_arregion;

  // value method dmem_master_m_aruser

  // action method dmem_master_m_arready
  input  dmem_master_arready;

  // action method dmem_master_m_rvalid
  input  dmem_master_rvalid;
  input  [3 : 0] dmem_master_rid;
  input  [63 : 0] dmem_master_rdata;
  input  [1 : 0] dmem_master_rresp;
  input  dmem_master_rlast;

  // value method dmem_master_m_rready
  output dmem_master_rready;

  // action method m_external_interrupt_req
  input  m_external_interrupt_req_set_not_clear;

  // action method s_external_interrupt_req
  input  s_external_interrupt_req_set_not_clear;

  // action method software_interrupt_req
  input  software_interrupt_req_set_not_clear;

  // action method timer_interrupt_req
  input  timer_interrupt_req_set_not_clear;

  // action method nmi_req
  input  nmi_req_set_not_clear;

  // action method set_verbosity
  input  [3 : 0] set_verbosity_verbosity;
  input  [63 : 0] set_verbosity_logdelay;
  input  EN_set_verbosity;
  output RDY_set_verbosity;

  // actionvalue method trace_data_out_get
  input  EN_trace_data_out_get;
  output [234 : 0] trace_data_out_get;
  output RDY_trace_data_out_get;

  // actionvalue method dexie_cfdata_out_get
  input  EN_dexie_cfdata_out_get;
  output [95 : 0] dexie_cfdata_out_get;
  output RDY_dexie_cfdata_out_get;

  // actionvalue method dexie_dfmemdata_out_get
  input  EN_dexie_dfmemdata_out_get;
  output [100 : 0] dexie_dfmemdata_out_get;
  output RDY_dexie_dfmemdata_out_get;

  // actionvalue method dexie_dfregdata_out_get
  input  EN_dexie_dfregdata_out_get;
  output [68 : 0] dexie_dfregdata_out_get;
  output RDY_dexie_dfregdata_out_get;

  // action method dexie_stall
  input  dexie_stall_set_or_clear;

  // action method dexie_stallOnStore
  input  dexie_stallOnStore_set_or_clear;

  // action method dexie_continueStore
  input  dexie_continueStore_set_or_clear;

  // signals for module outputs
  wire [234 : 0] trace_data_out_get;
  wire [100 : 0] dexie_dfmemdata_out_get;
  wire [95 : 0] dexie_cfdata_out_get;
  wire [68 : 0] dexie_dfregdata_out_get;
  wire [63 : 0] dmem_master_araddr,
		dmem_master_awaddr,
		dmem_master_wdata,
		imem_master_araddr,
		imem_master_awaddr,
		imem_master_wdata;
  wire [7 : 0] dmem_master_arlen,
	       dmem_master_awlen,
	       dmem_master_wstrb,
	       imem_master_arlen,
	       imem_master_awlen,
	       imem_master_wstrb;
  wire [3 : 0] dmem_master_arcache,
	       dmem_master_arid,
	       dmem_master_arqos,
	       dmem_master_arregion,
	       dmem_master_awcache,
	       dmem_master_awid,
	       dmem_master_awqos,
	       dmem_master_awregion,
	       imem_master_arcache,
	       imem_master_arid,
	       imem_master_arqos,
	       imem_master_arregion,
	       imem_master_awcache,
	       imem_master_awid,
	       imem_master_awqos,
	       imem_master_awregion;
  wire [2 : 0] dmem_master_arprot,
	       dmem_master_arsize,
	       dmem_master_awprot,
	       dmem_master_awsize,
	       imem_master_arprot,
	       imem_master_arsize,
	       imem_master_awprot,
	       imem_master_awsize;
  wire [1 : 0] dmem_master_arburst,
	       dmem_master_awburst,
	       imem_master_arburst,
	       imem_master_awburst;
  wire RDY_dexie_cfdata_out_get,
       RDY_dexie_dfmemdata_out_get,
       RDY_dexie_dfregdata_out_get,
       RDY_hart0_server_reset_request_put,
       RDY_hart0_server_reset_response_get,
       RDY_set_verbosity,
       RDY_trace_data_out_get,
       dmem_master_arlock,
       dmem_master_arvalid,
       dmem_master_awlock,
       dmem_master_awvalid,
       dmem_master_bready,
       dmem_master_rready,
       dmem_master_wlast,
       dmem_master_wvalid,
       hart0_server_reset_response_get,
       imem_master_arlock,
       imem_master_arvalid,
       imem_master_awlock,
       imem_master_awvalid,
       imem_master_bready,
       imem_master_rready,
       imem_master_wlast,
       imem_master_wvalid;

  // inlined wires
  reg [96 : 0] f_dexie_cfdata_rv$port0__write_1;
  wire [101 : 0] f_dexie_dfmemdata_rv$port0__write_1,
		 f_dexie_dfmemdata_rv$port1__read,
		 f_dexie_dfmemdata_rv$port2__read;
  wire [96 : 0] f_dexie_cfdata_rv$port1__read, f_dexie_cfdata_rv$port2__read;
  wire [69 : 0] f_dexie_dfregdata_rv$port0__write_1,
		f_dexie_dfregdata_rv$port1__read,
		f_dexie_dfregdata_rv$port2__read;
  wire f_dexie_cfdata_rv$EN_port0__write,
       f_dexie_dfmemdata_rv$EN_port0__write,
       f_dexie_dfregdata_rv$EN_port0__write;

  // register cfg_logdelay
  reg [63 : 0] cfg_logdelay;
  wire [63 : 0] cfg_logdelay$D_IN;
  wire cfg_logdelay$EN;

  // register cfg_verbosity
  reg [3 : 0] cfg_verbosity;
  wire [3 : 0] cfg_verbosity$D_IN;
  wire cfg_verbosity$EN;

  // register f_dexie_cfdata_rv
  reg [96 : 0] f_dexie_cfdata_rv;
  wire [96 : 0] f_dexie_cfdata_rv$D_IN;
  wire f_dexie_cfdata_rv$EN;

  // register f_dexie_dfmemdata_rv
  reg [101 : 0] f_dexie_dfmemdata_rv;
  wire [101 : 0] f_dexie_dfmemdata_rv$D_IN;
  wire f_dexie_dfmemdata_rv$EN;

  // register f_dexie_dfregdata_rv
  reg [69 : 0] f_dexie_dfregdata_rv;
  wire [69 : 0] f_dexie_dfregdata_rv$D_IN;
  wire f_dexie_dfregdata_rv$EN;

  // register imem_rg_cache_addr
  reg [31 : 0] imem_rg_cache_addr;
  wire [31 : 0] imem_rg_cache_addr$D_IN;
  wire imem_rg_cache_addr$EN;

  // register imem_rg_cache_b16
  reg [15 : 0] imem_rg_cache_b16;
  wire [15 : 0] imem_rg_cache_b16$D_IN;
  wire imem_rg_cache_b16$EN;

  // register imem_rg_f3
  reg [2 : 0] imem_rg_f3;
  wire [2 : 0] imem_rg_f3$D_IN;
  wire imem_rg_f3$EN;

  // register imem_rg_mstatus_MXR
  reg imem_rg_mstatus_MXR;
  wire imem_rg_mstatus_MXR$D_IN, imem_rg_mstatus_MXR$EN;

  // register imem_rg_pc
  reg [31 : 0] imem_rg_pc;
  reg [31 : 0] imem_rg_pc$D_IN;
  wire imem_rg_pc$EN;

  // register imem_rg_priv
  reg [1 : 0] imem_rg_priv;
  wire [1 : 0] imem_rg_priv$D_IN;
  wire imem_rg_priv$EN;

  // register imem_rg_satp
  reg [31 : 0] imem_rg_satp;
  wire [31 : 0] imem_rg_satp$D_IN;
  wire imem_rg_satp$EN;

  // register imem_rg_sstatus_SUM
  reg imem_rg_sstatus_SUM;
  wire imem_rg_sstatus_SUM$D_IN, imem_rg_sstatus_SUM$EN;

  // register imem_rg_tval
  reg [31 : 0] imem_rg_tval;
  reg [31 : 0] imem_rg_tval$D_IN;
  wire imem_rg_tval$EN;

  // register rg_csr_pc
  reg [31 : 0] rg_csr_pc;
  wire [31 : 0] rg_csr_pc$D_IN;
  wire rg_csr_pc$EN;

  // register rg_csr_val1
  reg [31 : 0] rg_csr_val1;
  wire [31 : 0] rg_csr_val1$D_IN;
  wire rg_csr_val1$EN;

  // register rg_cur_priv
  reg [1 : 0] rg_cur_priv;
  reg [1 : 0] rg_cur_priv$D_IN;
  wire rg_cur_priv$EN;

  // register rg_mstatus_MXR
  reg rg_mstatus_MXR;
  wire rg_mstatus_MXR$D_IN, rg_mstatus_MXR$EN;

  // register rg_next_pc
  reg [31 : 0] rg_next_pc;
  reg [31 : 0] rg_next_pc$D_IN;
  wire rg_next_pc$EN;

  // register rg_prev_mip
  reg [31 : 0] rg_prev_mip;
  wire [31 : 0] rg_prev_mip$D_IN;
  wire rg_prev_mip$EN;

  // register rg_run_on_reset
  reg rg_run_on_reset;
  wire rg_run_on_reset$D_IN, rg_run_on_reset$EN;

  // register rg_sstatus_SUM
  reg rg_sstatus_SUM;
  wire rg_sstatus_SUM$D_IN, rg_sstatus_SUM$EN;

  // register rg_start_CPI_cycles
  reg [63 : 0] rg_start_CPI_cycles;
  wire [63 : 0] rg_start_CPI_cycles$D_IN;
  wire rg_start_CPI_cycles$EN;

  // register rg_start_CPI_instrs
  reg [63 : 0] rg_start_CPI_instrs;
  wire [63 : 0] rg_start_CPI_instrs$D_IN;
  wire rg_start_CPI_instrs$EN;

  // register rg_state
  reg [3 : 0] rg_state;
  reg [3 : 0] rg_state$D_IN;
  wire rg_state$EN;

  // register rg_trap_info
  reg [67 : 0] rg_trap_info;
  reg [67 : 0] rg_trap_info$D_IN;
  wire rg_trap_info$EN;

  // register rg_trap_instr
  reg [31 : 0] rg_trap_instr;
  wire [31 : 0] rg_trap_instr$D_IN;
  wire rg_trap_instr$EN;

  // register rg_trap_interrupt
  reg rg_trap_interrupt;
  wire rg_trap_interrupt$D_IN, rg_trap_interrupt$EN;

  // register rg_trap_trace_data
  reg [234 : 0] rg_trap_trace_data;
  wire [234 : 0] rg_trap_trace_data$D_IN;
  wire rg_trap_trace_data$EN;

  // register stage1_rg_full
  reg stage1_rg_full;
  reg stage1_rg_full$D_IN;
  wire stage1_rg_full$EN;

  // register stage2_rg_full
  reg stage2_rg_full;
  reg stage2_rg_full$D_IN;
  wire stage2_rg_full$EN;

  // register stage2_rg_resetting
  reg stage2_rg_resetting;
  wire stage2_rg_resetting$D_IN, stage2_rg_resetting$EN;

  // register stage2_rg_stage2
  reg [404 : 0] stage2_rg_stage2;
  wire [404 : 0] stage2_rg_stage2$D_IN;
  wire stage2_rg_stage2$EN;

  // register stage3_rg_full
  reg stage3_rg_full;
  reg stage3_rg_full$D_IN;
  wire stage3_rg_full$EN;

  // register stage3_rg_stage3
  reg [103 : 0] stage3_rg_stage3;
  wire [103 : 0] stage3_rg_stage3$D_IN;
  wire stage3_rg_stage3$EN;

  // ports of submodule csr_regfile
  reg [1 : 0] csr_regfile$csr_ret_actions_from_priv;
  wire [97 : 0] csr_regfile$csr_trap_actions;
  wire [65 : 0] csr_regfile$csr_ret_actions;
  wire [63 : 0] csr_regfile$read_csr_mcycle, csr_regfile$read_csr_minstret;
  wire [32 : 0] csr_regfile$read_csr;
  wire [31 : 0] csr_regfile$csr_mip_read,
		csr_regfile$csr_trap_actions_pc,
		csr_regfile$csr_trap_actions_xtval,
		csr_regfile$mav_csr_write,
		csr_regfile$mav_csr_write_word,
		csr_regfile$read_mstatus,
		csr_regfile$read_satp;
  wire [27 : 0] csr_regfile$read_misa;
  wire [11 : 0] csr_regfile$access_permitted_1_csr_addr,
		csr_regfile$access_permitted_2_csr_addr,
		csr_regfile$csr_counter_read_fault_csr_addr,
		csr_regfile$mav_csr_write_csr_addr,
		csr_regfile$mav_read_csr_csr_addr,
		csr_regfile$read_csr_csr_addr,
		csr_regfile$read_csr_port2_csr_addr;
  wire [4 : 0] csr_regfile$interrupt_pending;
  wire [3 : 0] csr_regfile$csr_trap_actions_exc_code;
  wire [1 : 0] csr_regfile$access_permitted_1_priv,
	       csr_regfile$access_permitted_2_priv,
	       csr_regfile$csr_counter_read_fault_priv,
	       csr_regfile$csr_trap_actions_from_priv,
	       csr_regfile$interrupt_pending_cur_priv;
  wire csr_regfile$EN_csr_minstret_incr,
       csr_regfile$EN_csr_ret_actions,
       csr_regfile$EN_csr_trap_actions,
       csr_regfile$EN_debug,
       csr_regfile$EN_mav_csr_write,
       csr_regfile$EN_mav_read_csr,
       csr_regfile$EN_server_reset_request_put,
       csr_regfile$EN_server_reset_response_get,
       csr_regfile$RDY_server_reset_request_put,
       csr_regfile$RDY_server_reset_response_get,
       csr_regfile$access_permitted_1,
       csr_regfile$access_permitted_1_read_not_write,
       csr_regfile$access_permitted_2,
       csr_regfile$access_permitted_2_read_not_write,
       csr_regfile$csr_trap_actions_interrupt,
       csr_regfile$csr_trap_actions_nmi,
       csr_regfile$m_external_interrupt_req_set_not_clear,
       csr_regfile$nmi_pending,
       csr_regfile$nmi_req_set_not_clear,
       csr_regfile$s_external_interrupt_req_set_not_clear,
       csr_regfile$software_interrupt_req_set_not_clear,
       csr_regfile$timer_interrupt_req_set_not_clear,
       csr_regfile$wfi_resume;

  // ports of submodule f_reset_reqs
  wire f_reset_reqs$CLR,
       f_reset_reqs$DEQ,
       f_reset_reqs$D_IN,
       f_reset_reqs$D_OUT,
       f_reset_reqs$EMPTY_N,
       f_reset_reqs$ENQ,
       f_reset_reqs$FULL_N;

  // ports of submodule f_reset_rsps
  wire f_reset_rsps$CLR,
       f_reset_rsps$DEQ,
       f_reset_rsps$D_IN,
       f_reset_rsps$D_OUT,
       f_reset_rsps$EMPTY_N,
       f_reset_rsps$ENQ,
       f_reset_rsps$FULL_N;

  // ports of submodule f_trace_data
  reg [234 : 0] f_trace_data$D_IN;
  wire [234 : 0] f_trace_data$D_OUT;
  wire f_trace_data$CLR,
       f_trace_data$DEQ,
       f_trace_data$EMPTY_N,
       f_trace_data$ENQ,
       f_trace_data$FULL_N;

  // ports of submodule gpr_regfile
  wire [31 : 0] gpr_regfile$read_rs1,
		gpr_regfile$read_rs2,
		gpr_regfile$write_rd_rd_val;
  wire [4 : 0] gpr_regfile$read_rs1_port2_rs1,
	       gpr_regfile$read_rs1_rs1,
	       gpr_regfile$read_rs2_rs2,
	       gpr_regfile$write_rd_rd;
  wire gpr_regfile$EN_server_reset_request_put,
       gpr_regfile$EN_server_reset_response_get,
       gpr_regfile$EN_write_rd,
       gpr_regfile$RDY_server_reset_request_put,
       gpr_regfile$RDY_server_reset_response_get;

  // ports of submodule near_mem
  reg [31 : 0] near_mem$imem_req_addr;
  reg [1 : 0] near_mem$dmem_req_op;
  reg near_mem$imem_req_mstatus_MXR, near_mem$imem_req_sstatus_SUM;
  wire [63 : 0] near_mem$dmem_master_araddr,
		near_mem$dmem_master_awaddr,
		near_mem$dmem_master_rdata,
		near_mem$dmem_master_wdata,
		near_mem$dmem_req_store_value,
		near_mem$dmem_word64,
		near_mem$imem_master_araddr,
		near_mem$imem_master_awaddr,
		near_mem$imem_master_rdata,
		near_mem$imem_master_wdata;
  wire [31 : 0] near_mem$dmem_req_addr,
		near_mem$dmem_req_satp,
		near_mem$imem_instr,
		near_mem$imem_pc,
		near_mem$imem_req_satp;
  wire [7 : 0] near_mem$dmem_master_arlen,
	       near_mem$dmem_master_awlen,
	       near_mem$dmem_master_wstrb,
	       near_mem$imem_master_arlen,
	       near_mem$imem_master_awlen,
	       near_mem$imem_master_wstrb,
	       near_mem$server_fence_request_put;
  wire [6 : 0] near_mem$dmem_req_amo_funct7;
  wire [3 : 0] near_mem$dmem_exc_code,
	       near_mem$dmem_master_arcache,
	       near_mem$dmem_master_arid,
	       near_mem$dmem_master_arqos,
	       near_mem$dmem_master_arregion,
	       near_mem$dmem_master_awcache,
	       near_mem$dmem_master_awid,
	       near_mem$dmem_master_awqos,
	       near_mem$dmem_master_awregion,
	       near_mem$dmem_master_bid,
	       near_mem$dmem_master_rid,
	       near_mem$imem_exc_code,
	       near_mem$imem_master_arcache,
	       near_mem$imem_master_arid,
	       near_mem$imem_master_arqos,
	       near_mem$imem_master_arregion,
	       near_mem$imem_master_awcache,
	       near_mem$imem_master_awid,
	       near_mem$imem_master_awqos,
	       near_mem$imem_master_awregion,
	       near_mem$imem_master_bid,
	       near_mem$imem_master_rid;
  wire [2 : 0] near_mem$dmem_master_arprot,
	       near_mem$dmem_master_arsize,
	       near_mem$dmem_master_awprot,
	       near_mem$dmem_master_awsize,
	       near_mem$dmem_req_f3,
	       near_mem$imem_master_arprot,
	       near_mem$imem_master_arsize,
	       near_mem$imem_master_awprot,
	       near_mem$imem_master_awsize,
	       near_mem$imem_req_f3;
  wire [1 : 0] near_mem$dmem_master_arburst,
	       near_mem$dmem_master_awburst,
	       near_mem$dmem_master_bresp,
	       near_mem$dmem_master_rresp,
	       near_mem$dmem_req_priv,
	       near_mem$imem_master_arburst,
	       near_mem$imem_master_awburst,
	       near_mem$imem_master_bresp,
	       near_mem$imem_master_rresp,
	       near_mem$imem_req_priv;
  wire near_mem$EN_dmem_req,
       near_mem$EN_imem_req,
       near_mem$EN_server_fence_i_request_put,
       near_mem$EN_server_fence_i_response_get,
       near_mem$EN_server_fence_request_put,
       near_mem$EN_server_fence_response_get,
       near_mem$EN_server_reset_request_put,
       near_mem$EN_server_reset_response_get,
       near_mem$EN_sfence_vma,
       near_mem$RDY_server_fence_i_request_put,
       near_mem$RDY_server_fence_i_response_get,
       near_mem$RDY_server_fence_request_put,
       near_mem$RDY_server_fence_response_get,
       near_mem$RDY_server_reset_request_put,
       near_mem$RDY_server_reset_response_get,
       near_mem$dmem_exc,
       near_mem$dmem_master_arlock,
       near_mem$dmem_master_arready,
       near_mem$dmem_master_arvalid,
       near_mem$dmem_master_awlock,
       near_mem$dmem_master_awready,
       near_mem$dmem_master_awvalid,
       near_mem$dmem_master_bready,
       near_mem$dmem_master_bvalid,
       near_mem$dmem_master_rlast,
       near_mem$dmem_master_rready,
       near_mem$dmem_master_rvalid,
       near_mem$dmem_master_wlast,
       near_mem$dmem_master_wready,
       near_mem$dmem_master_wvalid,
       near_mem$dmem_req_mstatus_MXR,
       near_mem$dmem_req_sstatus_SUM,
       near_mem$dmem_valid,
       near_mem$imem_exc,
       near_mem$imem_is_i32_not_i16,
       near_mem$imem_master_arlock,
       near_mem$imem_master_arready,
       near_mem$imem_master_arvalid,
       near_mem$imem_master_awlock,
       near_mem$imem_master_awready,
       near_mem$imem_master_awvalid,
       near_mem$imem_master_bready,
       near_mem$imem_master_bvalid,
       near_mem$imem_master_rlast,
       near_mem$imem_master_rready,
       near_mem$imem_master_rvalid,
       near_mem$imem_master_wlast,
       near_mem$imem_master_wready,
       near_mem$imem_master_wvalid,
       near_mem$imem_valid;

  // ports of submodule soc_map
  wire [63 : 0] soc_map$m_is_IO_addr_addr,
		soc_map$m_is_mem_addr_addr,
		soc_map$m_is_near_mem_IO_addr_addr,
		soc_map$m_pc_reset_value;

  // ports of submodule stage1_f_reset_reqs
  wire stage1_f_reset_reqs$CLR,
       stage1_f_reset_reqs$DEQ,
       stage1_f_reset_reqs$EMPTY_N,
       stage1_f_reset_reqs$ENQ,
       stage1_f_reset_reqs$FULL_N;

  // ports of submodule stage1_f_reset_rsps
  wire stage1_f_reset_rsps$CLR,
       stage1_f_reset_rsps$DEQ,
       stage1_f_reset_rsps$EMPTY_N,
       stage1_f_reset_rsps$ENQ,
       stage1_f_reset_rsps$FULL_N;

  // ports of submodule stage2_f_reset_reqs
  wire stage2_f_reset_reqs$CLR,
       stage2_f_reset_reqs$DEQ,
       stage2_f_reset_reqs$EMPTY_N,
       stage2_f_reset_reqs$ENQ,
       stage2_f_reset_reqs$FULL_N;

  // ports of submodule stage2_f_reset_rsps
  wire stage2_f_reset_rsps$CLR,
       stage2_f_reset_rsps$DEQ,
       stage2_f_reset_rsps$EMPTY_N,
       stage2_f_reset_rsps$ENQ,
       stage2_f_reset_rsps$FULL_N;

  // ports of submodule stage2_mbox
  wire [31 : 0] stage2_mbox$req_v1, stage2_mbox$req_v2, stage2_mbox$word;
  wire [3 : 0] stage2_mbox$set_verbosity_verbosity;
  wire [2 : 0] stage2_mbox$req_f3;
  wire stage2_mbox$EN_req,
       stage2_mbox$EN_req_reset,
       stage2_mbox$EN_rsp_reset,
       stage2_mbox$EN_set_verbosity,
       stage2_mbox$req_is_OP_not_OP_32,
       stage2_mbox$valid;

  // ports of submodule stage3_f_reset_reqs
  wire stage3_f_reset_reqs$CLR,
       stage3_f_reset_reqs$DEQ,
       stage3_f_reset_reqs$EMPTY_N,
       stage3_f_reset_reqs$ENQ,
       stage3_f_reset_reqs$FULL_N;

  // ports of submodule stage3_f_reset_rsps
  wire stage3_f_reset_rsps$CLR,
       stage3_f_reset_rsps$DEQ,
       stage3_f_reset_rsps$EMPTY_N,
       stage3_f_reset_rsps$ENQ,
       stage3_f_reset_rsps$FULL_N;

  // rule scheduling signals
  wire CAN_FIRE_RL_imem_rl_assert_fail,
       CAN_FIRE_RL_imem_rl_fetch_next_32b,
       CAN_FIRE_RL_rl_WFI_resume,
       CAN_FIRE_RL_rl_finish_FENCE,
       CAN_FIRE_RL_rl_finish_FENCE_I,
       CAN_FIRE_RL_rl_finish_SFENCE_VMA,
       CAN_FIRE_RL_rl_pipe,
       CAN_FIRE_RL_rl_reset_complete,
       CAN_FIRE_RL_rl_reset_from_WFI,
       CAN_FIRE_RL_rl_reset_start,
       CAN_FIRE_RL_rl_show_pipe,
       CAN_FIRE_RL_rl_stage1_CSRR_S_or_C,
       CAN_FIRE_RL_rl_stage1_CSRR_S_or_C_2,
       CAN_FIRE_RL_rl_stage1_CSRR_W,
       CAN_FIRE_RL_rl_stage1_CSRR_W_2,
       CAN_FIRE_RL_rl_stage1_FENCE,
       CAN_FIRE_RL_rl_stage1_FENCE_I,
       CAN_FIRE_RL_rl_stage1_SFENCE_VMA,
       CAN_FIRE_RL_rl_stage1_WFI,
       CAN_FIRE_RL_rl_stage1_interrupt,
       CAN_FIRE_RL_rl_stage1_mip_cmd,
       CAN_FIRE_RL_rl_stage1_restart_after_csrrx,
       CAN_FIRE_RL_rl_stage1_trap,
       CAN_FIRE_RL_rl_stage1_xRET,
       CAN_FIRE_RL_rl_stage2_nonpipe,
       CAN_FIRE_RL_rl_trap,
       CAN_FIRE_RL_rl_trap_fetch,
       CAN_FIRE_RL_stage1_rl_reset,
       CAN_FIRE_RL_stage2_rl_reset_begin,
       CAN_FIRE_RL_stage2_rl_reset_end,
       CAN_FIRE_RL_stage3_rl_reset,
       CAN_FIRE_dexie_cfdata_out_get,
       CAN_FIRE_dexie_continueStore,
       CAN_FIRE_dexie_dfmemdata_out_get,
       CAN_FIRE_dexie_dfregdata_out_get,
       CAN_FIRE_dexie_stall,
       CAN_FIRE_dexie_stallOnStore,
       CAN_FIRE_dmem_master_m_arready,
       CAN_FIRE_dmem_master_m_awready,
       CAN_FIRE_dmem_master_m_bvalid,
       CAN_FIRE_dmem_master_m_rvalid,
       CAN_FIRE_dmem_master_m_wready,
       CAN_FIRE_hart0_server_reset_request_put,
       CAN_FIRE_hart0_server_reset_response_get,
       CAN_FIRE_imem_master_m_arready,
       CAN_FIRE_imem_master_m_awready,
       CAN_FIRE_imem_master_m_bvalid,
       CAN_FIRE_imem_master_m_rvalid,
       CAN_FIRE_imem_master_m_wready,
       CAN_FIRE_m_external_interrupt_req,
       CAN_FIRE_nmi_req,
       CAN_FIRE_s_external_interrupt_req,
       CAN_FIRE_set_verbosity,
       CAN_FIRE_software_interrupt_req,
       CAN_FIRE_timer_interrupt_req,
       CAN_FIRE_trace_data_out_get,
       WILL_FIRE_RL_imem_rl_assert_fail,
       WILL_FIRE_RL_imem_rl_fetch_next_32b,
       WILL_FIRE_RL_rl_WFI_resume,
       WILL_FIRE_RL_rl_finish_FENCE,
       WILL_FIRE_RL_rl_finish_FENCE_I,
       WILL_FIRE_RL_rl_finish_SFENCE_VMA,
       WILL_FIRE_RL_rl_pipe,
       WILL_FIRE_RL_rl_reset_complete,
       WILL_FIRE_RL_rl_reset_from_WFI,
       WILL_FIRE_RL_rl_reset_start,
       WILL_FIRE_RL_rl_show_pipe,
       WILL_FIRE_RL_rl_stage1_CSRR_S_or_C,
       WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2,
       WILL_FIRE_RL_rl_stage1_CSRR_W,
       WILL_FIRE_RL_rl_stage1_CSRR_W_2,
       WILL_FIRE_RL_rl_stage1_FENCE,
       WILL_FIRE_RL_rl_stage1_FENCE_I,
       WILL_FIRE_RL_rl_stage1_SFENCE_VMA,
       WILL_FIRE_RL_rl_stage1_WFI,
       WILL_FIRE_RL_rl_stage1_interrupt,
       WILL_FIRE_RL_rl_stage1_mip_cmd,
       WILL_FIRE_RL_rl_stage1_restart_after_csrrx,
       WILL_FIRE_RL_rl_stage1_trap,
       WILL_FIRE_RL_rl_stage1_xRET,
       WILL_FIRE_RL_rl_stage2_nonpipe,
       WILL_FIRE_RL_rl_trap,
       WILL_FIRE_RL_rl_trap_fetch,
       WILL_FIRE_RL_stage1_rl_reset,
       WILL_FIRE_RL_stage2_rl_reset_begin,
       WILL_FIRE_RL_stage2_rl_reset_end,
       WILL_FIRE_RL_stage3_rl_reset,
       WILL_FIRE_dexie_cfdata_out_get,
       WILL_FIRE_dexie_continueStore,
       WILL_FIRE_dexie_dfmemdata_out_get,
       WILL_FIRE_dexie_dfregdata_out_get,
       WILL_FIRE_dexie_stall,
       WILL_FIRE_dexie_stallOnStore,
       WILL_FIRE_dmem_master_m_arready,
       WILL_FIRE_dmem_master_m_awready,
       WILL_FIRE_dmem_master_m_bvalid,
       WILL_FIRE_dmem_master_m_rvalid,
       WILL_FIRE_dmem_master_m_wready,
       WILL_FIRE_hart0_server_reset_request_put,
       WILL_FIRE_hart0_server_reset_response_get,
       WILL_FIRE_imem_master_m_arready,
       WILL_FIRE_imem_master_m_awready,
       WILL_FIRE_imem_master_m_bvalid,
       WILL_FIRE_imem_master_m_rvalid,
       WILL_FIRE_imem_master_m_wready,
       WILL_FIRE_m_external_interrupt_req,
       WILL_FIRE_nmi_req,
       WILL_FIRE_s_external_interrupt_req,
       WILL_FIRE_set_verbosity,
       WILL_FIRE_software_interrupt_req,
       WILL_FIRE_timer_interrupt_req,
       WILL_FIRE_trace_data_out_get;

  // inputs to muxes for submodule ports
  reg [31 : 0] MUX_csr_regfile$mav_csr_write_2__VAL_2;
  wire [234 : 0] MUX_f_trace_data$enq_1__VAL_1,
		 MUX_f_trace_data$enq_1__VAL_2,
		 MUX_f_trace_data$enq_1__VAL_3,
		 MUX_f_trace_data$enq_1__VAL_6,
		 MUX_f_trace_data$enq_1__VAL_7,
		 MUX_f_trace_data$enq_1__VAL_8;
  wire [96 : 0] MUX_f_dexie_cfdata_rv$port0__write_1__VAL_1,
		MUX_f_dexie_cfdata_rv$port0__write_1__VAL_2,
		MUX_f_dexie_cfdata_rv$port0__write_1__VAL_4,
		MUX_f_dexie_cfdata_rv$port0__write_1__VAL_5,
		MUX_f_dexie_cfdata_rv$port0__write_1__VAL_6;
  wire [67 : 0] MUX_rg_trap_info$write_1__VAL_1,
		MUX_rg_trap_info$write_1__VAL_2,
		MUX_rg_trap_info$write_1__VAL_3,
		MUX_rg_trap_info$write_1__VAL_4;
  wire [31 : 0] MUX_imem_rg_tval$write_1__VAL_5,
		MUX_near_mem$imem_req_2__VAL_1,
		MUX_near_mem$imem_req_2__VAL_2,
		MUX_near_mem$imem_req_2__VAL_5;
  wire [3 : 0] MUX_rg_state$write_1__VAL_1,
	       MUX_rg_state$write_1__VAL_2,
	       MUX_rg_state$write_1__VAL_3;
  wire MUX_csr_regfile$mav_csr_write_1__SEL_1,
       MUX_f_dexie_cfdata_rv$port0__write_1__SEL_1,
       MUX_f_dexie_cfdata_rv$port0__write_1__SEL_3,
       MUX_f_dexie_cfdata_rv$port0__write_1__SEL_4,
       MUX_f_trace_data$enq_1__SEL_1,
       MUX_imem_rg_f3$write_1__SEL_1,
       MUX_imem_rg_f3$write_1__SEL_2,
       MUX_imem_rg_mstatus_MXR$write_1__SEL_4,
       MUX_imem_rg_pc$write_1__SEL_4,
       MUX_near_mem$imem_req_1__SEL_6,
       MUX_rg_next_pc$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_1,
       MUX_rg_state$write_1__SEL_10,
       MUX_rg_state$write_1__SEL_11,
       MUX_rg_state$write_1__SEL_12,
       MUX_rg_state$write_1__SEL_13,
       MUX_rg_state$write_1__SEL_2,
       MUX_rg_state$write_1__SEL_3,
       MUX_rg_state$write_1__SEL_4,
       MUX_rg_state$write_1__SEL_6,
       MUX_rg_state$write_1__SEL_7,
       MUX_rg_state$write_1__SEL_8,
       MUX_rg_state$write_1__SEL_9,
       MUX_rg_trap_info$write_1__SEL_1,
       MUX_rg_trap_instr$write_1__SEL_1,
       MUX_rg_trap_interrupt$write_1__SEL_1,
       MUX_rg_trap_trace_data$write_1__SEL_1,
       MUX_stage1_rg_full$write_1__VAL_2,
       MUX_stage2_rg_full$write_1__VAL_2,
       MUX_stage3_rg_full$write_1__VAL_2;

  // declarations used by system tasks
  // synopsys translate_off
  reg [31 : 0] v__h2080;
  reg [31 : 0] v__h2074;
  // synopsys translate_on

  // remaining internal signals
  reg [63 : 0] x_out_data_to_stage2_trace_data_word3__h19089;
  reg [31 : 0] CASE_stage2_rg_stage2_BITS_338_TO_336_0_stage2_ETC__q20,
	       IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d1038,
	       IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d1322,
	       IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d953,
	       _theResult_____1_fst__h14127,
	       rs1_val__h23645,
	       x__h19706,
	       x__h19975,
	       x_out_bypass_rd_val__h7322,
	       x_out_data_to_stage2_addr__h12964,
	       x_out_data_to_stage2_val1__h12965,
	       x_out_data_to_stage3_rd_val__h6982;
  reg [4 : 0] CASE_theResult__667_BITS_6_TO_0_0b11_9_0b1111__ETC__q19,
	      x_out_bypass_rd__h7321,
	      x_out_data_to_stage2_trace_data_rd__h19086,
	      x_out_data_to_stage3_rd__h6981;
  reg [3 : 0] CASE_rg_cur_priv_0b0_8_0b1_9_11__q5,
	      CASE_theResult__667_BITS_14_TO_12_0b0_0_0b1_0__ETC__q12,
	      CASE_theResult__667_BITS_14_TO_12_0b0_0_0b1_0__ETC__q14,
	      CASE_theResult__667_BITS_14_TO_12_0b0_4_0b1_5_11__q13,
	      CASE_theResult__667_BITS_14_TO_12_0b0_IF_theRe_ETC__q16,
	      CASE_theResult__667_BITS_31_TO_20_0b0_11_0b1_1_ETC__q15,
	      CASE_theResult__667_BITS_31_TO_20_0b0_CASE_rg__ETC__q6,
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d757,
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d761,
	      alu_outputs_exc_code__h13624;
  reg [2 : 0] CASE_theResult__667_BITS_6_TO_0_0b11_1_0b10011_ETC__q17,
	      IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842;
  reg [1 : 0] CASE_stage2_rg_stage2_BITS_338_TO_336_0_2_1_IF_ETC__q1,
	      CASE_stage2_rg_stage2_BITS_338_TO_336_0_2_1_IF_ETC__q2;
  reg CASE_theResult__667_BITS_6_TO_0_0b10011_IF_ime_ETC__q11,
      CASE_theResult__667_BITS_6_TO_0_0b10011_NOT_IF_ETC__q9,
      CASE_theResult__667_BITS_6_TO_0_0b11_NOT_theRe_ETC__q8,
      CASE_theResult__667_BITS_6_TO_0_0b11_theResult_ETC__q10,
      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d557,
      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d651,
      IF_stage2_rg_stage2_0_BITS_338_TO_336_1_EQ_1_3_ETC___d134,
      IF_stage2_rg_stage2_0_BITS_338_TO_336_1_EQ_1_3_ETC___d143;
  wire [234 : 0] IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d1352;
  wire [127 : 0] csr_regfile_read_csr_mcycle__4_MINUS_rg_start__ETC___d1465;
  wire [68 : 0] IF_IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_ETC___d1292;
  wire [63 : 0] _theResult____h22270,
		alu_outputs___1_trace_data_word3__h18962,
		alu_outputs___1_trace_data_word3__h18982,
		cpi__h22272,
		cpifrac__h22273,
		delta_CPI_cycles__h22268,
		delta_CPI_instrs___1__h22305,
		delta_CPI_instrs__h22269,
		x__h22271,
		x_word3__h22035,
		x_word3__h24075;
  wire [35 : 0] IF_near_mem_imem_exc__08_THEN_near_mem_imem_ex_ETC___d1428;
  wire [31 : 0] IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d1323,
		IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d954,
		IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem__ETC___d245,
		IF_csr_regfile_read_csr_rg_trap_instr_445_BITS_ETC___d1529,
		IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d460,
		IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d462,
		IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d464,
		IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d465,
		IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d467,
		IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d468,
		IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d469,
		IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d471,
		IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d472,
		IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d473,
		IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d475,
		IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d476,
		IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d477,
		IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d478,
		IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d479,
		IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d480,
		IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d481,
		IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d482,
		IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d483,
		IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg_p_ETC___d246,
		IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_r_ETC___d886,
		SEXT_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d895,
		_theResult_____1_fst__h14120,
		_theResult_____1_fst__h14155,
		_theResult____h13252,
		_theResult____h4667,
		_theResult___snd__h15396,
		addr_of_b32___1__h16933,
		addr_of_b32___1__h21086,
		addr_of_b32___1__h29745,
		addr_of_b32__h16821,
		addr_of_b32__h20974,
		addr_of_b32__h29633,
		alu_outputs___1_addr__h13105,
		alu_outputs___1_addr__h13129,
		alu_outputs___1_addr__h13158,
		alu_outputs___1_trace_data_word1__h18980,
		alu_outputs___1_val1__h13583,
		alu_outputs___1_val1__h13605,
		branch_target__h13081,
		data_to_stage2_addr__h12955,
		eaddr__h13346,
		eaddr__h13367,
		fall_through_pc__h12914,
		instr___1__h7482,
		instr__h10093,
		instr__h10277,
		instr__h10406,
		instr__h10843,
		instr__h11015,
		instr__h11188,
		instr__h11381,
		instr__h11574,
		instr__h11691,
		instr__h11869,
		instr__h11988,
		instr__h12083,
		instr__h12219,
		instr__h12355,
		instr__h12491,
		instr__h12829,
		instr__h4665,
		instr__h7763,
		instr__h7908,
		instr__h8100,
		instr__h8295,
		instr__h8524,
		instr__h8867,
		instr__h9257,
		instr__h9373,
		instr__h9438,
		instr__h9755,
		instr_out___1__h7620,
		instr_out___1__h7642,
		next_pc___1__h14827,
		next_pc__h14825,
		output_stage2___1_bypass_rd_val__h7310,
		rd_val___1__h14108,
		rd_val___1__h14116,
		rd_val___1__h14123,
		rd_val___1__h14130,
		rd_val___1__h14137,
		rd_val___1__h14144,
		rd_val__h12871,
		rd_val__h13292,
		rd_val__h13310,
		rd_val__h13327,
		rd_val__h15292,
		rd_val__h15344,
		rd_val__h15366,
		rd_val__h7434,
		rs1_val__h22776,
		rs1_val_bypassed__h4675,
		rs2_val__h13077,
		trap_info_tval__h14663,
		val__h12873,
		val__h7436,
		value__h14715,
		x__h19798,
		x__h20175,
		x__h22200,
		x__h24122,
		x__h24130,
		x_out_data_to_stage2_instr__h12961,
		x_out_data_to_stage2_val2__h12966,
		x_out_next_pc__h12928,
		y__h23916;
  wire [20 : 0] SEXT_IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND__ETC___d311,
		theResult__667_BIT_31_CONCAT_theResult__667_BI_ETC__q4;
  wire [19 : 0] imm20__h10145;
  wire [12 : 0] SEXT_IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND__ETC___d340,
		theResult__667_BIT_31_CONCAT_theResult__667_BI_ETC__q3;
  wire [11 : 0] imm12__h10017,
		imm12__h10641,
		imm12__h10856,
		imm12__h11052,
		imm12__h11397,
		imm12__h7764,
		imm12__h8101,
		offset__h8471,
		theResult__667_BITS_31_TO_20__q18,
		theResult__667_BITS_31_TO_25_CONCAT_theResult__ETC__q7;
  wire [9 : 0] nzimm10__h10639, nzimm10__h10854;
  wire [8 : 0] offset__h9382;
  wire [7 : 0] offset__h7520;
  wire [6 : 0] offset__h8043;
  wire [5 : 0] imm6__h10015;
  wire [4 : 0] offset_BITS_4_TO_0___h8032,
	       offset_BITS_4_TO_0___h8463,
	       rd__h8103,
	       rs1__h8102,
	       shamt__h13248,
	       td1_rd__h25178,
	       x_out_data_to_stage2_rd__h12963,
	       x_rd__h22032;
  wire [3 : 0] IF_NOT_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ETC___d713,
	       IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763,
	       IF_rg_cur_priv_5_EQ_0b11_27_AND_IF_imem_rg_pc__ETC___d741,
	       alu_outputs___1_exc_code__h13579,
	       cur_verbosity__h3261,
	       x_exc_code__h29915,
	       x_out_trap_info_exc_code__h14666;
  wire [1 : 0] IF_NOT_near_mem_dmem_valid__11_30_OR_NOT_near__ETC___d178,
	       IF_near_mem_dmem_valid__11_THEN_IF_near_mem_dm_ETC___d114,
	       IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120,
	       IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d182,
	       IF_stage2_rg_stage2_0_BITS_335_TO_331_50_EQ_0__ETC___d177,
	       IF_stage2_rg_stage2_0_BITS_338_TO_336_1_EQ_3_7_ETC___d117;
  wire IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d1101,
       IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d546,
       IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d548,
       IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d550,
       IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d645,
       IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d656,
       IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703,
       IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705,
       IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1204,
       IF_csr_regfile_csr_mip_read__106_EQ_rg_prev_mi_ETC___d1411,
       IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_r_ETC___d676,
       IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d1248,
       IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d1250,
       IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d487,
       IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d489,
       NOT_IF_NOT_stage1_rg_full_97_98_OR_NOT_near_me_ETC___d1371,
       NOT_IF_NOT_stage1_rg_full_97_98_OR_NOT_near_me_ETC___d1402,
       NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43,
       NOT_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_im_ETC___d587,
       NOT_csr_regfile_csr_mip_read__106_EQ_rg_prev_m_ETC___d1138,
       NOT_csr_regfile_csr_mip_read__106_EQ_rg_prev_m_ETC___d1218,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1192,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1194,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1390,
       NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1418,
       NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d232,
       NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d242,
       NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d499,
       NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d501,
       NOT_near_mem_imem_exc__08_61_AND_IF_IF_imem_rg_ETC___d829,
       NOT_near_mem_imem_exc__08_61_AND_IF_IF_imem_rg_ETC___d866,
       NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d1141,
       NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d1189,
       NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492,
       NOT_rg_next_pc_500_BITS_1_TO_0_569_EQ_0b0_570__ETC___d1577,
       NOT_soc_map_m_pc_reset_value__084_BITS_1_TO_0__ETC___d1096,
       _0_OR_NOT_IF_NOT_stage1_rg_full_97_98_OR_NOT_ne_ETC___d1408,
       csr_regfile_RDY_server_reset_response_get__064_ETC___d1079,
       csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_107___d1108,
       csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1230,
       csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1275,
       csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1294,
       csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1360,
       csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1379,
       csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1383,
       csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1393,
       csr_regfile_read_misa__2_BIT_2_29_AND_IF_NOT_i_ETC___d325,
       csr_regfile_read_misa__2_BIT_2_29_AND_IF_NOT_i_ETC___d331,
       f_trace_data_i_notFull__049_AND_IF_stage2_rg_f_ETC___d1127,
       imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d1384,
       imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d1387,
       imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d220,
       imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d224,
       imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d227,
       imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d1073,
       imem_rg_pc_BITS_31_TO_2_0_EQ_imem_rg_cache_add_ETC___d202,
       imem_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_pc__ETC___d13,
       near_mem_RDY_server_reset_request_put__043_AND_ETC___d1055,
       near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d966,
       near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d969,
       near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d972,
       near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d975,
       near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d978,
       near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d981,
       near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d984,
       near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d987,
       near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d990,
       near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d993,
       near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d996,
       near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d999,
       near_mem_imem_pc__1_EQ_imem_rg_pc_PLUS_2_05___d206,
       near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507,
       near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659,
       near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d708,
       rg_cur_priv_5_EQ_0b11_27_OR_rg_cur_priv_5_EQ_0_ETC___d739,
       rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1421,
       rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1545,
       rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1561,
       rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1582,
       rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1588,
       rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1592,
       rg_state_4_EQ_3_100_AND_stage3_rg_full_0_OR_NO_ETC___d1233,
       rg_trap_info_435_BITS_67_TO_36_436_EQ_csr_regf_ETC___d1462,
       stage1_rg_full_97_AND_near_mem_imem_valid_AND__ETC___d1104;

  // action method hart0_server_reset_request_put
  assign RDY_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign CAN_FIRE_hart0_server_reset_request_put = f_reset_reqs$FULL_N ;
  assign WILL_FIRE_hart0_server_reset_request_put =
	     EN_hart0_server_reset_request_put ;

  // actionvalue method hart0_server_reset_response_get
  assign hart0_server_reset_response_get = f_reset_rsps$D_OUT ;
  assign RDY_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign CAN_FIRE_hart0_server_reset_response_get = f_reset_rsps$EMPTY_N ;
  assign WILL_FIRE_hart0_server_reset_response_get =
	     EN_hart0_server_reset_response_get ;

  // value method imem_master_m_awvalid
  assign imem_master_awvalid = near_mem$imem_master_awvalid ;

  // value method imem_master_m_awid
  assign imem_master_awid = near_mem$imem_master_awid ;

  // value method imem_master_m_awaddr
  assign imem_master_awaddr = near_mem$imem_master_awaddr ;

  // value method imem_master_m_awlen
  assign imem_master_awlen = near_mem$imem_master_awlen ;

  // value method imem_master_m_awsize
  assign imem_master_awsize = near_mem$imem_master_awsize ;

  // value method imem_master_m_awburst
  assign imem_master_awburst = near_mem$imem_master_awburst ;

  // value method imem_master_m_awlock
  assign imem_master_awlock = near_mem$imem_master_awlock ;

  // value method imem_master_m_awcache
  assign imem_master_awcache = near_mem$imem_master_awcache ;

  // value method imem_master_m_awprot
  assign imem_master_awprot = near_mem$imem_master_awprot ;

  // value method imem_master_m_awqos
  assign imem_master_awqos = near_mem$imem_master_awqos ;

  // value method imem_master_m_awregion
  assign imem_master_awregion = near_mem$imem_master_awregion ;

  // action method imem_master_m_awready
  assign CAN_FIRE_imem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_awready = 1'd1 ;

  // value method imem_master_m_wvalid
  assign imem_master_wvalid = near_mem$imem_master_wvalid ;

  // value method imem_master_m_wdata
  assign imem_master_wdata = near_mem$imem_master_wdata ;

  // value method imem_master_m_wstrb
  assign imem_master_wstrb = near_mem$imem_master_wstrb ;

  // value method imem_master_m_wlast
  assign imem_master_wlast = near_mem$imem_master_wlast ;

  // action method imem_master_m_wready
  assign CAN_FIRE_imem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_wready = 1'd1 ;

  // action method imem_master_m_bvalid
  assign CAN_FIRE_imem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_bvalid = 1'd1 ;

  // value method imem_master_m_bready
  assign imem_master_bready = near_mem$imem_master_bready ;

  // value method imem_master_m_arvalid
  assign imem_master_arvalid = near_mem$imem_master_arvalid ;

  // value method imem_master_m_arid
  assign imem_master_arid = near_mem$imem_master_arid ;

  // value method imem_master_m_araddr
  assign imem_master_araddr = near_mem$imem_master_araddr ;

  // value method imem_master_m_arlen
  assign imem_master_arlen = near_mem$imem_master_arlen ;

  // value method imem_master_m_arsize
  assign imem_master_arsize = near_mem$imem_master_arsize ;

  // value method imem_master_m_arburst
  assign imem_master_arburst = near_mem$imem_master_arburst ;

  // value method imem_master_m_arlock
  assign imem_master_arlock = near_mem$imem_master_arlock ;

  // value method imem_master_m_arcache
  assign imem_master_arcache = near_mem$imem_master_arcache ;

  // value method imem_master_m_arprot
  assign imem_master_arprot = near_mem$imem_master_arprot ;

  // value method imem_master_m_arqos
  assign imem_master_arqos = near_mem$imem_master_arqos ;

  // value method imem_master_m_arregion
  assign imem_master_arregion = near_mem$imem_master_arregion ;

  // action method imem_master_m_arready
  assign CAN_FIRE_imem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_imem_master_m_arready = 1'd1 ;

  // action method imem_master_m_rvalid
  assign CAN_FIRE_imem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_imem_master_m_rvalid = 1'd1 ;

  // value method imem_master_m_rready
  assign imem_master_rready = near_mem$imem_master_rready ;

  // value method dmem_master_m_awvalid
  assign dmem_master_awvalid = near_mem$dmem_master_awvalid ;

  // value method dmem_master_m_awid
  assign dmem_master_awid = near_mem$dmem_master_awid ;

  // value method dmem_master_m_awaddr
  assign dmem_master_awaddr = near_mem$dmem_master_awaddr ;

  // value method dmem_master_m_awlen
  assign dmem_master_awlen = near_mem$dmem_master_awlen ;

  // value method dmem_master_m_awsize
  assign dmem_master_awsize = near_mem$dmem_master_awsize ;

  // value method dmem_master_m_awburst
  assign dmem_master_awburst = near_mem$dmem_master_awburst ;

  // value method dmem_master_m_awlock
  assign dmem_master_awlock = near_mem$dmem_master_awlock ;

  // value method dmem_master_m_awcache
  assign dmem_master_awcache = near_mem$dmem_master_awcache ;

  // value method dmem_master_m_awprot
  assign dmem_master_awprot = near_mem$dmem_master_awprot ;

  // value method dmem_master_m_awqos
  assign dmem_master_awqos = near_mem$dmem_master_awqos ;

  // value method dmem_master_m_awregion
  assign dmem_master_awregion = near_mem$dmem_master_awregion ;

  // action method dmem_master_m_awready
  assign CAN_FIRE_dmem_master_m_awready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_awready = 1'd1 ;

  // value method dmem_master_m_wvalid
  assign dmem_master_wvalid = near_mem$dmem_master_wvalid ;

  // value method dmem_master_m_wdata
  assign dmem_master_wdata = near_mem$dmem_master_wdata ;

  // value method dmem_master_m_wstrb
  assign dmem_master_wstrb = near_mem$dmem_master_wstrb ;

  // value method dmem_master_m_wlast
  assign dmem_master_wlast = near_mem$dmem_master_wlast ;

  // action method dmem_master_m_wready
  assign CAN_FIRE_dmem_master_m_wready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_wready = 1'd1 ;

  // action method dmem_master_m_bvalid
  assign CAN_FIRE_dmem_master_m_bvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_bvalid = 1'd1 ;

  // value method dmem_master_m_bready
  assign dmem_master_bready = near_mem$dmem_master_bready ;

  // value method dmem_master_m_arvalid
  assign dmem_master_arvalid = near_mem$dmem_master_arvalid ;

  // value method dmem_master_m_arid
  assign dmem_master_arid = near_mem$dmem_master_arid ;

  // value method dmem_master_m_araddr
  assign dmem_master_araddr = near_mem$dmem_master_araddr ;

  // value method dmem_master_m_arlen
  assign dmem_master_arlen = near_mem$dmem_master_arlen ;

  // value method dmem_master_m_arsize
  assign dmem_master_arsize = near_mem$dmem_master_arsize ;

  // value method dmem_master_m_arburst
  assign dmem_master_arburst = near_mem$dmem_master_arburst ;

  // value method dmem_master_m_arlock
  assign dmem_master_arlock = near_mem$dmem_master_arlock ;

  // value method dmem_master_m_arcache
  assign dmem_master_arcache = near_mem$dmem_master_arcache ;

  // value method dmem_master_m_arprot
  assign dmem_master_arprot = near_mem$dmem_master_arprot ;

  // value method dmem_master_m_arqos
  assign dmem_master_arqos = near_mem$dmem_master_arqos ;

  // value method dmem_master_m_arregion
  assign dmem_master_arregion = near_mem$dmem_master_arregion ;

  // action method dmem_master_m_arready
  assign CAN_FIRE_dmem_master_m_arready = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_arready = 1'd1 ;

  // action method dmem_master_m_rvalid
  assign CAN_FIRE_dmem_master_m_rvalid = 1'd1 ;
  assign WILL_FIRE_dmem_master_m_rvalid = 1'd1 ;

  // value method dmem_master_m_rready
  assign dmem_master_rready = near_mem$dmem_master_rready ;

  // action method m_external_interrupt_req
  assign CAN_FIRE_m_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_m_external_interrupt_req = 1'd1 ;

  // action method s_external_interrupt_req
  assign CAN_FIRE_s_external_interrupt_req = 1'd1 ;
  assign WILL_FIRE_s_external_interrupt_req = 1'd1 ;

  // action method software_interrupt_req
  assign CAN_FIRE_software_interrupt_req = 1'd1 ;
  assign WILL_FIRE_software_interrupt_req = 1'd1 ;

  // action method timer_interrupt_req
  assign CAN_FIRE_timer_interrupt_req = 1'd1 ;
  assign WILL_FIRE_timer_interrupt_req = 1'd1 ;

  // action method nmi_req
  assign CAN_FIRE_nmi_req = 1'd1 ;
  assign WILL_FIRE_nmi_req = 1'd1 ;

  // action method set_verbosity
  assign RDY_set_verbosity = 1'd1 ;
  assign CAN_FIRE_set_verbosity = 1'd1 ;
  assign WILL_FIRE_set_verbosity = EN_set_verbosity ;

  // actionvalue method trace_data_out_get
  assign trace_data_out_get = f_trace_data$D_OUT ;
  assign RDY_trace_data_out_get = f_trace_data$EMPTY_N ;
  assign CAN_FIRE_trace_data_out_get = f_trace_data$EMPTY_N ;
  assign WILL_FIRE_trace_data_out_get = EN_trace_data_out_get ;

  // actionvalue method dexie_cfdata_out_get
  assign dexie_cfdata_out_get = f_dexie_cfdata_rv$port1__read[95:0] ;
  assign RDY_dexie_cfdata_out_get = f_dexie_cfdata_rv$port1__read[96] ;
  assign CAN_FIRE_dexie_cfdata_out_get = f_dexie_cfdata_rv$port1__read[96] ;
  assign WILL_FIRE_dexie_cfdata_out_get = EN_dexie_cfdata_out_get ;

  // actionvalue method dexie_dfmemdata_out_get
  assign dexie_dfmemdata_out_get = f_dexie_dfmemdata_rv$port1__read[100:0] ;
  assign RDY_dexie_dfmemdata_out_get = f_dexie_dfmemdata_rv$port1__read[101] ;
  assign CAN_FIRE_dexie_dfmemdata_out_get =
	     f_dexie_dfmemdata_rv$port1__read[101] ;
  assign WILL_FIRE_dexie_dfmemdata_out_get = EN_dexie_dfmemdata_out_get ;

  // actionvalue method dexie_dfregdata_out_get
  assign dexie_dfregdata_out_get = f_dexie_dfregdata_rv$port1__read[68:0] ;
  assign RDY_dexie_dfregdata_out_get = f_dexie_dfregdata_rv$port1__read[69] ;
  assign CAN_FIRE_dexie_dfregdata_out_get =
	     f_dexie_dfregdata_rv$port1__read[69] ;
  assign WILL_FIRE_dexie_dfregdata_out_get = EN_dexie_dfregdata_out_get ;

  // action method dexie_stall
  assign CAN_FIRE_dexie_stall = 1'd1 ;
  assign WILL_FIRE_dexie_stall = 1'd1 ;

  // action method dexie_stallOnStore
  assign CAN_FIRE_dexie_stallOnStore = 1'd1 ;
  assign WILL_FIRE_dexie_stallOnStore = 1'd1 ;

  // action method dexie_continueStore
  assign CAN_FIRE_dexie_continueStore = 1'd1 ;
  assign WILL_FIRE_dexie_continueStore = 1'd1 ;

  // submodule csr_regfile
  mkCSR_RegFile csr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .access_permitted_1_csr_addr(csr_regfile$access_permitted_1_csr_addr),
			    .access_permitted_1_priv(csr_regfile$access_permitted_1_priv),
			    .access_permitted_1_read_not_write(csr_regfile$access_permitted_1_read_not_write),
			    .access_permitted_2_csr_addr(csr_regfile$access_permitted_2_csr_addr),
			    .access_permitted_2_priv(csr_regfile$access_permitted_2_priv),
			    .access_permitted_2_read_not_write(csr_regfile$access_permitted_2_read_not_write),
			    .csr_counter_read_fault_csr_addr(csr_regfile$csr_counter_read_fault_csr_addr),
			    .csr_counter_read_fault_priv(csr_regfile$csr_counter_read_fault_priv),
			    .csr_ret_actions_from_priv(csr_regfile$csr_ret_actions_from_priv),
			    .csr_trap_actions_exc_code(csr_regfile$csr_trap_actions_exc_code),
			    .csr_trap_actions_from_priv(csr_regfile$csr_trap_actions_from_priv),
			    .csr_trap_actions_interrupt(csr_regfile$csr_trap_actions_interrupt),
			    .csr_trap_actions_nmi(csr_regfile$csr_trap_actions_nmi),
			    .csr_trap_actions_pc(csr_regfile$csr_trap_actions_pc),
			    .csr_trap_actions_xtval(csr_regfile$csr_trap_actions_xtval),
			    .interrupt_pending_cur_priv(csr_regfile$interrupt_pending_cur_priv),
			    .m_external_interrupt_req_set_not_clear(csr_regfile$m_external_interrupt_req_set_not_clear),
			    .mav_csr_write_csr_addr(csr_regfile$mav_csr_write_csr_addr),
			    .mav_csr_write_word(csr_regfile$mav_csr_write_word),
			    .mav_read_csr_csr_addr(csr_regfile$mav_read_csr_csr_addr),
			    .nmi_req_set_not_clear(csr_regfile$nmi_req_set_not_clear),
			    .read_csr_csr_addr(csr_regfile$read_csr_csr_addr),
			    .read_csr_port2_csr_addr(csr_regfile$read_csr_port2_csr_addr),
			    .s_external_interrupt_req_set_not_clear(csr_regfile$s_external_interrupt_req_set_not_clear),
			    .software_interrupt_req_set_not_clear(csr_regfile$software_interrupt_req_set_not_clear),
			    .timer_interrupt_req_set_not_clear(csr_regfile$timer_interrupt_req_set_not_clear),
			    .EN_server_reset_request_put(csr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(csr_regfile$EN_server_reset_response_get),
			    .EN_mav_read_csr(csr_regfile$EN_mav_read_csr),
			    .EN_mav_csr_write(csr_regfile$EN_mav_csr_write),
			    .EN_csr_trap_actions(csr_regfile$EN_csr_trap_actions),
			    .EN_csr_ret_actions(csr_regfile$EN_csr_ret_actions),
			    .EN_csr_minstret_incr(csr_regfile$EN_csr_minstret_incr),
			    .EN_debug(csr_regfile$EN_debug),
			    .RDY_server_reset_request_put(csr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(csr_regfile$RDY_server_reset_response_get),
			    .read_csr(csr_regfile$read_csr),
			    .read_csr_port2(),
			    .mav_read_csr(),
			    .mav_csr_write(csr_regfile$mav_csr_write),
			    .read_misa(csr_regfile$read_misa),
			    .read_mstatus(csr_regfile$read_mstatus),
			    .read_ustatus(),
			    .read_satp(csr_regfile$read_satp),
			    .csr_trap_actions(csr_regfile$csr_trap_actions),
			    .RDY_csr_trap_actions(),
			    .csr_ret_actions(csr_regfile$csr_ret_actions),
			    .RDY_csr_ret_actions(),
			    .read_csr_minstret(csr_regfile$read_csr_minstret),
			    .read_csr_mcycle(csr_regfile$read_csr_mcycle),
			    .read_csr_mtime(),
			    .access_permitted_1(csr_regfile$access_permitted_1),
			    .access_permitted_2(csr_regfile$access_permitted_2),
			    .csr_counter_read_fault(),
			    .csr_mip_read(csr_regfile$csr_mip_read),
			    .interrupt_pending(csr_regfile$interrupt_pending),
			    .wfi_resume(csr_regfile$wfi_resume),
			    .nmi_pending(csr_regfile$nmi_pending),
			    .RDY_debug());

  // submodule f_reset_reqs
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_reqs(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_reqs$D_IN),
						       .ENQ(f_reset_reqs$ENQ),
						       .DEQ(f_reset_reqs$DEQ),
						       .CLR(f_reset_reqs$CLR),
						       .D_OUT(f_reset_reqs$D_OUT),
						       .FULL_N(f_reset_reqs$FULL_N),
						       .EMPTY_N(f_reset_reqs$EMPTY_N));

  // submodule f_reset_rsps
  FIFO2 #(.width(32'd1), .guarded(32'd1)) f_reset_rsps(.RST(RST_N),
						       .CLK(CLK),
						       .D_IN(f_reset_rsps$D_IN),
						       .ENQ(f_reset_rsps$ENQ),
						       .DEQ(f_reset_rsps$DEQ),
						       .CLR(f_reset_rsps$CLR),
						       .D_OUT(f_reset_rsps$D_OUT),
						       .FULL_N(f_reset_rsps$FULL_N),
						       .EMPTY_N(f_reset_rsps$EMPTY_N));

  // submodule f_trace_data
  FIFO2 #(.width(32'd235), .guarded(32'd1)) f_trace_data(.RST(RST_N),
							 .CLK(CLK),
							 .D_IN(f_trace_data$D_IN),
							 .ENQ(f_trace_data$ENQ),
							 .DEQ(f_trace_data$DEQ),
							 .CLR(f_trace_data$CLR),
							 .D_OUT(f_trace_data$D_OUT),
							 .FULL_N(f_trace_data$FULL_N),
							 .EMPTY_N(f_trace_data$EMPTY_N));

  // submodule gpr_regfile
  mkGPR_RegFile gpr_regfile(.CLK(CLK),
			    .RST_N(RST_N),
			    .read_rs1_port2_rs1(gpr_regfile$read_rs1_port2_rs1),
			    .read_rs1_rs1(gpr_regfile$read_rs1_rs1),
			    .read_rs2_rs2(gpr_regfile$read_rs2_rs2),
			    .write_rd_rd(gpr_regfile$write_rd_rd),
			    .write_rd_rd_val(gpr_regfile$write_rd_rd_val),
			    .EN_server_reset_request_put(gpr_regfile$EN_server_reset_request_put),
			    .EN_server_reset_response_get(gpr_regfile$EN_server_reset_response_get),
			    .EN_write_rd(gpr_regfile$EN_write_rd),
			    .RDY_server_reset_request_put(gpr_regfile$RDY_server_reset_request_put),
			    .RDY_server_reset_response_get(gpr_regfile$RDY_server_reset_response_get),
			    .read_rs1(gpr_regfile$read_rs1),
			    .read_rs1_port2(),
			    .read_rs2(gpr_regfile$read_rs2));

  // submodule near_mem
  mkNear_Mem near_mem(.CLK(CLK),
		      .RST_N(RST_N),
		      .dmem_master_arready(near_mem$dmem_master_arready),
		      .dmem_master_awready(near_mem$dmem_master_awready),
		      .dmem_master_bid(near_mem$dmem_master_bid),
		      .dmem_master_bresp(near_mem$dmem_master_bresp),
		      .dmem_master_bvalid(near_mem$dmem_master_bvalid),
		      .dmem_master_rdata(near_mem$dmem_master_rdata),
		      .dmem_master_rid(near_mem$dmem_master_rid),
		      .dmem_master_rlast(near_mem$dmem_master_rlast),
		      .dmem_master_rresp(near_mem$dmem_master_rresp),
		      .dmem_master_rvalid(near_mem$dmem_master_rvalid),
		      .dmem_master_wready(near_mem$dmem_master_wready),
		      .dmem_req_addr(near_mem$dmem_req_addr),
		      .dmem_req_amo_funct7(near_mem$dmem_req_amo_funct7),
		      .dmem_req_f3(near_mem$dmem_req_f3),
		      .dmem_req_mstatus_MXR(near_mem$dmem_req_mstatus_MXR),
		      .dmem_req_op(near_mem$dmem_req_op),
		      .dmem_req_priv(near_mem$dmem_req_priv),
		      .dmem_req_satp(near_mem$dmem_req_satp),
		      .dmem_req_sstatus_SUM(near_mem$dmem_req_sstatus_SUM),
		      .dmem_req_store_value(near_mem$dmem_req_store_value),
		      .imem_master_arready(near_mem$imem_master_arready),
		      .imem_master_awready(near_mem$imem_master_awready),
		      .imem_master_bid(near_mem$imem_master_bid),
		      .imem_master_bresp(near_mem$imem_master_bresp),
		      .imem_master_bvalid(near_mem$imem_master_bvalid),
		      .imem_master_rdata(near_mem$imem_master_rdata),
		      .imem_master_rid(near_mem$imem_master_rid),
		      .imem_master_rlast(near_mem$imem_master_rlast),
		      .imem_master_rresp(near_mem$imem_master_rresp),
		      .imem_master_rvalid(near_mem$imem_master_rvalid),
		      .imem_master_wready(near_mem$imem_master_wready),
		      .imem_req_addr(near_mem$imem_req_addr),
		      .imem_req_f3(near_mem$imem_req_f3),
		      .imem_req_mstatus_MXR(near_mem$imem_req_mstatus_MXR),
		      .imem_req_priv(near_mem$imem_req_priv),
		      .imem_req_satp(near_mem$imem_req_satp),
		      .imem_req_sstatus_SUM(near_mem$imem_req_sstatus_SUM),
		      .server_fence_request_put(near_mem$server_fence_request_put),
		      .EN_server_reset_request_put(near_mem$EN_server_reset_request_put),
		      .EN_server_reset_response_get(near_mem$EN_server_reset_response_get),
		      .EN_imem_req(near_mem$EN_imem_req),
		      .EN_dmem_req(near_mem$EN_dmem_req),
		      .EN_server_fence_i_request_put(near_mem$EN_server_fence_i_request_put),
		      .EN_server_fence_i_response_get(near_mem$EN_server_fence_i_response_get),
		      .EN_server_fence_request_put(near_mem$EN_server_fence_request_put),
		      .EN_server_fence_response_get(near_mem$EN_server_fence_response_get),
		      .EN_sfence_vma(near_mem$EN_sfence_vma),
		      .RDY_server_reset_request_put(near_mem$RDY_server_reset_request_put),
		      .RDY_server_reset_response_get(near_mem$RDY_server_reset_response_get),
		      .imem_valid(near_mem$imem_valid),
		      .imem_is_i32_not_i16(near_mem$imem_is_i32_not_i16),
		      .imem_pc(near_mem$imem_pc),
		      .imem_instr(near_mem$imem_instr),
		      .imem_exc(near_mem$imem_exc),
		      .imem_exc_code(near_mem$imem_exc_code),
		      .imem_tval(),
		      .imem_master_awvalid(near_mem$imem_master_awvalid),
		      .imem_master_awid(near_mem$imem_master_awid),
		      .imem_master_awaddr(near_mem$imem_master_awaddr),
		      .imem_master_awlen(near_mem$imem_master_awlen),
		      .imem_master_awsize(near_mem$imem_master_awsize),
		      .imem_master_awburst(near_mem$imem_master_awburst),
		      .imem_master_awlock(near_mem$imem_master_awlock),
		      .imem_master_awcache(near_mem$imem_master_awcache),
		      .imem_master_awprot(near_mem$imem_master_awprot),
		      .imem_master_awqos(near_mem$imem_master_awqos),
		      .imem_master_awregion(near_mem$imem_master_awregion),
		      .imem_master_wvalid(near_mem$imem_master_wvalid),
		      .imem_master_wdata(near_mem$imem_master_wdata),
		      .imem_master_wstrb(near_mem$imem_master_wstrb),
		      .imem_master_wlast(near_mem$imem_master_wlast),
		      .imem_master_bready(near_mem$imem_master_bready),
		      .imem_master_arvalid(near_mem$imem_master_arvalid),
		      .imem_master_arid(near_mem$imem_master_arid),
		      .imem_master_araddr(near_mem$imem_master_araddr),
		      .imem_master_arlen(near_mem$imem_master_arlen),
		      .imem_master_arsize(near_mem$imem_master_arsize),
		      .imem_master_arburst(near_mem$imem_master_arburst),
		      .imem_master_arlock(near_mem$imem_master_arlock),
		      .imem_master_arcache(near_mem$imem_master_arcache),
		      .imem_master_arprot(near_mem$imem_master_arprot),
		      .imem_master_arqos(near_mem$imem_master_arqos),
		      .imem_master_arregion(near_mem$imem_master_arregion),
		      .imem_master_rready(near_mem$imem_master_rready),
		      .dmem_valid(near_mem$dmem_valid),
		      .dmem_word64(near_mem$dmem_word64),
		      .dmem_st_amo_val(),
		      .dmem_exc(near_mem$dmem_exc),
		      .dmem_exc_code(near_mem$dmem_exc_code),
		      .dmem_master_awvalid(near_mem$dmem_master_awvalid),
		      .dmem_master_awid(near_mem$dmem_master_awid),
		      .dmem_master_awaddr(near_mem$dmem_master_awaddr),
		      .dmem_master_awlen(near_mem$dmem_master_awlen),
		      .dmem_master_awsize(near_mem$dmem_master_awsize),
		      .dmem_master_awburst(near_mem$dmem_master_awburst),
		      .dmem_master_awlock(near_mem$dmem_master_awlock),
		      .dmem_master_awcache(near_mem$dmem_master_awcache),
		      .dmem_master_awprot(near_mem$dmem_master_awprot),
		      .dmem_master_awqos(near_mem$dmem_master_awqos),
		      .dmem_master_awregion(near_mem$dmem_master_awregion),
		      .dmem_master_wvalid(near_mem$dmem_master_wvalid),
		      .dmem_master_wdata(near_mem$dmem_master_wdata),
		      .dmem_master_wstrb(near_mem$dmem_master_wstrb),
		      .dmem_master_wlast(near_mem$dmem_master_wlast),
		      .dmem_master_bready(near_mem$dmem_master_bready),
		      .dmem_master_arvalid(near_mem$dmem_master_arvalid),
		      .dmem_master_arid(near_mem$dmem_master_arid),
		      .dmem_master_araddr(near_mem$dmem_master_araddr),
		      .dmem_master_arlen(near_mem$dmem_master_arlen),
		      .dmem_master_arsize(near_mem$dmem_master_arsize),
		      .dmem_master_arburst(near_mem$dmem_master_arburst),
		      .dmem_master_arlock(near_mem$dmem_master_arlock),
		      .dmem_master_arcache(near_mem$dmem_master_arcache),
		      .dmem_master_arprot(near_mem$dmem_master_arprot),
		      .dmem_master_arqos(near_mem$dmem_master_arqos),
		      .dmem_master_arregion(near_mem$dmem_master_arregion),
		      .dmem_master_rready(near_mem$dmem_master_rready),
		      .RDY_server_fence_i_request_put(near_mem$RDY_server_fence_i_request_put),
		      .RDY_server_fence_i_response_get(near_mem$RDY_server_fence_i_response_get),
		      .RDY_server_fence_request_put(near_mem$RDY_server_fence_request_put),
		      .RDY_server_fence_response_get(near_mem$RDY_server_fence_response_get),
		      .RDY_sfence_vma());

  // submodule soc_map
  mkSoC_Map soc_map(.CLK(CLK),
		    .RST_N(RST_N),
		    .m_is_IO_addr_addr(soc_map$m_is_IO_addr_addr),
		    .m_is_mem_addr_addr(soc_map$m_is_mem_addr_addr),
		    .m_is_near_mem_IO_addr_addr(soc_map$m_is_near_mem_IO_addr_addr),
		    .m_near_mem_io_addr_base(),
		    .m_near_mem_io_addr_size(),
		    .m_near_mem_io_addr_lim(),
		    .m_plic_addr_base(),
		    .m_plic_addr_size(),
		    .m_plic_addr_lim(),
		    .m_uart0_addr_base(),
		    .m_uart0_addr_size(),
		    .m_uart0_addr_lim(),
		    .m_boot_rom_addr_base(),
		    .m_boot_rom_addr_size(),
		    .m_boot_rom_addr_lim(),
		    .m_mem0_controller_addr_base(),
		    .m_mem0_controller_addr_size(),
		    .m_mem0_controller_addr_lim(),
		    .m_tcm_addr_base(),
		    .m_tcm_addr_size(),
		    .m_tcm_addr_lim(),
		    .m_is_mem_addr(),
		    .m_is_IO_addr(),
		    .m_is_near_mem_IO_addr(),
		    .m_pc_reset_value(soc_map$m_pc_reset_value),
		    .m_mtvec_reset_value(),
		    .m_nmivec_reset_value());

  // submodule stage1_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage1_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage1_f_reset_reqs$ENQ),
						.DEQ(stage1_f_reset_reqs$DEQ),
						.CLR(stage1_f_reset_reqs$CLR),
						.FULL_N(stage1_f_reset_reqs$FULL_N),
						.EMPTY_N(stage1_f_reset_reqs$EMPTY_N));

  // submodule stage1_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage1_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage1_f_reset_rsps$ENQ),
						.DEQ(stage1_f_reset_rsps$DEQ),
						.CLR(stage1_f_reset_rsps$CLR),
						.FULL_N(stage1_f_reset_rsps$FULL_N),
						.EMPTY_N(stage1_f_reset_rsps$EMPTY_N));

  // submodule stage2_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage2_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage2_f_reset_reqs$ENQ),
						.DEQ(stage2_f_reset_reqs$DEQ),
						.CLR(stage2_f_reset_reqs$CLR),
						.FULL_N(stage2_f_reset_reqs$FULL_N),
						.EMPTY_N(stage2_f_reset_reqs$EMPTY_N));

  // submodule stage2_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage2_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage2_f_reset_rsps$ENQ),
						.DEQ(stage2_f_reset_rsps$DEQ),
						.CLR(stage2_f_reset_rsps$CLR),
						.FULL_N(stage2_f_reset_rsps$FULL_N),
						.EMPTY_N(stage2_f_reset_rsps$EMPTY_N));

  // submodule stage2_mbox
  mkRISCV_MBox stage2_mbox(.CLK(CLK),
			   .RST_N(RST_N),
			   .req_f3(stage2_mbox$req_f3),
			   .req_is_OP_not_OP_32(stage2_mbox$req_is_OP_not_OP_32),
			   .req_v1(stage2_mbox$req_v1),
			   .req_v2(stage2_mbox$req_v2),
			   .set_verbosity_verbosity(stage2_mbox$set_verbosity_verbosity),
			   .EN_set_verbosity(stage2_mbox$EN_set_verbosity),
			   .EN_req_reset(stage2_mbox$EN_req_reset),
			   .EN_rsp_reset(stage2_mbox$EN_rsp_reset),
			   .EN_req(stage2_mbox$EN_req),
			   .RDY_set_verbosity(),
			   .RDY_req_reset(),
			   .RDY_rsp_reset(),
			   .valid(stage2_mbox$valid),
			   .word(stage2_mbox$word));

  // submodule stage3_f_reset_reqs
  FIFO20 #(.guarded(32'd1)) stage3_f_reset_reqs(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage3_f_reset_reqs$ENQ),
						.DEQ(stage3_f_reset_reqs$DEQ),
						.CLR(stage3_f_reset_reqs$CLR),
						.FULL_N(stage3_f_reset_reqs$FULL_N),
						.EMPTY_N(stage3_f_reset_reqs$EMPTY_N));

  // submodule stage3_f_reset_rsps
  FIFO20 #(.guarded(32'd1)) stage3_f_reset_rsps(.RST(RST_N),
						.CLK(CLK),
						.ENQ(stage3_f_reset_rsps$ENQ),
						.DEQ(stage3_f_reset_rsps$DEQ),
						.CLR(stage3_f_reset_rsps$CLR),
						.FULL_N(stage3_f_reset_rsps$FULL_N),
						.EMPTY_N(stage3_f_reset_rsps$EMPTY_N));

  // rule RL_rl_show_pipe
  assign CAN_FIRE_RL_rl_show_pipe =
	     NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43 &&
	     rg_state != 4'd0 &&
	     rg_state != 4'd1 &&
	     rg_state != 4'd12 ;
  assign WILL_FIRE_RL_rl_show_pipe = CAN_FIRE_RL_rl_show_pipe ;

  // rule RL_rl_stage1_mip_cmd
  assign CAN_FIRE_RL_rl_stage1_mip_cmd =
	     f_trace_data$FULL_N && rg_state == 4'd3 &&
	     stage1_rg_full_97_AND_near_mem_imem_valid_AND__ETC___d1104 &&
	     !stage3_rg_full &&
	     !csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_107___d1108 ;
  assign WILL_FIRE_RL_rl_stage1_mip_cmd = CAN_FIRE_RL_rl_stage1_mip_cmd ;

  // rule RL_rl_stage2_nonpipe
  assign CAN_FIRE_RL_rl_stage2_nonpipe =
	     rg_state == 4'd3 && !stage3_rg_full &&
	     IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 ==
	     2'd3 ;
  assign WILL_FIRE_RL_rl_stage2_nonpipe = CAN_FIRE_RL_rl_stage2_nonpipe ;

  // rule RL_rl_stage1_trap
  assign CAN_FIRE_RL_rl_stage1_trap =
	     rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1421 &&
	     IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 ==
	     4'd11 ;
  assign WILL_FIRE_RL_rl_stage1_trap = CAN_FIRE_RL_rl_stage1_trap ;

  // rule RL_rl_trap
  assign CAN_FIRE_RL_rl_trap =
	     f_trace_data$FULL_N && !f_dexie_cfdata_rv[96] &&
	     rg_state == 4'd4 &&
	     (!stage1_rg_full ||
	      near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507) ;
  assign WILL_FIRE_RL_rl_trap = CAN_FIRE_RL_rl_trap ;

  // rule RL_rl_stage1_CSRR_W
  assign CAN_FIRE_RL_rl_stage1_CSRR_W = MUX_rg_state$write_1__SEL_9 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W = MUX_rg_state$write_1__SEL_9 ;

  // rule RL_rl_stage1_CSRR_W_2
  assign CAN_FIRE_RL_rl_stage1_CSRR_W_2 = MUX_rg_state$write_1__SEL_2 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_W_2 = MUX_rg_state$write_1__SEL_2 ;

  // rule RL_rl_stage1_CSRR_S_or_C
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C = MUX_rg_state$write_1__SEL_10 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C = MUX_rg_state$write_1__SEL_10 ;

  // rule RL_rl_stage1_CSRR_S_or_C_2
  assign CAN_FIRE_RL_rl_stage1_CSRR_S_or_C_2 = MUX_rg_state$write_1__SEL_3 ;
  assign WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 = MUX_rg_state$write_1__SEL_3 ;

  // rule RL_rl_stage1_restart_after_csrrx
  assign CAN_FIRE_RL_rl_stage1_restart_after_csrrx =
	     imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d1073 &&
	     rg_state == 4'd8 ;
  assign WILL_FIRE_RL_rl_stage1_restart_after_csrrx =
	     CAN_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // rule RL_rl_stage1_xRET
  assign CAN_FIRE_RL_rl_stage1_xRET =
	     f_trace_data$FULL_N && !f_dexie_cfdata_rv[96] &&
	     rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1545 ;
  assign WILL_FIRE_RL_rl_stage1_xRET = CAN_FIRE_RL_rl_stage1_xRET ;

  // rule RL_rl_stage1_FENCE_I
  assign CAN_FIRE_RL_rl_stage1_FENCE_I = MUX_rg_state$write_1__SEL_11 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE_I = MUX_rg_state$write_1__SEL_11 ;

  // rule RL_rl_finish_FENCE_I
  assign CAN_FIRE_RL_rl_finish_FENCE_I =
	     imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d1073 &&
	     near_mem$RDY_server_fence_i_response_get &&
	     rg_state == 4'd9 ;
  assign WILL_FIRE_RL_rl_finish_FENCE_I = CAN_FIRE_RL_rl_finish_FENCE_I ;

  // rule RL_rl_stage1_FENCE
  assign CAN_FIRE_RL_rl_stage1_FENCE = MUX_rg_state$write_1__SEL_12 ;
  assign WILL_FIRE_RL_rl_stage1_FENCE = MUX_rg_state$write_1__SEL_12 ;

  // rule RL_rl_finish_FENCE
  assign CAN_FIRE_RL_rl_finish_FENCE =
	     imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d1073 &&
	     near_mem$RDY_server_fence_response_get &&
	     rg_state == 4'd10 ;
  assign WILL_FIRE_RL_rl_finish_FENCE = CAN_FIRE_RL_rl_finish_FENCE ;

  // rule RL_rl_stage1_SFENCE_VMA
  assign CAN_FIRE_RL_rl_stage1_SFENCE_VMA = MUX_rg_state$write_1__SEL_13 ;
  assign WILL_FIRE_RL_rl_stage1_SFENCE_VMA = MUX_rg_state$write_1__SEL_13 ;

  // rule RL_rl_finish_SFENCE_VMA
  assign CAN_FIRE_RL_rl_finish_SFENCE_VMA =
	     imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d1073 &&
	     rg_state == 4'd11 ;
  assign WILL_FIRE_RL_rl_finish_SFENCE_VMA =
	     CAN_FIRE_RL_rl_finish_SFENCE_VMA ;

  // rule RL_rl_stage1_WFI
  assign CAN_FIRE_RL_rl_stage1_WFI =
	     f_trace_data$FULL_N && !f_dexie_cfdata_rv[96] &&
	     rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1592 ;
  assign WILL_FIRE_RL_rl_stage1_WFI = CAN_FIRE_RL_rl_stage1_WFI ;

  // rule RL_rl_WFI_resume
  assign CAN_FIRE_RL_rl_WFI_resume =
	     imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d1073 &&
	     rg_state == 4'd12 &&
	     csr_regfile$wfi_resume &&
	     (!stage1_rg_full ||
	      near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507) ;
  assign WILL_FIRE_RL_rl_WFI_resume = CAN_FIRE_RL_rl_WFI_resume ;

  // rule RL_rl_reset_from_WFI
  assign CAN_FIRE_RL_rl_reset_from_WFI =
	     rg_state == 4'd12 && f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_rl_reset_from_WFI = MUX_rg_state$write_1__SEL_4 ;

  // rule RL_rl_trap_fetch
  assign CAN_FIRE_RL_rl_trap_fetch =
	     imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d1073 &&
	     rg_state == 4'd5 ;
  assign WILL_FIRE_RL_rl_trap_fetch = CAN_FIRE_RL_rl_trap_fetch ;

  // rule RL_rl_stage1_interrupt
  assign CAN_FIRE_RL_rl_stage1_interrupt =
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     rg_state == 4'd3 &&
	     stage1_rg_full_97_AND_near_mem_imem_valid_AND__ETC___d1104 &&
	     !stage3_rg_full &&
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_107___d1108 ;
  assign WILL_FIRE_RL_rl_stage1_interrupt = CAN_FIRE_RL_rl_stage1_interrupt ;

  // rule RL_imem_rl_assert_fail
  assign CAN_FIRE_RL_imem_rl_assert_fail = !near_mem$imem_is_i32_not_i16 ;
  assign WILL_FIRE_RL_imem_rl_assert_fail = CAN_FIRE_RL_imem_rl_assert_fail ;

  // rule RL_rl_reset_complete
  assign CAN_FIRE_RL_rl_reset_complete =
	     gpr_regfile$RDY_server_reset_response_get &&
	     near_mem$RDY_server_reset_response_get &&
	     csr_regfile_RDY_server_reset_response_get__064_ETC___d1079 &&
	     rg_state == 4'd1 ;
  assign WILL_FIRE_RL_rl_reset_complete = MUX_rg_state$write_1__SEL_1 ;

  // rule RL_rl_pipe
  assign CAN_FIRE_RL_rl_pipe =
	     (IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 !=
	      2'd2 ||
	      dexie_stall_set_or_clear ||
	      f_trace_data_i_notFull__049_AND_IF_stage2_rg_f_ETC___d1127) &&
	     NOT_csr_regfile_csr_mip_read__106_EQ_rg_prev_m_ETC___d1218 &&
	     rg_state_4_EQ_3_100_AND_stage3_rg_full_0_OR_NO_ETC___d1233 ;
  assign WILL_FIRE_RL_rl_pipe =
	     CAN_FIRE_RL_rl_pipe && !WILL_FIRE_RL_imem_rl_fetch_next_32b ;

  // rule RL_rl_reset_start
  assign CAN_FIRE_RL_rl_reset_start =
	     gpr_regfile$RDY_server_reset_request_put &&
	     near_mem_RDY_server_reset_request_put__043_AND_ETC___d1055 &&
	     rg_state == 4'd0 ;
  assign WILL_FIRE_RL_rl_reset_start = CAN_FIRE_RL_rl_reset_start ;

  // rule RL_imem_rl_fetch_next_32b
  assign CAN_FIRE_RL_imem_rl_fetch_next_32b =
	     near_mem$imem_valid && imem_rg_pc[1:0] != 2'b0 &&
	     imem_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_pc__ETC___d13 &&
	     near_mem$imem_instr[17:16] == 2'b11 ;
  assign WILL_FIRE_RL_imem_rl_fetch_next_32b =
	     CAN_FIRE_RL_imem_rl_fetch_next_32b ;

  // rule RL_stage3_rl_reset
  assign CAN_FIRE_RL_stage3_rl_reset =
	     stage3_f_reset_reqs$EMPTY_N && stage3_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage3_rl_reset = CAN_FIRE_RL_stage3_rl_reset ;

  // rule RL_stage2_rl_reset_end
  assign CAN_FIRE_RL_stage2_rl_reset_end =
	     stage2_f_reset_rsps$FULL_N && stage2_rg_resetting ;
  assign WILL_FIRE_RL_stage2_rl_reset_end = CAN_FIRE_RL_stage2_rl_reset_end ;

  // rule RL_stage2_rl_reset_begin
  assign CAN_FIRE_RL_stage2_rl_reset_begin = stage2_f_reset_reqs$EMPTY_N ;
  assign WILL_FIRE_RL_stage2_rl_reset_begin = stage2_f_reset_reqs$EMPTY_N ;

  // rule RL_stage1_rl_reset
  assign CAN_FIRE_RL_stage1_rl_reset =
	     stage1_f_reset_reqs$EMPTY_N && stage1_f_reset_rsps$FULL_N ;
  assign WILL_FIRE_RL_stage1_rl_reset = CAN_FIRE_RL_stage1_rl_reset ;

  // inputs to muxes for submodule ports
  assign MUX_csr_regfile$mav_csr_write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ;
  assign MUX_f_dexie_cfdata_rv$port0__write_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1275 &&
	     !dexie_stall_set_or_clear ;
  assign MUX_f_dexie_cfdata_rv$port0__write_1__SEL_3 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ;
  assign MUX_f_dexie_cfdata_rv$port0__write_1__SEL_4 =
	     WILL_FIRE_RL_rl_stage1_WFI || WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;
  assign MUX_f_trace_data$enq_1__SEL_1 =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 ==
	     2'd2 &&
	     !dexie_stall_set_or_clear ;
  assign MUX_imem_rg_f3$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ;
  assign MUX_imem_rg_f3$write_1__SEL_2 =
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_107___d1108 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1192 &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1204 ;
  assign MUX_imem_rg_mstatus_MXR$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;
  assign MUX_imem_rg_pc$write_1__SEL_4 =
	     WILL_FIRE_RL_rl_trap_fetch || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign MUX_near_mem$imem_req_1__SEL_6 =
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign MUX_rg_next_pc$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_WFI || WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;
  assign MUX_rg_state$write_1__SEL_1 =
	     CAN_FIRE_RL_rl_reset_complete &&
	     !WILL_FIRE_RL_imem_rl_fetch_next_32b ;
  assign MUX_rg_state$write_1__SEL_2 =
	     (!csr_regfile$access_permitted_1 ||
	      f_trace_data$FULL_N && !f_dexie_cfdata_rv[96]) &&
	     rg_state == 4'd6 ;
  assign MUX_rg_state$write_1__SEL_3 =
	     (!csr_regfile$access_permitted_2 ||
	      f_trace_data$FULL_N && !f_dexie_cfdata_rv[96]) &&
	     rg_state == 4'd7 ;
  assign MUX_rg_state$write_1__SEL_4 =
	     CAN_FIRE_RL_rl_reset_from_WFI && !WILL_FIRE_RL_rl_WFI_resume ;
  assign MUX_rg_state$write_1__SEL_6 =
	     WILL_FIRE_RL_rl_trap_fetch || WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;
  assign MUX_rg_state$write_1__SEL_7 =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_rg_state$write_1__SEL_8 =
	     WILL_FIRE_RL_rl_stage1_xRET || WILL_FIRE_RL_rl_trap ;
  assign MUX_rg_state$write_1__SEL_9 =
	     rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1421 &&
	     IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 ==
	     4'd2 ;
  assign MUX_rg_state$write_1__SEL_10 =
	     rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1421 &&
	     IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 ==
	     4'd3 ;
  assign MUX_rg_state$write_1__SEL_11 =
	     near_mem$RDY_server_fence_i_request_put && f_trace_data$FULL_N &&
	     !f_dexie_cfdata_rv[96] &&
	     rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1561 ;
  assign MUX_rg_state$write_1__SEL_12 =
	     near_mem$RDY_server_fence_request_put && f_trace_data$FULL_N &&
	     !f_dexie_cfdata_rv[96] &&
	     rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1582 ;
  assign MUX_rg_state$write_1__SEL_13 =
	     f_trace_data$FULL_N && !f_dexie_cfdata_rv[96] &&
	     rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1588 ;
  assign MUX_rg_trap_info$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ;
  assign MUX_rg_trap_instr$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ;
  assign MUX_rg_trap_interrupt$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;
  assign MUX_rg_trap_trace_data$write_1__SEL_1 =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ;
  always@(rg_trap_instr or
	  csr_regfile$read_csr or
	  y__h23916 or
	  IF_csr_regfile_read_csr_rg_trap_instr_445_BITS_ETC___d1529)
  begin
    case (rg_trap_instr[14:12])
      3'b010, 3'b110:
	  MUX_csr_regfile$mav_csr_write_2__VAL_2 =
	      IF_csr_regfile_read_csr_rg_trap_instr_445_BITS_ETC___d1529;
      default: MUX_csr_regfile$mav_csr_write_2__VAL_2 =
		   csr_regfile$read_csr[31:0] & y__h23916;
    endcase
  end
  assign MUX_f_dexie_cfdata_rv$port0__write_1__VAL_1 =
	     { 1'd1, imem_rg_pc, instr__h4665, x_out_next_pc__h12928 } ;
  assign MUX_f_dexie_cfdata_rv$port0__write_1__VAL_2 =
	     { 1'd1, rg_csr_pc, rg_trap_instr, rg_next_pc } ;
  assign MUX_f_dexie_cfdata_rv$port0__write_1__VAL_4 =
	     { 1'd1,
	       imem_rg_pc,
	       x_out_data_to_stage2_instr__h12961,
	       x_out_next_pc__h12928 } ;
  assign MUX_f_dexie_cfdata_rv$port0__write_1__VAL_5 =
	     { 1'd1,
	       rg_trap_info[67:36],
	       rg_trap_instr,
	       csr_regfile$csr_trap_actions[97:66] } ;
  assign MUX_f_dexie_cfdata_rv$port0__write_1__VAL_6 =
	     { 1'd1,
	       imem_rg_pc,
	       x_out_data_to_stage2_instr__h12961,
	       csr_regfile$csr_ret_actions[65:34] } ;
  assign MUX_f_trace_data$enq_1__VAL_1 =
	     { stage2_rg_stage2[234:160],
	       CASE_stage2_rg_stage2_BITS_338_TO_336_0_stage2_ETC__q20,
	       stage2_rg_stage2[127:0] } ;
  assign MUX_f_trace_data$enq_1__VAL_2 =
	     { 5'd16,
	       rg_trap_trace_data[229:165],
	       rg_trap_instr[11:7],
	       csr_regfile$read_csr[31:0],
	       32'd1,
	       x_word3__h24075,
	       csr_regfile$mav_csr_write } ;
  assign MUX_f_trace_data$enq_1__VAL_3 =
	     { 5'd16,
	       rg_trap_trace_data[229:165],
	       rg_trap_instr[11:7],
	       csr_regfile$read_csr[31:0],
	       x__h24122,
	       x_word3__h24075,
	       x__h24130 } ;
  assign MUX_f_trace_data$enq_1__VAL_6 =
	     { 203'h0EAAAAAAA955555554AAAAAAAAAAAAAAAAA0000000000000344,
	       csr_regfile$csr_mip_read } ;
  assign MUX_f_trace_data$enq_1__VAL_7 =
	     { rg_trap_interrupt ? 5'd17 : 5'd14,
	       csr_regfile$csr_trap_actions[97:66],
	       rg_trap_trace_data[197:165],
	       x_rd__h22032,
	       csr_regfile$csr_trap_actions[65:2],
	       x_word3__h22035,
	       x__h22200 } ;
  assign MUX_f_trace_data$enq_1__VAL_8 =
	     { 5'd15,
	       csr_regfile$csr_ret_actions[65:34],
	       NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d499,
	       x__h19798,
	       td1_rd__h25178,
	       csr_regfile$csr_ret_actions[31:0],
	       128'hAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA } ;
  assign MUX_imem_rg_tval$write_1__VAL_5 = near_mem$imem_pc + 32'd4 ;
  assign MUX_near_mem$imem_req_2__VAL_1 =
	     NOT_soc_map_m_pc_reset_value__084_BITS_1_TO_0__ETC___d1096 ?
	       addr_of_b32___1__h16933 :
	       addr_of_b32__h16821 ;
  assign MUX_near_mem$imem_req_2__VAL_2 =
	     NOT_IF_NOT_stage1_rg_full_97_98_OR_NOT_near_me_ETC___d1402 ?
	       addr_of_b32___1__h21086 :
	       addr_of_b32__h20974 ;
  assign MUX_near_mem$imem_req_2__VAL_5 =
	     NOT_rg_next_pc_500_BITS_1_TO_0_569_EQ_0b0_570__ETC___d1577 ?
	       addr_of_b32___1__h29745 :
	       addr_of_b32__h29633 ;
  assign MUX_rg_state$write_1__VAL_1 = rg_run_on_reset ? 4'd3 : 4'd2 ;
  assign MUX_rg_state$write_1__VAL_2 =
	     csr_regfile$access_permitted_1 ? 4'd8 : 4'd4 ;
  assign MUX_rg_state$write_1__VAL_3 =
	     csr_regfile$access_permitted_2 ? 4'd8 : 4'd4 ;
  assign MUX_rg_trap_info$write_1__VAL_1 =
	     { imem_rg_pc, 4'd2, value__h14715 } ;
  assign MUX_rg_trap_info$write_1__VAL_2 =
	     { stage2_rg_stage2[402:371],
	       near_mem$dmem_exc_code,
	       stage2_rg_stage2[330:299] } ;
  assign MUX_rg_trap_info$write_1__VAL_3 =
	     { imem_rg_pc,
	       IF_near_mem_imem_exc__08_THEN_near_mem_imem_ex_ETC___d1428 } ;
  assign MUX_rg_trap_info$write_1__VAL_4 =
	     { imem_rg_pc, x_exc_code__h29915, 32'd0 } ;
  assign MUX_stage1_rg_full$write_1__VAL_2 =
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_107___d1108 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1192 &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1204 ||
	     IF_csr_regfile_csr_mip_read__106_EQ_rg_prev_mi_ETC___d1411 ;
  assign MUX_stage2_rg_full$write_1__VAL_2 =
	     (csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1275 &&
	      !dexie_stall_set_or_clear) ?
	       _0_OR_NOT_IF_NOT_stage1_rg_full_97_98_OR_NOT_ne_ETC___d1408 :
	       (IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 !=
		2'd2 ||
		dexie_stall_set_or_clear) &&
	       IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 !=
	       2'd0 ;
  assign MUX_stage3_rg_full$write_1__VAL_2 =
	     IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 ==
	     2'd2 &&
	     !dexie_stall_set_or_clear ;

  // inlined wires
  assign f_dexie_cfdata_rv$EN_port0__write =
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1275 &&
	     !dexie_stall_set_or_clear ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_stage1_xRET ;
  always@(MUX_f_dexie_cfdata_rv$port0__write_1__SEL_1 or
	  MUX_f_dexie_cfdata_rv$port0__write_1__VAL_1 or
	  MUX_csr_regfile$mav_csr_write_1__SEL_1 or
	  MUX_f_dexie_cfdata_rv$port0__write_1__VAL_2 or
	  MUX_f_dexie_cfdata_rv$port0__write_1__SEL_3 or
	  MUX_f_dexie_cfdata_rv$port0__write_1__SEL_4 or
	  MUX_f_dexie_cfdata_rv$port0__write_1__VAL_4 or
	  WILL_FIRE_RL_rl_trap or
	  MUX_f_dexie_cfdata_rv$port0__write_1__VAL_5 or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  MUX_f_dexie_cfdata_rv$port0__write_1__VAL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_f_dexie_cfdata_rv$port0__write_1__SEL_1:
	  f_dexie_cfdata_rv$port0__write_1 =
	      MUX_f_dexie_cfdata_rv$port0__write_1__VAL_1;
      MUX_csr_regfile$mav_csr_write_1__SEL_1:
	  f_dexie_cfdata_rv$port0__write_1 =
	      MUX_f_dexie_cfdata_rv$port0__write_1__VAL_2;
      MUX_f_dexie_cfdata_rv$port0__write_1__SEL_3:
	  f_dexie_cfdata_rv$port0__write_1 =
	      MUX_f_dexie_cfdata_rv$port0__write_1__VAL_2;
      MUX_f_dexie_cfdata_rv$port0__write_1__SEL_4:
	  f_dexie_cfdata_rv$port0__write_1 =
	      MUX_f_dexie_cfdata_rv$port0__write_1__VAL_4;
      WILL_FIRE_RL_rl_trap:
	  f_dexie_cfdata_rv$port0__write_1 =
	      MUX_f_dexie_cfdata_rv$port0__write_1__VAL_5;
      WILL_FIRE_RL_rl_stage1_xRET:
	  f_dexie_cfdata_rv$port0__write_1 =
	      MUX_f_dexie_cfdata_rv$port0__write_1__VAL_6;
      default: f_dexie_cfdata_rv$port0__write_1 =
		   97'h0AAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_dexie_cfdata_rv$port1__read =
	     f_dexie_cfdata_rv$EN_port0__write ?
	       f_dexie_cfdata_rv$port0__write_1 :
	       f_dexie_cfdata_rv ;
  assign f_dexie_cfdata_rv$port2__read =
	     EN_dexie_cfdata_out_get ?
	       97'h0AAAAAAAAAAAAAAAAAAAAAAAA :
	       f_dexie_cfdata_rv$port1__read ;
  assign f_dexie_dfmemdata_rv$EN_port0__write =
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1275 &&
	     !dexie_stall_set_or_clear &&
	     (IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 ==
	      3'd1 ||
	      IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 ==
	      3'd2) ;
  assign f_dexie_dfmemdata_rv$port0__write_1 =
	     { 1'd1,
	       imem_rg_pc,
	       IF_IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_ETC___d1292 } ;
  assign f_dexie_dfmemdata_rv$port1__read =
	     f_dexie_dfmemdata_rv$EN_port0__write ?
	       f_dexie_dfmemdata_rv$port0__write_1 :
	       f_dexie_dfmemdata_rv ;
  assign f_dexie_dfmemdata_rv$port2__read =
	     EN_dexie_dfmemdata_out_get ?
	       102'h0AAAAAAAAAAAAAAAAAAAAAAAAA :
	       f_dexie_dfmemdata_rv$port1__read ;
  assign f_dexie_dfregdata_rv$EN_port0__write =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 ==
	     2'd2 &&
	     !dexie_stall_set_or_clear &&
	     (stage2_rg_stage2[338:336] == 3'd0 ||
	      IF_stage2_rg_stage2_0_BITS_338_TO_336_1_EQ_1_3_ETC___d143) ;
  assign f_dexie_dfregdata_rv$port0__write_1 =
	     { 1'd1,
	       stage2_rg_stage2[402:371],
	       x_out_data_to_stage3_rd__h6981,
	       x_out_data_to_stage3_rd_val__h6982 } ;
  assign f_dexie_dfregdata_rv$port1__read =
	     f_dexie_dfregdata_rv$EN_port0__write ?
	       f_dexie_dfregdata_rv$port0__write_1 :
	       f_dexie_dfregdata_rv ;
  assign f_dexie_dfregdata_rv$port2__read =
	     EN_dexie_dfregdata_out_get ?
	       70'h0AAAAAAAAAAAAAAAAA :
	       f_dexie_dfregdata_rv$port1__read ;

  // register cfg_logdelay
  assign cfg_logdelay$D_IN = set_verbosity_logdelay ;
  assign cfg_logdelay$EN = EN_set_verbosity ;

  // register cfg_verbosity
  assign cfg_verbosity$D_IN = set_verbosity_verbosity ;
  assign cfg_verbosity$EN = EN_set_verbosity ;

  // register f_dexie_cfdata_rv
  assign f_dexie_cfdata_rv$D_IN = f_dexie_cfdata_rv$port2__read ;
  assign f_dexie_cfdata_rv$EN = 1'b1 ;

  // register f_dexie_dfmemdata_rv
  assign f_dexie_dfmemdata_rv$D_IN = f_dexie_dfmemdata_rv$port2__read ;
  assign f_dexie_dfmemdata_rv$EN = 1'b1 ;

  // register f_dexie_dfregdata_rv
  assign f_dexie_dfregdata_rv$D_IN = f_dexie_dfregdata_rv$port2__read ;
  assign f_dexie_dfregdata_rv$EN = 1'b1 ;

  // register imem_rg_cache_addr
  assign imem_rg_cache_addr$D_IN = near_mem$imem_pc ;
  assign imem_rg_cache_addr$EN =
	     MUX_rg_state$write_1__SEL_6 && near_mem$imem_valid ||
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	     near_mem$imem_valid ||
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1393 ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ;

  // register imem_rg_cache_b16
  assign imem_rg_cache_b16$D_IN = near_mem$imem_instr[31:16] ;
  assign imem_rg_cache_b16$EN =
	     MUX_rg_state$write_1__SEL_6 && near_mem$imem_valid ||
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	     near_mem$imem_valid ||
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1393 ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ;

  // register imem_rg_f3
  assign imem_rg_f3$D_IN = 3'b010 ;
  assign imem_rg_f3$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_107___d1108 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1192 &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1204 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_rg_mstatus_MXR
  assign imem_rg_mstatus_MXR$D_IN =
	     (MUX_imem_rg_f3$write_1__SEL_1 ||
	      MUX_imem_rg_f3$write_1__SEL_2 ||
	      MUX_imem_rg_mstatus_MXR$write_1__SEL_4) ?
	       csr_regfile$read_mstatus[19] :
	       rg_mstatus_MXR ;
  assign imem_rg_mstatus_MXR$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_107___d1108 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1192 &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1204 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_rg_pc
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  soc_map$m_pc_reset_value or
	  MUX_imem_rg_f3$write_1__SEL_2 or
	  x_out_next_pc__h12928 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_imem_rg_pc$write_1__SEL_4 or rg_next_pc)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1:
	  imem_rg_pc$D_IN = soc_map$m_pc_reset_value[31:0];
      MUX_imem_rg_f3$write_1__SEL_2: imem_rg_pc$D_IN = x_out_next_pc__h12928;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  imem_rg_pc$D_IN = x_out_next_pc__h12928;
      MUX_imem_rg_pc$write_1__SEL_4: imem_rg_pc$D_IN = rg_next_pc;
      default: imem_rg_pc$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_rg_pc$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_107___d1108 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1192 &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1204 ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;

  // register imem_rg_priv
  assign imem_rg_priv$D_IN = rg_cur_priv ;
  assign imem_rg_priv$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_107___d1108 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1192 &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1204 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_rg_satp
  assign imem_rg_satp$D_IN = csr_regfile$read_satp ;
  assign imem_rg_satp$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_107___d1108 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1192 &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1204 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_rg_sstatus_SUM
  assign imem_rg_sstatus_SUM$D_IN =
	     WILL_FIRE_RL_rl_trap_fetch && rg_sstatus_SUM ;
  assign imem_rg_sstatus_SUM$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_107___d1108 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1192 &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1204 ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register imem_rg_tval
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  soc_map$m_pc_reset_value or
	  MUX_imem_rg_f3$write_1__SEL_2 or
	  x_out_next_pc__h12928 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_imem_rg_pc$write_1__SEL_4 or
	  rg_next_pc or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or
	  MUX_imem_rg_tval$write_1__VAL_5)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1:
	  imem_rg_tval$D_IN = soc_map$m_pc_reset_value[31:0];
      MUX_imem_rg_f3$write_1__SEL_2:
	  imem_rg_tval$D_IN = x_out_next_pc__h12928;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  imem_rg_tval$D_IN = x_out_next_pc__h12928;
      MUX_imem_rg_pc$write_1__SEL_4: imem_rg_tval$D_IN = rg_next_pc;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  imem_rg_tval$D_IN = MUX_imem_rg_tval$write_1__VAL_5;
      default: imem_rg_tval$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign imem_rg_tval$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_107___d1108 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1192 &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1204 ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ;

  // register rg_csr_pc
  assign rg_csr_pc$D_IN = imem_rg_pc ;
  assign rg_csr_pc$EN = MUX_rg_trap_info$write_1__SEL_1 ;

  // register rg_csr_val1
  assign rg_csr_val1$D_IN = x_out_data_to_stage2_val1__h12965 ;
  assign rg_csr_val1$EN = MUX_rg_trap_info$write_1__SEL_1 ;

  // register rg_cur_priv
  always@(WILL_FIRE_RL_rl_trap or
	  csr_regfile$csr_trap_actions or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or WILL_FIRE_RL_rl_reset_start)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_trap:
	  rg_cur_priv$D_IN = csr_regfile$csr_trap_actions[1:0];
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_cur_priv$D_IN = csr_regfile$csr_ret_actions[33:32];
      WILL_FIRE_RL_rl_reset_start: rg_cur_priv$D_IN = 2'b11;
      default: rg_cur_priv$D_IN = 2'b10 /* unspecified value */ ;
    endcase
  end
  assign rg_cur_priv$EN =
	     WILL_FIRE_RL_rl_trap || WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_reset_start ;

  // register rg_mstatus_MXR
  assign rg_mstatus_MXR$D_IN = csr_regfile$read_mstatus[19] ;
  assign rg_mstatus_MXR$EN = MUX_rg_state$write_1__SEL_8 ;

  // register rg_next_pc
  always@(MUX_rg_next_pc$write_1__SEL_1 or
	  x_out_next_pc__h12928 or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  csr_regfile$csr_ret_actions or
	  WILL_FIRE_RL_rl_trap or csr_regfile$csr_trap_actions)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_next_pc$write_1__SEL_1: rg_next_pc$D_IN = x_out_next_pc__h12928;
      WILL_FIRE_RL_rl_stage1_xRET:
	  rg_next_pc$D_IN = csr_regfile$csr_ret_actions[65:34];
      WILL_FIRE_RL_rl_trap:
	  rg_next_pc$D_IN = csr_regfile$csr_trap_actions[97:66];
      default: rg_next_pc$D_IN = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_next_pc$EN =
	     WILL_FIRE_RL_rl_stage1_WFI || WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_trap ;

  // register rg_prev_mip
  assign rg_prev_mip$D_IN =
	     WILL_FIRE_RL_rl_stage1_mip_cmd ?
	       csr_regfile$csr_mip_read :
	       32'd0 ;
  assign rg_prev_mip$EN =
	     WILL_FIRE_RL_rl_stage1_mip_cmd || WILL_FIRE_RL_rl_reset_start ;

  // register rg_run_on_reset
  assign rg_run_on_reset$D_IN = f_reset_reqs$D_OUT ;
  assign rg_run_on_reset$EN = CAN_FIRE_RL_rl_reset_start ;

  // register rg_sstatus_SUM
  assign rg_sstatus_SUM$D_IN = 1'd0 ;
  assign rg_sstatus_SUM$EN = MUX_rg_state$write_1__SEL_8 ;

  // register rg_start_CPI_cycles
  assign rg_start_CPI_cycles$D_IN = csr_regfile$read_csr_mcycle ;
  assign rg_start_CPI_cycles$EN = MUX_imem_rg_f3$write_1__SEL_1 ;

  // register rg_start_CPI_instrs
  assign rg_start_CPI_instrs$D_IN = csr_regfile$read_csr_minstret ;
  assign rg_start_CPI_instrs$EN = MUX_imem_rg_f3$write_1__SEL_1 ;

  // register rg_state
  always@(WILL_FIRE_RL_rl_reset_complete or
	  MUX_rg_state$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_stage1_CSRR_W_2 or
	  MUX_rg_state$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 or
	  MUX_rg_state$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_reset_from_WFI or
	  WILL_FIRE_RL_rl_reset_start or
	  MUX_rg_state$write_1__SEL_6 or
	  MUX_rg_state$write_1__SEL_7 or
	  MUX_rg_state$write_1__SEL_8 or
	  WILL_FIRE_RL_rl_stage1_CSRR_W or
	  WILL_FIRE_RL_rl_stage1_CSRR_S_or_C or
	  WILL_FIRE_RL_rl_stage1_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_FENCE or
	  WILL_FIRE_RL_rl_stage1_SFENCE_VMA or WILL_FIRE_RL_rl_stage1_WFI)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_reset_complete:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_1;
      WILL_FIRE_RL_rl_stage1_CSRR_W_2:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_2;
      WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2:
	  rg_state$D_IN = MUX_rg_state$write_1__VAL_3;
      WILL_FIRE_RL_rl_reset_from_WFI: rg_state$D_IN = 4'd0;
      WILL_FIRE_RL_rl_reset_start: rg_state$D_IN = 4'd1;
      MUX_rg_state$write_1__SEL_6: rg_state$D_IN = 4'd3;
      MUX_rg_state$write_1__SEL_7: rg_state$D_IN = 4'd4;
      MUX_rg_state$write_1__SEL_8: rg_state$D_IN = 4'd5;
      WILL_FIRE_RL_rl_stage1_CSRR_W: rg_state$D_IN = 4'd6;
      WILL_FIRE_RL_rl_stage1_CSRR_S_or_C: rg_state$D_IN = 4'd7;
      WILL_FIRE_RL_rl_stage1_FENCE_I: rg_state$D_IN = 4'd9;
      WILL_FIRE_RL_rl_stage1_FENCE: rg_state$D_IN = 4'd10;
      WILL_FIRE_RL_rl_stage1_SFENCE_VMA: rg_state$D_IN = 4'd11;
      WILL_FIRE_RL_rl_stage1_WFI: rg_state$D_IN = 4'd12;
      default: rg_state$D_IN = 4'b1010 /* unspecified value */ ;
    endcase
  end
  assign rg_state$EN =
	     WILL_FIRE_RL_rl_reset_complete ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 ||
	     WILL_FIRE_RL_rl_reset_from_WFI ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_stage1_WFI ;

  // register rg_trap_info
  always@(MUX_rg_trap_info$write_1__SEL_1 or
	  MUX_rg_trap_info$write_1__VAL_1 or
	  WILL_FIRE_RL_rl_stage2_nonpipe or
	  MUX_rg_trap_info$write_1__VAL_2 or
	  WILL_FIRE_RL_rl_stage1_trap or
	  MUX_rg_trap_info$write_1__VAL_3 or
	  WILL_FIRE_RL_rl_stage1_interrupt or MUX_rg_trap_info$write_1__VAL_4)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_rg_trap_info$write_1__SEL_1:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_1;
      WILL_FIRE_RL_rl_stage2_nonpipe:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_2;
      WILL_FIRE_RL_rl_stage1_trap:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_3;
      WILL_FIRE_RL_rl_stage1_interrupt:
	  rg_trap_info$D_IN = MUX_rg_trap_info$write_1__VAL_4;
      default: rg_trap_info$D_IN =
		   68'hAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign rg_trap_info$EN =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register rg_trap_instr
  assign rg_trap_instr$D_IN =
	     MUX_rg_trap_instr$write_1__SEL_1 ?
	       x_out_data_to_stage2_instr__h12961 :
	       stage2_rg_stage2[370:339] ;
  assign rg_trap_instr$EN =
	     WILL_FIRE_RL_rl_stage1_interrupt ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ;

  // register rg_trap_interrupt
  assign rg_trap_interrupt$D_IN = !MUX_rg_trap_interrupt$write_1__SEL_1 ;
  assign rg_trap_interrupt$EN =
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W ||
	     WILL_FIRE_RL_rl_stage1_trap ||
	     WILL_FIRE_RL_rl_stage2_nonpipe ||
	     WILL_FIRE_RL_rl_stage1_interrupt ;

  // register rg_trap_trace_data
  assign rg_trap_trace_data$D_IN =
	     MUX_rg_trap_trace_data$write_1__SEL_1 ?
	       IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d1352 :
	       MUX_f_trace_data$enq_1__VAL_1 ;
  assign rg_trap_trace_data$EN = MUX_rg_trap_interrupt$write_1__SEL_1 ;

  // register stage1_rg_full
  always@(WILL_FIRE_RL_stage1_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage1_rg_full$write_1__VAL_2 or
	  MUX_imem_rg_f3$write_1__SEL_1 or
	  WILL_FIRE_RL_rl_trap_fetch or
	  WILL_FIRE_RL_rl_WFI_resume or
	  WILL_FIRE_RL_rl_stage1_WFI or
	  WILL_FIRE_RL_rl_finish_SFENCE_VMA or
	  WILL_FIRE_RL_rl_finish_FENCE or
	  WILL_FIRE_RL_rl_finish_FENCE_I or
	  WILL_FIRE_RL_rl_stage1_xRET or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or WILL_FIRE_RL_rl_trap)
  case (1'b1)
    WILL_FIRE_RL_stage1_rl_reset: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage1_rg_full$D_IN = MUX_stage1_rg_full$write_1__VAL_2;
    MUX_imem_rg_f3$write_1__SEL_1 || WILL_FIRE_RL_rl_trap_fetch ||
    WILL_FIRE_RL_rl_WFI_resume:
	stage1_rg_full$D_IN = 1'd1;
    WILL_FIRE_RL_rl_stage1_WFI: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_finish_SFENCE_VMA || WILL_FIRE_RL_rl_finish_FENCE ||
    WILL_FIRE_RL_rl_finish_FENCE_I:
	stage1_rg_full$D_IN = 1'd1;
    WILL_FIRE_RL_rl_stage1_xRET: stage1_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_stage1_restart_after_csrrx: stage1_rg_full$D_IN = 1'd1;
    WILL_FIRE_RL_rl_trap: stage1_rg_full$D_IN = 1'd0;
    default: stage1_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage1_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_stage1_rl_reset ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ;

  // register stage2_rg_full
  always@(stage2_f_reset_reqs$EMPTY_N or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage2_rg_full$write_1__VAL_2 or
	  MUX_imem_rg_f3$write_1__SEL_1 or WILL_FIRE_RL_rl_trap)
  case (1'b1)
    stage2_f_reset_reqs$EMPTY_N: stage2_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage2_rg_full$D_IN = MUX_stage2_rg_full$write_1__VAL_2;
    MUX_imem_rg_f3$write_1__SEL_1 || WILL_FIRE_RL_rl_trap:
	stage2_rg_full$D_IN = 1'd0;
    default: stage2_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage2_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_rl_trap ||
	     stage2_f_reset_reqs$EMPTY_N ;

  // register stage2_rg_resetting
  assign stage2_rg_resetting$D_IN = stage2_f_reset_reqs$EMPTY_N ;
  assign stage2_rg_resetting$EN =
	     WILL_FIRE_RL_stage2_rl_reset_end || stage2_f_reset_reqs$EMPTY_N ;

  // register stage2_rg_stage2
  assign stage2_rg_stage2$D_IN =
	     { rg_cur_priv,
	       imem_rg_pc,
	       x_out_data_to_stage2_instr__h12961,
	       IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842,
	       x_out_data_to_stage2_rd__h12963,
	       x_out_data_to_stage2_addr__h12964,
	       x_out_data_to_stage2_val1__h12965,
	       x_out_data_to_stage2_val2__h12966,
	       IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d1352 } ;
  assign stage2_rg_stage2$EN =
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1294 ;

  // register stage3_rg_full
  always@(WILL_FIRE_RL_stage3_rl_reset or
	  WILL_FIRE_RL_rl_pipe or
	  MUX_stage3_rg_full$write_1__VAL_2 or MUX_imem_rg_f3$write_1__SEL_1)
  case (1'b1)
    WILL_FIRE_RL_stage3_rl_reset: stage3_rg_full$D_IN = 1'd0;
    WILL_FIRE_RL_rl_pipe:
	stage3_rg_full$D_IN = MUX_stage3_rg_full$write_1__VAL_2;
    MUX_imem_rg_f3$write_1__SEL_1: stage3_rg_full$D_IN = 1'd0;
    default: stage3_rg_full$D_IN = 1'b0 /* unspecified value */ ;
  endcase
  assign stage3_rg_full$EN =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe ||
	     WILL_FIRE_RL_stage3_rl_reset ;

  // register stage3_rg_stage3
  assign stage3_rg_stage3$D_IN =
	     { stage2_rg_stage2[402:339],
	       stage2_rg_stage2[404:403],
	       stage2_rg_stage2[338:336] == 3'd0 ||
	       IF_stage2_rg_stage2_0_BITS_338_TO_336_1_EQ_1_3_ETC___d143,
	       x_out_data_to_stage3_rd__h6981,
	       x_out_data_to_stage3_rd_val__h6982 } ;
  assign stage3_rg_stage3$EN = MUX_f_trace_data$enq_1__SEL_1 ;

  // submodule csr_regfile
  assign csr_regfile$access_permitted_1_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$access_permitted_1_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_1_read_not_write = 1'd0 ;
  assign csr_regfile$access_permitted_2_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$access_permitted_2_priv = rg_cur_priv ;
  assign csr_regfile$access_permitted_2_read_not_write =
	     rs1_val__h23645 == 32'd0 ;
  assign csr_regfile$csr_counter_read_fault_csr_addr = 12'h0 ;
  assign csr_regfile$csr_counter_read_fault_priv = 2'h0 ;
  always@(IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763)
  begin
    case (IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763)
      4'd7: csr_regfile$csr_ret_actions_from_priv = 2'b11;
      4'd8: csr_regfile$csr_ret_actions_from_priv = 2'b01;
      default: csr_regfile$csr_ret_actions_from_priv = 2'b0;
    endcase
  end
  assign csr_regfile$csr_trap_actions_exc_code = rg_trap_info[35:32] ;
  assign csr_regfile$csr_trap_actions_from_priv = rg_cur_priv ;
  assign csr_regfile$csr_trap_actions_interrupt =
	     rg_trap_interrupt && !csr_regfile$nmi_pending ;
  assign csr_regfile$csr_trap_actions_nmi =
	     rg_trap_interrupt && csr_regfile$nmi_pending ;
  assign csr_regfile$csr_trap_actions_pc = rg_trap_info[67:36] ;
  assign csr_regfile$csr_trap_actions_xtval = rg_trap_info[31:0] ;
  assign csr_regfile$interrupt_pending_cur_priv = rg_cur_priv ;
  assign csr_regfile$m_external_interrupt_req_set_not_clear =
	     m_external_interrupt_req_set_not_clear ;
  assign csr_regfile$mav_csr_write_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$mav_csr_write_word =
	     MUX_csr_regfile$mav_csr_write_1__SEL_1 ?
	       rs1_val__h22776 :
	       MUX_csr_regfile$mav_csr_write_2__VAL_2 ;
  assign csr_regfile$mav_read_csr_csr_addr = 12'h0 ;
  assign csr_regfile$nmi_req_set_not_clear = nmi_req_set_not_clear ;
  assign csr_regfile$read_csr_csr_addr = rg_trap_instr[31:20] ;
  assign csr_regfile$read_csr_port2_csr_addr = 12'h0 ;
  assign csr_regfile$s_external_interrupt_req_set_not_clear =
	     s_external_interrupt_req_set_not_clear ;
  assign csr_regfile$software_interrupt_req_set_not_clear =
	     software_interrupt_req_set_not_clear ;
  assign csr_regfile$timer_interrupt_req_set_not_clear =
	     timer_interrupt_req_set_not_clear ;
  assign csr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign csr_regfile$EN_server_reset_response_get =
	     MUX_rg_state$write_1__SEL_1 ;
  assign csr_regfile$EN_mav_read_csr = 1'b0 ;
  assign csr_regfile$EN_mav_csr_write =
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 &&
	     rg_trap_instr[19:15] != 5'd0 ;
  assign csr_regfile$EN_csr_trap_actions = CAN_FIRE_RL_rl_trap ;
  assign csr_regfile$EN_csr_ret_actions = CAN_FIRE_RL_rl_stage1_xRET ;
  assign csr_regfile$EN_csr_minstret_incr =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 ==
	     2'd2 &&
	     !dexie_stall_set_or_clear ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_xRET ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ;
  assign csr_regfile$EN_debug = 1'b0 ;

  // submodule f_reset_reqs
  assign f_reset_reqs$D_IN = hart0_server_reset_request_put ;
  assign f_reset_reqs$ENQ = EN_hart0_server_reset_request_put ;
  assign f_reset_reqs$DEQ =
	     gpr_regfile$RDY_server_reset_request_put &&
	     near_mem_RDY_server_reset_request_put__043_AND_ETC___d1055 &&
	     rg_state == 4'd0 ;
  assign f_reset_reqs$CLR = 1'b0 ;

  // submodule f_reset_rsps
  assign f_reset_rsps$D_IN = rg_run_on_reset ;
  assign f_reset_rsps$ENQ = MUX_rg_state$write_1__SEL_1 ;
  assign f_reset_rsps$DEQ = EN_hart0_server_reset_response_get ;
  assign f_reset_rsps$CLR = 1'b0 ;

  // submodule f_trace_data
  always@(MUX_f_trace_data$enq_1__SEL_1 or
	  MUX_f_trace_data$enq_1__VAL_1 or
	  MUX_csr_regfile$mav_csr_write_1__SEL_1 or
	  MUX_f_trace_data$enq_1__VAL_2 or
	  MUX_f_dexie_cfdata_rv$port0__write_1__SEL_3 or
	  MUX_f_trace_data$enq_1__VAL_3 or
	  MUX_f_dexie_cfdata_rv$port0__write_1__SEL_4 or
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d1352 or
	  WILL_FIRE_RL_rl_reset_start or
	  WILL_FIRE_RL_rl_stage1_mip_cmd or
	  MUX_f_trace_data$enq_1__VAL_6 or
	  WILL_FIRE_RL_rl_trap or
	  MUX_f_trace_data$enq_1__VAL_7 or
	  WILL_FIRE_RL_rl_stage1_xRET or MUX_f_trace_data$enq_1__VAL_8)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_f_trace_data$enq_1__SEL_1:
	  f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_1;
      MUX_csr_regfile$mav_csr_write_1__SEL_1:
	  f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_2;
      MUX_f_dexie_cfdata_rv$port0__write_1__SEL_3:
	  f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_3;
      MUX_f_dexie_cfdata_rv$port0__write_1__SEL_4:
	  f_trace_data$D_IN =
	      IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d1352;
      WILL_FIRE_RL_rl_reset_start:
	  f_trace_data$D_IN =
	      235'h02AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
      WILL_FIRE_RL_rl_stage1_mip_cmd:
	  f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_6;
      WILL_FIRE_RL_rl_trap: f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_7;
      WILL_FIRE_RL_rl_stage1_xRET:
	  f_trace_data$D_IN = MUX_f_trace_data$enq_1__VAL_8;
      default: f_trace_data$D_IN =
		   235'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign f_trace_data$ENQ =
	     WILL_FIRE_RL_rl_pipe &&
	     IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 ==
	     2'd2 &&
	     !dexie_stall_set_or_clear ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ||
	     WILL_FIRE_RL_rl_stage1_WFI ||
	     WILL_FIRE_RL_rl_stage1_FENCE ||
	     WILL_FIRE_RL_rl_stage1_FENCE_I ||
	     WILL_FIRE_RL_rl_stage1_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_reset_start ||
	     WILL_FIRE_RL_rl_stage1_mip_cmd ||
	     WILL_FIRE_RL_rl_trap ||
	     WILL_FIRE_RL_rl_stage1_xRET ;
  assign f_trace_data$DEQ = EN_trace_data_out_get ;
  assign f_trace_data$CLR = 1'b0 ;

  // submodule gpr_regfile
  assign gpr_regfile$read_rs1_port2_rs1 = 5'h0 ;
  assign gpr_regfile$read_rs1_rs1 = _theResult____h4667[19:15] ;
  assign gpr_regfile$read_rs2_rs2 = _theResult____h4667[24:20] ;
  assign gpr_regfile$write_rd_rd =
	     (MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
	      MUX_f_dexie_cfdata_rv$port0__write_1__SEL_3) ?
	       rg_trap_instr[11:7] :
	       stage3_rg_stage3[36:32] ;
  assign gpr_regfile$write_rd_rd_val =
	     (MUX_csr_regfile$mav_csr_write_1__SEL_1 ||
	      MUX_f_dexie_cfdata_rv$port0__write_1__SEL_3) ?
	       csr_regfile$read_csr[31:0] :
	       stage3_rg_stage3[31:0] ;
  assign gpr_regfile$EN_server_reset_request_put =
	     CAN_FIRE_RL_rl_reset_start ;
  assign gpr_regfile$EN_server_reset_response_get =
	     MUX_rg_state$write_1__SEL_1 ;
  assign gpr_regfile$EN_write_rd =
	     WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[37] ||
	     WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	     csr_regfile$access_permitted_1 ||
	     WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	     csr_regfile$access_permitted_2 ;

  // submodule near_mem
  assign near_mem$dmem_master_arready = dmem_master_arready ;
  assign near_mem$dmem_master_awready = dmem_master_awready ;
  assign near_mem$dmem_master_bid = dmem_master_bid ;
  assign near_mem$dmem_master_bresp = dmem_master_bresp ;
  assign near_mem$dmem_master_bvalid = dmem_master_bvalid ;
  assign near_mem$dmem_master_rdata = dmem_master_rdata ;
  assign near_mem$dmem_master_rid = dmem_master_rid ;
  assign near_mem$dmem_master_rlast = dmem_master_rlast ;
  assign near_mem$dmem_master_rresp = dmem_master_rresp ;
  assign near_mem$dmem_master_rvalid = dmem_master_rvalid ;
  assign near_mem$dmem_master_wready = dmem_master_wready ;
  assign near_mem$dmem_req_addr = x_out_data_to_stage2_addr__h12964 ;
  assign near_mem$dmem_req_amo_funct7 =
	     x_out_data_to_stage2_val1__h12965[6:0] ;
  assign near_mem$dmem_req_f3 = x_out_data_to_stage2_instr__h12961[14:12] ;
  assign near_mem$dmem_req_mstatus_MXR = csr_regfile$read_mstatus[19] ;
  always@(IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842)
  begin
    case (IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842)
      3'd1: near_mem$dmem_req_op = 2'd0;
      3'd2: near_mem$dmem_req_op = 2'd1;
      default: near_mem$dmem_req_op = 2'd2;
    endcase
  end
  assign near_mem$dmem_req_priv =
	     csr_regfile$read_mstatus[17] ?
	       csr_regfile$read_mstatus[12:11] :
	       rg_cur_priv ;
  assign near_mem$dmem_req_satp = csr_regfile$read_satp ;
  assign near_mem$dmem_req_sstatus_SUM = 1'd0 ;
  assign near_mem$dmem_req_store_value =
	     { 32'd0, x_out_data_to_stage2_val2__h12966 } ;
  assign near_mem$imem_master_arready = imem_master_arready ;
  assign near_mem$imem_master_awready = imem_master_awready ;
  assign near_mem$imem_master_bid = imem_master_bid ;
  assign near_mem$imem_master_bresp = imem_master_bresp ;
  assign near_mem$imem_master_bvalid = imem_master_bvalid ;
  assign near_mem$imem_master_rdata = imem_master_rdata ;
  assign near_mem$imem_master_rid = imem_master_rid ;
  assign near_mem$imem_master_rlast = imem_master_rlast ;
  assign near_mem$imem_master_rresp = imem_master_rresp ;
  assign near_mem$imem_master_rvalid = imem_master_rvalid ;
  assign near_mem$imem_master_wready = imem_master_wready ;
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  MUX_near_mem$imem_req_2__VAL_1 or
	  MUX_imem_rg_f3$write_1__SEL_2 or
	  MUX_near_mem$imem_req_2__VAL_2 or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or
	  MUX_imem_rg_tval$write_1__VAL_5 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  WILL_FIRE_RL_rl_trap_fetch or
	  MUX_near_mem$imem_req_2__VAL_5 or MUX_near_mem$imem_req_1__SEL_6)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_1;
      MUX_imem_rg_f3$write_1__SEL_2:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_2;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_addr = MUX_imem_rg_tval$write_1__VAL_5;
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_2;
      WILL_FIRE_RL_rl_trap_fetch:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_5;
      MUX_near_mem$imem_req_1__SEL_6:
	  near_mem$imem_req_addr = MUX_near_mem$imem_req_2__VAL_5;
      default: near_mem$imem_req_addr = 32'hAAAAAAAA /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_f3 =
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ? imem_rg_f3 : 3'b010 ;
  always@(MUX_imem_rg_f3$write_1__SEL_1 or
	  MUX_imem_rg_f3$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_near_mem$imem_req_1__SEL_6 or
	  csr_regfile$read_mstatus or
	  WILL_FIRE_RL_rl_trap_fetch or
	  rg_mstatus_MXR or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or imem_rg_mstatus_MXR)
  begin
    case (1'b1) // synopsys parallel_case
      MUX_imem_rg_f3$write_1__SEL_1 || MUX_imem_rg_f3$write_1__SEL_2 ||
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
      MUX_near_mem$imem_req_1__SEL_6:
	  near_mem$imem_req_mstatus_MXR = csr_regfile$read_mstatus[19];
      WILL_FIRE_RL_rl_trap_fetch:
	  near_mem$imem_req_mstatus_MXR = rg_mstatus_MXR;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_mstatus_MXR = imem_rg_mstatus_MXR;
      default: near_mem$imem_req_mstatus_MXR = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign near_mem$imem_req_priv =
	     (MUX_imem_rg_f3$write_1__SEL_1 ||
	      MUX_imem_rg_f3$write_1__SEL_2 ||
	      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	      WILL_FIRE_RL_rl_trap_fetch ||
	      MUX_near_mem$imem_req_1__SEL_6) ?
	       rg_cur_priv :
	       imem_rg_priv ;
  assign near_mem$imem_req_satp =
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ?
	       imem_rg_satp :
	       csr_regfile$read_satp ;
  always@(WILL_FIRE_RL_rl_trap_fetch or
	  rg_sstatus_SUM or
	  WILL_FIRE_RL_imem_rl_fetch_next_32b or
	  imem_rg_sstatus_SUM or
	  MUX_imem_rg_f3$write_1__SEL_1 or
	  MUX_imem_rg_f3$write_1__SEL_2 or
	  WILL_FIRE_RL_rl_stage1_restart_after_csrrx or
	  MUX_near_mem$imem_req_1__SEL_6)
  begin
    case (1'b1) // synopsys parallel_case
      WILL_FIRE_RL_rl_trap_fetch:
	  near_mem$imem_req_sstatus_SUM = rg_sstatus_SUM;
      WILL_FIRE_RL_imem_rl_fetch_next_32b:
	  near_mem$imem_req_sstatus_SUM = imem_rg_sstatus_SUM;
      MUX_imem_rg_f3$write_1__SEL_1 || MUX_imem_rg_f3$write_1__SEL_2 ||
      WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
      MUX_near_mem$imem_req_1__SEL_6:
	  near_mem$imem_req_sstatus_SUM = 1'd0;
      default: near_mem$imem_req_sstatus_SUM = 1'b0 /* unspecified value */ ;
    endcase
  end
  assign near_mem$server_fence_request_put =
	     8'b10101010 /* unspecified value */  ;
  assign near_mem$EN_server_reset_request_put = CAN_FIRE_RL_rl_reset_start ;
  assign near_mem$EN_server_reset_response_get = MUX_rg_state$write_1__SEL_1 ;
  assign near_mem$EN_imem_req =
	     WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset ||
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_107___d1108 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1192 &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1204 ||
	     WILL_FIRE_RL_imem_rl_fetch_next_32b ||
	     WILL_FIRE_RL_rl_stage1_restart_after_csrrx ||
	     WILL_FIRE_RL_rl_trap_fetch ||
	     WILL_FIRE_RL_rl_WFI_resume ||
	     WILL_FIRE_RL_rl_finish_SFENCE_VMA ||
	     WILL_FIRE_RL_rl_finish_FENCE ||
	     WILL_FIRE_RL_rl_finish_FENCE_I ;
  assign near_mem$EN_dmem_req =
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1360 ;
  assign near_mem$EN_server_fence_i_request_put =
	     MUX_rg_state$write_1__SEL_11 ;
  assign near_mem$EN_server_fence_i_response_get =
	     CAN_FIRE_RL_rl_finish_FENCE_I ;
  assign near_mem$EN_server_fence_request_put = MUX_rg_state$write_1__SEL_12 ;
  assign near_mem$EN_server_fence_response_get = CAN_FIRE_RL_rl_finish_FENCE ;
  assign near_mem$EN_sfence_vma = MUX_rg_state$write_1__SEL_13 ;

  // submodule soc_map
  assign soc_map$m_is_IO_addr_addr = 64'h0 ;
  assign soc_map$m_is_mem_addr_addr = 64'h0 ;
  assign soc_map$m_is_near_mem_IO_addr_addr = 64'h0 ;

  // submodule stage1_f_reset_reqs
  assign stage1_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage1_f_reset_reqs$DEQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage1_f_reset_rsps
  assign stage1_f_reset_rsps$ENQ = CAN_FIRE_RL_stage1_rl_reset ;
  assign stage1_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_1 ;
  assign stage1_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_f_reset_reqs
  assign stage2_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage2_f_reset_reqs$DEQ = stage2_f_reset_reqs$EMPTY_N ;
  assign stage2_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage2_f_reset_rsps
  assign stage2_f_reset_rsps$ENQ = CAN_FIRE_RL_stage2_rl_reset_end ;
  assign stage2_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_1 ;
  assign stage2_f_reset_rsps$CLR = 1'b0 ;

  // submodule stage2_mbox
  assign stage2_mbox$req_f3 = x_out_data_to_stage2_instr__h12961[14:12] ;
  assign stage2_mbox$req_is_OP_not_OP_32 = !_theResult____h4667[3] ;
  assign stage2_mbox$req_v1 = x_out_data_to_stage2_val1__h12965 ;
  assign stage2_mbox$req_v2 = x_out_data_to_stage2_val2__h12966 ;
  assign stage2_mbox$set_verbosity_verbosity = 4'h0 ;
  assign stage2_mbox$EN_set_verbosity = 1'b0 ;
  assign stage2_mbox$EN_req_reset = 1'b0 ;
  assign stage2_mbox$EN_rsp_reset = 1'b0 ;
  assign stage2_mbox$EN_req =
	     WILL_FIRE_RL_rl_pipe &&
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1275 &&
	     !dexie_stall_set_or_clear &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 ==
	     3'd3 ;

  // submodule stage3_f_reset_reqs
  assign stage3_f_reset_reqs$ENQ = CAN_FIRE_RL_rl_reset_start ;
  assign stage3_f_reset_reqs$DEQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_reqs$CLR = 1'b0 ;

  // submodule stage3_f_reset_rsps
  assign stage3_f_reset_rsps$ENQ = CAN_FIRE_RL_stage3_rl_reset ;
  assign stage3_f_reset_rsps$DEQ = MUX_rg_state$write_1__SEL_1 ;
  assign stage3_f_reset_rsps$CLR = 1'b0 ;

  // remaining internal signals
  assign IF_IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_ETC___d1292 =
	     { (IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 ==
		3'd1) ?
		 2'd2 :
		 2'd1,
	       x_out_data_to_stage2_addr__h12964,
	       x_out_data_to_stage2_instr__h12961[13:12],
	       x_out_data_to_stage2_val2__h12966,
	       IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 !=
	       3'd1 &&
	       dexie_stallOnStore_set_or_clear &&
	       !dexie_continueStore_set_or_clear } ;
  assign IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d1101 =
	     IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703 ||
	     IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705 ||
	     near_mem$imem_exc ||
	     IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d645 &&
	     IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d656 ;
  assign IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d1323 =
	     ((_theResult____h4667[6:0] == 7'b0010011 ||
	       _theResult____h4667[6:0] == 7'b0110011) &&
	      (_theResult____h4667[14:12] == 3'b001 ||
	       _theResult____h4667[14:12] == 3'b101)) ?
	       _theResult____h13252 :
	       IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d1322 ;
  assign IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d546 =
	     rs1_val_bypassed__h4675 == rs2_val__h13077 ;
  assign IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d548 =
	     (rs1_val_bypassed__h4675 ^ 32'h80000000) <
	     (rs2_val__h13077 ^ 32'h80000000) ;
  assign IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d550 =
	     rs1_val_bypassed__h4675 < rs2_val__h13077 ;
  assign IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d645 =
	     (_theResult____h4667[6:0] == 7'b1100011) ?
	       _theResult____h4667[14:12] != 3'b0 &&
	       _theResult____h4667[14:12] != 3'b001 &&
	       _theResult____h4667[14:12] != 3'b100 &&
	       _theResult____h4667[14:12] != 3'b101 &&
	       _theResult____h4667[14:12] != 3'b110 &&
	       _theResult____h4667[14:12] != 3'b111 ||
	       IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d557 :
	       (_theResult____h4667[6:0] != 7'b0110011 ||
		_theResult____h4667[31:25] != 7'b0000001) &&
	       (((_theResult____h4667[6:0] == 7'b0010011 ||
		  _theResult____h4667[6:0] == 7'b0110011) &&
		 (_theResult____h4667[14:12] == 3'b001 ||
		  _theResult____h4667[14:12] == 3'b101)) ?
		  _theResult____h4667[25] :
		  CASE_theResult__667_BITS_6_TO_0_0b10011_NOT_IF_ETC__q9) ;
  assign IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d656 =
	     (_theResult____h4667[6:0] == 7'b1100011) ?
	       _theResult____h4667[14:12] != 3'b0 &&
	       _theResult____h4667[14:12] != 3'b001 &&
	       _theResult____h4667[14:12] != 3'b100 &&
	       _theResult____h4667[14:12] != 3'b101 &&
	       _theResult____h4667[14:12] != 3'b110 &&
	       _theResult____h4667[14:12] != 3'b111 ||
	       IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d651 :
	       _theResult____h4667[6:0] != 7'b1101111 &&
	       _theResult____h4667[6:0] != 7'b1100111 ;
  assign IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703 =
	     (_theResult____h4667[6:0] == 7'b1100011) ?
	       (_theResult____h4667[14:12] == 3'b0 ||
		_theResult____h4667[14:12] == 3'b001 ||
		_theResult____h4667[14:12] == 3'b100 ||
		_theResult____h4667[14:12] == 3'b101 ||
		_theResult____h4667[14:12] == 3'b110 ||
		_theResult____h4667[14:12] == 3'b111) &&
	       IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d651 :
	       _theResult____h4667[6:0] == 7'b0110011 &&
	       _theResult____h4667[31:25] == 7'b0000001 ||
	       (((_theResult____h4667[6:0] == 7'b0010011 ||
		  _theResult____h4667[6:0] == 7'b0110011) &&
		 (_theResult____h4667[14:12] == 3'b001 ||
		  _theResult____h4667[14:12] == 3'b101)) ?
		  !_theResult____h4667[25] :
		  CASE_theResult__667_BITS_6_TO_0_0b10011_IF_ime_ETC__q11) ;
  assign IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705 =
	     (_theResult____h4667[6:0] == 7'b1100011) ?
	       (_theResult____h4667[14:12] == 3'b0 ||
		_theResult____h4667[14:12] == 3'b001 ||
		_theResult____h4667[14:12] == 3'b100 ||
		_theResult____h4667[14:12] == 3'b101 ||
		_theResult____h4667[14:12] == 3'b110 ||
		_theResult____h4667[14:12] == 3'b111) &&
	       IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d557 :
	       _theResult____h4667[6:0] == 7'b1101111 ||
	       _theResult____h4667[6:0] == 7'b1100111 ;
  assign IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d954 =
	     ((_theResult____h4667[6:0] == 7'b0010011 ||
	       _theResult____h4667[6:0] == 7'b0110011) &&
	      (_theResult____h4667[14:12] == 3'b001 ||
	       _theResult____h4667[14:12] == 3'b101)) ?
	       _theResult____h13252 :
	       IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d953 ;
  assign IF_NOT_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ETC___d713 =
	     NOT_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_im_ETC___d587 ?
	       4'd11 :
	       4'd0 ;
  assign IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1204 =
	     (NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1194 &&
	      (IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 ==
	       2'd2 ||
	       IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 ==
	       2'd0) &&
	      stage1_rg_full &&
	      near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d708 &&
	      !dexie_stall_set_or_clear) ?
	       IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 !=
	       3'd2 ||
	       !dexie_stallOnStore_set_or_clear ||
	       dexie_continueStore_set_or_clear :
	       !stage1_rg_full ;
  assign IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem__ETC___d245 =
	     NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d242 ?
	       { 16'b0,
		 imem_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_pc__ETC___d13 ?
		   near_mem$imem_instr[31:16] :
		   imem_rg_cache_b16 } :
	       near_mem$imem_instr ;
  assign IF_NOT_near_mem_dmem_valid__11_30_OR_NOT_near__ETC___d178 =
	     (!near_mem$dmem_valid || !near_mem$dmem_exc) ?
	       IF_stage2_rg_stage2_0_BITS_335_TO_331_50_EQ_0__ETC___d177 :
	       2'd0 ;
  assign IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d1352 =
	     { CASE_theResult__667_BITS_6_TO_0_0b11_9_0b1111__ETC__q19,
	       x__h19706,
	       NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d499,
	       x__h19798,
	       x_out_data_to_stage2_trace_data_rd__h19086,
	       x__h19975,
	       rs2_val__h13077,
	       x_out_data_to_stage2_trace_data_word3__h19089,
	       x__h20175 } ;
  assign IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 =
	     near_mem$imem_exc ?
	       4'd11 :
	       IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d761 ;
  assign IF_csr_regfile_csr_mip_read__106_EQ_rg_prev_mi_ETC___d1411 =
	     (csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1275 &&
	      !dexie_stall_set_or_clear) ?
	       IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 ==
	       3'd2 &&
	       dexie_stallOnStore_set_or_clear &&
	       !dexie_continueStore_set_or_clear :
	       stage1_rg_full ;
  assign IF_csr_regfile_read_csr_rg_trap_instr_445_BITS_ETC___d1529 =
	     csr_regfile$read_csr[31:0] | rs1_val__h23645 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d460 =
	     (csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b01 &&
	      instr__h4665[15:10] == 6'b100011 &&
	      instr__h4665[6:5] == 2'b0) ?
	       instr__h12491 :
	       ((csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b10 &&
		 instr__h4665[15:12] == 4'b1001 &&
		 instr__h4665[11:7] == 5'd0 &&
		 instr__h4665[6:2] == 5'd0) ?
		  instr__h12829 :
		  32'h0) ;
  assign IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d462 =
	     (csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b01 &&
	      instr__h4665[15:10] == 6'b100011 &&
	      instr__h4665[6:5] == 2'b10) ?
	       instr__h12219 :
	       ((csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b01 &&
		 instr__h4665[15:10] == 6'b100011 &&
		 instr__h4665[6:5] == 2'b01) ?
		  instr__h12355 :
		  IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d460) ;
  assign IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d464 =
	     (csr_regfile_read_misa__2_BIT_2_29_AND_IF_NOT_i_ETC___d331 &&
	      instr__h4665[6:2] != 5'd0) ?
	       instr__h11988 :
	       ((csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b01 &&
		 instr__h4665[15:10] == 6'b100011 &&
		 instr__h4665[6:5] == 2'b11) ?
		  instr__h12083 :
		  IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d462) ;
  assign IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d465 =
	     (csr_regfile_read_misa__2_BIT_2_29_AND_IF_NOT_i_ETC___d325 &&
	      instr__h4665[6:2] != 5'd0) ?
	       instr__h11869 :
	       IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d464 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d467 =
	     (csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b01 &&
	      instr__h4665[15:13] == 3'b100 &&
	      instr__h4665[11:10] == 2'b01 &&
	      imm6__h10015 != 6'd0 &&
	      !instr__h4665[12]) ?
	       instr__h11574 :
	       ((csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b01 &&
		 instr__h4665[15:13] == 3'b100 &&
		 instr__h4665[11:10] == 2'b10) ?
		  instr__h11691 :
		  IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d465) ;
  assign IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d468 =
	     (csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b01 &&
	      instr__h4665[15:13] == 3'b100 &&
	      instr__h4665[11:10] == 2'b0 &&
	      imm6__h10015 != 6'd0 &&
	      !instr__h4665[12]) ?
	       instr__h11381 :
	       IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d467 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d469 =
	     (csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b10 &&
	      instr__h4665[15:13] == 3'b0 &&
	      instr__h4665[11:7] != 5'd0 &&
	      imm6__h10015 != 6'd0 &&
	      !instr__h4665[12]) ?
	       instr__h11188 :
	       IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d468 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d471 =
	     (csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b01 &&
	      instr__h4665[15:13] == 3'b011 &&
	      instr__h4665[11:7] == 5'd2 &&
	      nzimm10__h10639 != 10'd0) ?
	       instr__h10843 :
	       ((csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b0 &&
		 instr__h4665[15:13] == 3'b0 &&
		 nzimm10__h10854 != 10'd0) ?
		  instr__h11015 :
		  IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d469) ;
  assign IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d472 =
	     (csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b01 &&
	      instr__h4665[15:13] == 3'b0 &&
	      instr__h4665[11:7] != 5'd0 &&
	      imm6__h10015 != 6'd0 ||
	      csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b01 &&
	      instr__h4665[15:13] == 3'b0 &&
	      instr__h4665[11:7] == 5'd0 &&
	      imm6__h10015 == 6'd0) ?
	       instr__h10406 :
	       IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d471 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d473 =
	     (csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b01 &&
	      instr__h4665[15:13] == 3'b011 &&
	      instr__h4665[11:7] != 5'd0 &&
	      instr__h4665[11:7] != 5'd2 &&
	      imm6__h10015 != 6'd0) ?
	       instr__h10277 :
	       IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d472 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d475 =
	     (csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b01 &&
	      instr__h4665[15:13] == 3'b111) ?
	       instr__h9755 :
	       ((csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b01 &&
		 instr__h4665[15:13] == 3'b010 &&
		 instr__h4665[11:7] != 5'd0) ?
		  instr__h10093 :
		  IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d473) ;
  assign IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d476 =
	     (csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b01 &&
	      instr__h4665[15:13] == 3'b110) ?
	       instr__h9438 :
	       IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d475 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d477 =
	     (csr_regfile_read_misa__2_BIT_2_29_AND_IF_NOT_i_ETC___d331 &&
	      instr__h4665[6:2] == 5'd0) ?
	       instr__h9373 :
	       IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d476 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d478 =
	     (csr_regfile_read_misa__2_BIT_2_29_AND_IF_NOT_i_ETC___d325 &&
	      instr__h4665[6:2] == 5'd0) ?
	       instr__h9257 :
	       IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d477 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d479 =
	     (csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b01 &&
	      instr__h4665[15:13] == 3'b001) ?
	       instr__h8867 :
	       IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d478 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d480 =
	     (csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b01 &&
	      instr__h4665[15:13] == 3'b101) ?
	       instr__h8524 :
	       IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d479 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d481 =
	     (csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b0 &&
	      instr__h4665[15:13] == 3'b110) ?
	       instr__h8295 :
	       IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d480 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d482 =
	     (csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b0 &&
	      instr__h4665[15:13] == 3'b010) ?
	       instr__h8100 :
	       IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d481 ;
  assign IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d483 =
	     (csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b10 &&
	      instr__h4665[15:13] == 3'b110) ?
	       instr__h7908 :
	       IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d482 ;
  assign IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg_p_ETC___d246 =
	     (imem_rg_pc[1:0] == 2'b0 &&
	      imem_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_pc__ETC___d13 &&
	      near_mem$imem_instr[1:0] != 2'b11) ?
	       instr_out___1__h7642 :
	       IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem__ETC___d245 ;
  assign IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_r_ETC___d676 =
	     _theResult____h4667[14:12] == 3'b0 &&
	     (_theResult____h4667[6:0] != 7'b0110011 ||
	      !_theResult____h4667[30]) ||
	     _theResult____h4667[14:12] == 3'b0 &&
	     _theResult____h4667[6:0] == 7'b0110011 &&
	     _theResult____h4667[30] ||
	     _theResult____h4667[14:12] == 3'b010 ||
	     _theResult____h4667[14:12] == 3'b011 ||
	     _theResult____h4667[14:12] == 3'b100 ||
	     _theResult____h4667[14:12] == 3'b110 ||
	     _theResult____h4667[14:12] == 3'b111 ;
  assign IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_r_ETC___d886 =
	     imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d220 ?
	       next_pc___1__h14827 :
	       next_pc__h14825 ;
  assign IF_near_mem_dmem_valid__11_THEN_IF_near_mem_dm_ETC___d114 =
	     near_mem$dmem_valid ? (near_mem$dmem_exc ? 2'd3 : 2'd2) : 2'd1 ;
  assign IF_near_mem_imem_exc__08_THEN_near_mem_imem_ex_ETC___d1428 =
	     near_mem$imem_exc ?
	       { near_mem$imem_exc_code, imem_rg_tval } :
	       { alu_outputs_exc_code__h13624, trap_info_tval__h14663 } ;
  assign IF_rg_cur_priv_5_EQ_0b11_27_AND_IF_imem_rg_pc__ETC___d741 =
	     (rg_cur_priv == 2'b11 &&
	      _theResult____h4667[31:20] == 12'b001100000010) ?
	       4'd7 :
	       (rg_cur_priv_5_EQ_0b11_27_OR_rg_cur_priv_5_EQ_0_ETC___d739 ?
		  4'd10 :
		  4'd11) ;
  assign IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 =
	     stage2_rg_full ?
	       CASE_stage2_rg_stage2_BITS_338_TO_336_0_2_1_IF_ETC__q1 :
	       2'd0 ;
  assign IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d1248 =
	     IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 ==
	     2'd2 &&
	     !dexie_stall_set_or_clear &&
	     NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43 &&
	     stage2_rg_stage2[338:336] != 3'd0 &&
	     IF_stage2_rg_stage2_0_BITS_338_TO_336_1_EQ_1_3_ETC___d134 ;
  assign IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d1250 =
	     IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 ==
	     2'd2 &&
	     !dexie_stall_set_or_clear &&
	     NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43 &&
	     (stage2_rg_stage2[338:336] == 3'd0 ||
	      IF_stage2_rg_stage2_0_BITS_338_TO_336_1_EQ_1_3_ETC___d143) ;
  assign IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d182 =
	     stage2_rg_full ?
	       CASE_stage2_rg_stage2_BITS_338_TO_336_0_2_1_IF_ETC__q2 :
	       2'd0 ;
  assign IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d487 =
	     x_out_bypass_rd__h7321 == _theResult____h4667[19:15] ;
  assign IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d489 =
	     x_out_bypass_rd__h7321 == _theResult____h4667[24:20] ;
  assign IF_stage2_rg_stage2_0_BITS_335_TO_331_50_EQ_0__ETC___d177 =
	     (stage2_rg_stage2[335:331] == 5'd0) ?
	       2'd0 :
	       ((near_mem$dmem_valid && !near_mem$dmem_exc) ? 2'd2 : 2'd1) ;
  assign IF_stage2_rg_stage2_0_BITS_338_TO_336_1_EQ_3_7_ETC___d117 =
	     stage2_mbox$valid ? 2'd2 : 2'd1 ;
  assign NOT_IF_NOT_stage1_rg_full_97_98_OR_NOT_near_me_ETC___d1371 =
	     (IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 !=
	      3'd2 ||
	      !dexie_stallOnStore_set_or_clear ||
	      dexie_continueStore_set_or_clear) &&
	     NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43 ;
  assign NOT_IF_NOT_stage1_rg_full_97_98_OR_NOT_near_me_ETC___d1402 =
	     x_out_next_pc__h12928[1:0] != 2'b0 && near_mem$imem_valid &&
	     addr_of_b32__h20974 == near_mem$imem_pc &&
	     near_mem$imem_instr[17:16] == 2'b11 ;
  assign NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43 =
	     cur_verbosity__h3261 > 4'd1 ;
  assign NOT_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_im_ETC___d587 =
	     (_theResult____h4667[14:12] != 3'b0 ||
	      _theResult____h4667[6:0] == 7'b0110011 &&
	      _theResult____h4667[30]) &&
	     (_theResult____h4667[14:12] != 3'b0 ||
	      _theResult____h4667[6:0] != 7'b0110011 ||
	      !_theResult____h4667[30]) &&
	     _theResult____h4667[14:12] != 3'b010 &&
	     _theResult____h4667[14:12] != 3'b011 &&
	     _theResult____h4667[14:12] != 3'b100 &&
	     _theResult____h4667[14:12] != 3'b110 &&
	     _theResult____h4667[14:12] != 3'b111 ;
  assign NOT_csr_regfile_csr_mip_read__106_EQ_rg_prev_m_ETC___d1138 =
	     !csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_107___d1108 ||
	     (csr_regfile$interrupt_pending[4] || csr_regfile$nmi_pending) &&
	     (IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703 ||
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705) ;
  assign NOT_csr_regfile_csr_mip_read__106_EQ_rg_prev_m_ETC___d1218 =
	     (NOT_csr_regfile_csr_mip_read__106_EQ_rg_prev_m_ETC___d1138 ||
	      IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 !=
	      2'd2 &&
	      IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 !=
	      2'd0 ||
	      !stage1_rg_full ||
	      NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d1141 ||
	      dexie_stall_set_or_clear ||
	      !f_dexie_cfdata_rv[96] &&
	      ((IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 ==
		3'd1) ?
		 !f_dexie_dfmemdata_rv[101] :
		 IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 !=
		 3'd2 ||
		 !f_dexie_dfmemdata_rv[101])) &&
	     (!csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_107___d1108 ||
	      !NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1192 ||
	      !IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1204 ||
	      imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d1073) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1192 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d1141) &&
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d1189) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1194 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     near_mem$imem_exc ||
	     IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d645 &&
	     IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d656 ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1390 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     (!stage1_rg_full ||
	      imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d1384 ||
	      near_mem$imem_exc ||
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d645 &&
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d656) &&
	     (!stage1_rg_full ||
	      imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d1387) ;
  assign NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1418 =
	     !csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending ||
	     !near_mem$imem_exc &&
	     (IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703 ||
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705) ;
  assign NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d232 =
	     imem_rg_pc[1:0] != 2'b0 &&
	     imem_rg_pc_BITS_31_TO_2_0_EQ_imem_rg_cache_add_ETC___d202 &&
	     near_mem_imem_pc__1_EQ_imem_rg_pc_PLUS_2_05___d206 &&
	     imem_rg_cache_b16[1:0] == 2'b11 ;
  assign NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d242 =
	     imem_rg_pc[1:0] != 2'b0 &&
	     (imem_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_pc__ETC___d13 &&
	      near_mem$imem_instr[17:16] != 2'b11 ||
	      imem_rg_pc_BITS_31_TO_2_0_EQ_imem_rg_cache_add_ETC___d202 &&
	      imem_rg_cache_b16[1:0] != 2'b11) ;
  assign NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d499 =
	     NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d232 ||
	     imem_rg_pc[1:0] == 2'b0 &&
	     imem_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_pc__ETC___d13 &&
	     near_mem$imem_instr[1:0] == 2'b11 ;
  assign NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d501 =
	     NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d499 ||
	     NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d242 ||
	     imem_rg_pc[1:0] == 2'b0 &&
	     imem_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_pc__ETC___d13 &&
	     near_mem$imem_instr[1:0] != 2'b11 ;
  assign NOT_near_mem_imem_exc__08_61_AND_IF_IF_imem_rg_ETC___d829 =
	     !near_mem$imem_exc &&
	     (IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703 ||
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 !=
	     4'd1 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 !=
	     4'd2 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 !=
	     4'd3 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 !=
	     4'd4 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 !=
	     4'd5 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 !=
	     4'd6 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 !=
	     4'd7 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 !=
	     4'd8 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 !=
	     4'd9 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 !=
	     4'd10 ;
  assign NOT_near_mem_imem_exc__08_61_AND_IF_IF_imem_rg_ETC___d866 =
	     !near_mem$imem_exc &&
	     (IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703 ||
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 !=
	     3'd0 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 !=
	     3'd1 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 !=
	     3'd2 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 !=
	     3'd3 ;
  assign NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d1141 =
	     NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492 ||
	     near_mem$imem_exc ||
	     IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d645 &&
	     IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d656 ;
  assign NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d1189 =
	     NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492 ||
	     !near_mem$imem_exc &&
	     (IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703 ||
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705) ;
  assign NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492 =
	     !near_mem$imem_valid ||
	     imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d227 ||
	     IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d182 ==
	     2'd1 &&
	     (IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d487 ||
	      IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d489) ;
  assign NOT_rg_next_pc_500_BITS_1_TO_0_569_EQ_0b0_570__ETC___d1577 =
	     rg_next_pc[1:0] != 2'b0 && near_mem$imem_valid &&
	     addr_of_b32__h29633 == near_mem$imem_pc &&
	     near_mem$imem_instr[17:16] == 2'b11 ;
  assign NOT_soc_map_m_pc_reset_value__084_BITS_1_TO_0__ETC___d1096 =
	     soc_map$m_pc_reset_value[1:0] != 2'b0 && near_mem$imem_valid &&
	     addr_of_b32__h16821 == near_mem$imem_pc &&
	     near_mem$imem_instr[17:16] == 2'b11 ;
  assign SEXT_IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND__ETC___d311 =
	     { {9{offset__h8471[11]}}, offset__h8471 } ;
  assign SEXT_IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND__ETC___d340 =
	     { {4{offset__h9382[8]}}, offset__h9382 } ;
  assign SEXT_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d895 =
	     { {20{theResult__667_BITS_31_TO_20__q18[11]}},
	       theResult__667_BITS_31_TO_20__q18 } ;
  assign _0_OR_NOT_IF_NOT_stage1_rg_full_97_98_OR_NOT_ne_ETC___d1408 =
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 !=
	     3'd2 ||
	     !dexie_stallOnStore_set_or_clear ||
	     dexie_continueStore_set_or_clear ||
	     (IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 !=
	      2'd2 ||
	      dexie_stall_set_or_clear) &&
	     IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 !=
	     2'd0 ;
  assign _theResult_____1_fst__h14120 =
	     (_theResult____h4667[14:12] == 3'b0 &&
	      _theResult____h4667[6:0] == 7'b0110011 &&
	      _theResult____h4667[30]) ?
	       rd_val___1__h14116 :
	       _theResult_____1_fst__h14127 ;
  assign _theResult_____1_fst__h14155 =
	     rs1_val_bypassed__h4675 & _theResult___snd__h15396 ;
  assign _theResult____h13252 =
	     (_theResult____h4667[14:12] == 3'b001) ?
	       rd_val__h15292 :
	       (_theResult____h4667[30] ? rd_val__h15366 : rd_val__h15344) ;
  assign _theResult____h22270 =
	     (delta_CPI_instrs__h22269 == 64'd0) ?
	       delta_CPI_instrs___1__h22305 :
	       delta_CPI_instrs__h22269 ;
  assign _theResult____h4667 = x_out_data_to_stage2_instr__h12961 ;
  assign _theResult___snd__h15396 =
	     (_theResult____h4667[6:0] == 7'b0010011) ?
	       SEXT_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d895 :
	       rs2_val__h13077 ;
  assign addr_of_b32___1__h16933 = addr_of_b32__h16821 + 32'd4 ;
  assign addr_of_b32___1__h21086 = addr_of_b32__h20974 + 32'd4 ;
  assign addr_of_b32___1__h29745 = addr_of_b32__h29633 + 32'd4 ;
  assign addr_of_b32__h16821 = { soc_map$m_pc_reset_value[31:2], 2'd0 } ;
  assign addr_of_b32__h20974 = { x_out_next_pc__h12928[31:2], 2'd0 } ;
  assign addr_of_b32__h29633 = { rg_next_pc[31:2], 2'd0 } ;
  assign alu_outputs___1_addr__h13105 =
	     IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d557 ?
	       branch_target__h13081 :
	       IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_r_ETC___d886 ;
  assign alu_outputs___1_addr__h13129 =
	     imem_rg_pc +
	     { {11{theResult__667_BIT_31_CONCAT_theResult__667_BI_ETC__q4[20]}},
	       theResult__667_BIT_31_CONCAT_theResult__667_BI_ETC__q4 } ;
  assign alu_outputs___1_addr__h13158 = { eaddr__h13346[31:1], 1'd0 } ;
  assign alu_outputs___1_exc_code__h13579 =
	     (_theResult____h4667[14:12] == 3'b0) ?
	       ((_theResult____h4667[11:7] == 5'd0 &&
		 _theResult____h4667[19:15] == 5'd0) ?
		  CASE_theResult__667_BITS_31_TO_20_0b0_CASE_rg__ETC__q6 :
		  4'd2) :
	       4'd2 ;
  assign alu_outputs___1_trace_data_word1__h18980 = x__h20175 ;
  assign alu_outputs___1_trace_data_word3__h18962 = { 32'd0, eaddr__h13346 } ;
  assign alu_outputs___1_trace_data_word3__h18982 = { 32'd0, eaddr__h13367 } ;
  assign alu_outputs___1_val1__h13583 =
	     _theResult____h4667[14] ?
	       { 27'd0, _theResult____h4667[19:15] } :
	       rs1_val_bypassed__h4675 ;
  assign alu_outputs___1_val1__h13605 =
	     { 25'd0, _theResult____h4667[31:25] } ;
  assign branch_target__h13081 =
	     imem_rg_pc +
	     { {19{theResult__667_BIT_31_CONCAT_theResult__667_BI_ETC__q3[12]}},
	       theResult__667_BIT_31_CONCAT_theResult__667_BI_ETC__q3 } ;
  assign cpi__h22272 = x__h22271 / 64'd10 ;
  assign cpifrac__h22273 = x__h22271 % 64'd10 ;
  assign csr_regfile_RDY_server_reset_response_get__064_ETC___d1079 =
	     csr_regfile$RDY_server_reset_response_get &&
	     stage1_f_reset_rsps$EMPTY_N &&
	     stage2_f_reset_rsps$EMPTY_N &&
	     stage3_f_reset_rsps$EMPTY_N &&
	     f_reset_rsps$FULL_N &&
	     (!rg_run_on_reset ||
	      imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d1073) ;
  assign csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_107___d1108 =
	     csr_regfile$csr_mip_read == rg_prev_mip ;
  assign csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1230 =
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_107___d1108 &&
	     !csr_regfile$interrupt_pending[4] &&
	     !csr_regfile$nmi_pending ||
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d1141) &&
	     (!stage1_rg_full ||
	      NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d1189) ;
  assign csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1275 =
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_107___d1108 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1194 &&
	     (IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 ==
	      2'd2 ||
	      IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 ==
	      2'd0) &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d708 ;
  assign csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1294 =
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1275 &&
	     !dexie_stall_set_or_clear &&
	     (IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 !=
	      3'd2 ||
	      !dexie_stallOnStore_set_or_clear ||
	      dexie_continueStore_set_or_clear) ;
  assign csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1360 =
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1275 &&
	     !dexie_stall_set_or_clear &&
	     (IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 !=
	      3'd2 ||
	      !dexie_stallOnStore_set_or_clear ||
	      dexie_continueStore_set_or_clear) &&
	     (IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 ==
	      3'd1 ||
	      IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 ==
	      3'd2 ||
	      IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 ==
	      3'd4) ;
  assign csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1379 =
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1275 &&
	     !dexie_stall_set_or_clear &&
	     (!dexie_stallOnStore_set_or_clear ||
	      dexie_continueStore_set_or_clear) &&
	     NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 ==
	     3'd2 ;
  assign csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1383 =
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1275 &&
	     !dexie_stall_set_or_clear &&
	     NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 !=
	     3'd0 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 !=
	     3'd1 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 !=
	     3'd2 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 !=
	     3'd3 ;
  assign csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1393 =
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_107___d1108 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1390 &&
	     IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1204 &&
	     near_mem$imem_valid ;
  assign csr_regfile_read_csr_mcycle__4_MINUS_rg_start__ETC___d1465 =
	     delta_CPI_cycles__h22268 * 64'd10 ;
  assign csr_regfile_read_misa__2_BIT_2_29_AND_IF_NOT_i_ETC___d325 =
	     csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b10 &&
	     instr__h4665[15:12] == 4'b1000 &&
	     instr__h4665[11:7] != 5'd0 ;
  assign csr_regfile_read_misa__2_BIT_2_29_AND_IF_NOT_i_ETC___d331 =
	     csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b10 &&
	     instr__h4665[15:12] == 4'b1001 &&
	     instr__h4665[11:7] != 5'd0 ;
  assign cur_verbosity__h3261 =
	     (csr_regfile$read_csr_minstret < cfg_logdelay) ?
	       4'd0 :
	       cfg_verbosity ;
  assign data_to_stage2_addr__h12955 = x_out_data_to_stage2_addr__h12964 ;
  assign delta_CPI_cycles__h22268 =
	     csr_regfile$read_csr_mcycle - rg_start_CPI_cycles ;
  assign delta_CPI_instrs___1__h22305 = delta_CPI_instrs__h22269 + 64'd1 ;
  assign delta_CPI_instrs__h22269 =
	     csr_regfile$read_csr_minstret - rg_start_CPI_instrs ;
  assign eaddr__h13346 =
	     rs1_val_bypassed__h4675 +
	     SEXT_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_i_ETC___d895 ;
  assign eaddr__h13367 =
	     rs1_val_bypassed__h4675 +
	     { {20{theResult__667_BITS_31_TO_25_CONCAT_theResult__ETC__q7[11]}},
	       theResult__667_BITS_31_TO_25_CONCAT_theResult__ETC__q7 } ;
  assign f_trace_data_i_notFull__049_AND_IF_stage2_rg_f_ETC___d1127 =
	     f_trace_data$FULL_N &&
	     (stage2_rg_stage2[338:336] != 3'd0 &&
	      IF_stage2_rg_stage2_0_BITS_338_TO_336_1_EQ_1_3_ETC___d134 ||
	      !f_dexie_dfregdata_rv[69]) ;
  assign fall_through_pc__h12914 =
	     imem_rg_pc +
	     (NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d499 ?
		32'd4 :
		32'd2) ;
  assign imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d1384 =
	     imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d227 ||
	     IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d182 ==
	     2'd1 &&
	     (IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d487 ||
	      IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d489) ;
  assign imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d1387 =
	     imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d1384 ||
	     !near_mem$imem_exc &&
	     (IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703 ||
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705) ;
  assign imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d220 =
	     (imem_rg_pc[1:0] == 2'b0 ||
	      !imem_rg_pc_BITS_31_TO_2_0_EQ_imem_rg_cache_add_ETC___d202 ||
	      !near_mem_imem_pc__1_EQ_imem_rg_pc_PLUS_2_05___d206 ||
	      imem_rg_cache_b16[1:0] != 2'b11) &&
	     (imem_rg_pc[1:0] != 2'b0 ||
	      !imem_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_pc__ETC___d13 ||
	      near_mem$imem_instr[1:0] != 2'b11) ;
  assign imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d224 =
	     imem_rg_pc[1:0] == 2'b0 ||
	     (!imem_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_pc__ETC___d13 ||
	      near_mem$imem_instr[17:16] == 2'b11) &&
	     (!imem_rg_pc_BITS_31_TO_2_0_EQ_imem_rg_cache_add_ETC___d202 ||
	      imem_rg_cache_b16[1:0] == 2'b11) ;
  assign imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d227 =
	     imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d220 &&
	     imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d224 &&
	     (imem_rg_pc[1:0] != 2'b0 ||
	      !imem_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_pc__ETC___d13 ||
	      near_mem$imem_instr[1:0] == 2'b11) ;
  assign imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_near_mem__ETC___d1073 =
	     imem_rg_pc[1:0] == 2'b0 || !near_mem$imem_valid ||
	     !imem_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_pc__ETC___d13 ||
	     near_mem$imem_instr[17:16] != 2'b11 ;
  assign imem_rg_pc_BITS_31_TO_2_0_EQ_imem_rg_cache_add_ETC___d202 =
	     imem_rg_pc[31:2] == imem_rg_cache_addr[31:2] ;
  assign imem_rg_pc_BITS_31_TO_2_0_EQ_near_mem_imem_pc__ETC___d13 =
	     imem_rg_pc[31:2] == near_mem$imem_pc[31:2] ;
  assign imm12__h10017 = { {6{imm6__h10015[5]}}, imm6__h10015 } ;
  assign imm12__h10641 = { {2{nzimm10__h10639[9]}}, nzimm10__h10639 } ;
  assign imm12__h10856 = { 2'd0, nzimm10__h10854 } ;
  assign imm12__h11052 = { 7'b0, instr__h4665[6:2] } ;
  assign imm12__h11397 = { 7'b0100000, instr__h4665[6:2] } ;
  assign imm12__h7764 = { 4'd0, offset__h7520 } ;
  assign imm12__h8101 = { 5'd0, offset__h8043 } ;
  assign imm20__h10145 = { {14{imm6__h10015[5]}}, imm6__h10015 } ;
  assign imm6__h10015 = { instr__h4665[12], instr__h4665[6:2] } ;
  assign instr___1__h7482 =
	     (csr_regfile$read_misa[2] && instr__h4665[1:0] == 2'b10 &&
	      instr__h4665[11:7] != 5'd0 &&
	      instr__h4665[15:13] == 3'b010) ?
	       instr__h7763 :
	       IF_csr_regfile_read_misa__2_BIT_2_29_AND_IF_NO_ETC___d483 ;
  assign instr__h10093 =
	     { imm12__h10017, 8'd0, instr__h4665[11:7], 7'b0010011 } ;
  assign instr__h10277 = { imm20__h10145, instr__h4665[11:7], 7'b0110111 } ;
  assign instr__h10406 =
	     { imm12__h10017,
	       instr__h4665[11:7],
	       3'b0,
	       instr__h4665[11:7],
	       7'b0010011 } ;
  assign instr__h10843 =
	     { imm12__h10641,
	       instr__h4665[11:7],
	       3'b0,
	       instr__h4665[11:7],
	       7'b0010011 } ;
  assign instr__h11015 = { imm12__h10856, 8'd16, rd__h8103, 7'b0010011 } ;
  assign instr__h11188 =
	     { imm12__h11052,
	       instr__h4665[11:7],
	       3'b001,
	       instr__h4665[11:7],
	       7'b0010011 } ;
  assign instr__h11381 =
	     { imm12__h11052, rs1__h8102, 3'b101, rs1__h8102, 7'b0010011 } ;
  assign instr__h11574 =
	     { imm12__h11397, rs1__h8102, 3'b101, rs1__h8102, 7'b0010011 } ;
  assign instr__h11691 =
	     { imm12__h10017, rs1__h8102, 3'b111, rs1__h8102, 7'b0010011 } ;
  assign instr__h11869 =
	     { 7'b0,
	       instr__h4665[6:2],
	       8'd0,
	       instr__h4665[11:7],
	       7'b0110011 } ;
  assign instr__h11988 =
	     { 7'b0,
	       instr__h4665[6:2],
	       instr__h4665[11:7],
	       3'b0,
	       instr__h4665[11:7],
	       7'b0110011 } ;
  assign instr__h12083 =
	     { 7'b0, rd__h8103, rs1__h8102, 3'b111, rs1__h8102, 7'b0110011 } ;
  assign instr__h12219 =
	     { 7'b0, rd__h8103, rs1__h8102, 3'b110, rs1__h8102, 7'b0110011 } ;
  assign instr__h12355 =
	     { 7'b0, rd__h8103, rs1__h8102, 3'b100, rs1__h8102, 7'b0110011 } ;
  assign instr__h12491 =
	     { 7'b0100000,
	       rd__h8103,
	       rs1__h8102,
	       3'b0,
	       rs1__h8102,
	       7'b0110011 } ;
  assign instr__h12829 =
	     { 12'b000000000001,
	       instr__h4665[11:7],
	       3'b0,
	       instr__h4665[11:7],
	       7'b1110011 } ;
  assign instr__h4665 =
	     NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d232 ?
	       instr_out___1__h7620 :
	       IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg_p_ETC___d246 ;
  assign instr__h7763 =
	     { imm12__h7764, 8'd18, instr__h4665[11:7], 7'b0000011 } ;
  assign instr__h7908 =
	     { 4'd0,
	       instr__h4665[8:7],
	       instr__h4665[12],
	       instr__h4665[6:2],
	       8'd18,
	       offset_BITS_4_TO_0___h8032,
	       7'b0100011 } ;
  assign instr__h8100 =
	     { imm12__h8101, rs1__h8102, 3'b010, rd__h8103, 7'b0000011 } ;
  assign instr__h8295 =
	     { 5'd0,
	       instr__h4665[5],
	       instr__h4665[12],
	       rd__h8103,
	       rs1__h8102,
	       3'b010,
	       offset_BITS_4_TO_0___h8463,
	       7'b0100011 } ;
  assign instr__h8524 =
	     { SEXT_IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND__ETC___d311[20],
	       SEXT_IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND__ETC___d311[10:1],
	       SEXT_IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND__ETC___d311[11],
	       SEXT_IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND__ETC___d311[19:12],
	       12'd111 } ;
  assign instr__h8867 =
	     { SEXT_IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND__ETC___d311[20],
	       SEXT_IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND__ETC___d311[10:1],
	       SEXT_IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND__ETC___d311[11],
	       SEXT_IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND__ETC___d311[19:12],
	       12'd239 } ;
  assign instr__h9257 = { 12'd0, instr__h4665[11:7], 15'd103 } ;
  assign instr__h9373 = { 12'd0, instr__h4665[11:7], 15'd231 } ;
  assign instr__h9438 =
	     { SEXT_IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND__ETC___d340[12],
	       SEXT_IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND__ETC___d340[10:5],
	       5'd0,
	       rs1__h8102,
	       3'b0,
	       SEXT_IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND__ETC___d340[4:1],
	       SEXT_IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND__ETC___d340[11],
	       7'b1100011 } ;
  assign instr__h9755 =
	     { SEXT_IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND__ETC___d340[12],
	       SEXT_IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND__ETC___d340[10:5],
	       5'd0,
	       rs1__h8102,
	       3'b001,
	       SEXT_IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND__ETC___d340[4:1],
	       SEXT_IF_NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND__ETC___d340[11],
	       7'b1100011 } ;
  assign instr_out___1__h7620 =
	     { near_mem$imem_instr[15:0], imem_rg_cache_b16 } ;
  assign instr_out___1__h7642 = { 16'b0, near_mem$imem_instr[15:0] } ;
  assign near_mem_RDY_server_reset_request_put__043_AND_ETC___d1055 =
	     near_mem$RDY_server_reset_request_put &&
	     csr_regfile$RDY_server_reset_request_put &&
	     f_reset_reqs$EMPTY_N &&
	     stage1_f_reset_reqs$FULL_N &&
	     stage2_f_reset_reqs$FULL_N &&
	     stage3_f_reset_reqs$FULL_N &&
	     f_trace_data$FULL_N ;
  assign near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d966 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d645 &&
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d656) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 ==
	     4'd0 ;
  assign near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d969 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d645 &&
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d656) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 ==
	     4'd1 ;
  assign near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d972 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d645 &&
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d656) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 ==
	     4'd2 ;
  assign near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d975 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d645 &&
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d656) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 ==
	     4'd3 ;
  assign near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d978 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d645 &&
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d656) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 ==
	     4'd4 ;
  assign near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d981 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d645 &&
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d656) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 ==
	     4'd5 ;
  assign near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d984 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d645 &&
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d656) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 ==
	     4'd6 ;
  assign near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d987 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d645 &&
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d656) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 ==
	     4'd7 ;
  assign near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d990 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d645 &&
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d656) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 ==
	     4'd8 ;
  assign near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d993 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d645 &&
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d656) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 ==
	     4'd9 ;
  assign near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d996 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d645 &&
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d656) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 ==
	     4'd10 ;
  assign near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d999 =
	     (near_mem$imem_exc ||
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d645 &&
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d656) &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 !=
	     4'd0 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 !=
	     4'd1 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 !=
	     4'd2 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 !=
	     4'd3 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 !=
	     4'd4 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 !=
	     4'd5 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 !=
	     4'd6 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 !=
	     4'd7 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 !=
	     4'd8 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 !=
	     4'd9 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 !=
	     4'd10 ;
  assign near_mem_imem_pc__1_EQ_imem_rg_pc_PLUS_2_05___d206 =
	     near_mem$imem_pc == next_pc___1__h14827 ;
  assign near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 =
	     near_mem$imem_valid &&
	     NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d501 &&
	     (IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d182 !=
	      2'd1 ||
	      !IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d487 &&
	      !IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d489) ;
  assign near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659 =
	     near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	     (near_mem$imem_exc ||
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d645 &&
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d656) ;
  assign near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d708 =
	     near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	     !near_mem$imem_exc &&
	     (IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703 ||
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705) ;
  assign next_pc___1__h14827 = imem_rg_pc + 32'd2 ;
  assign next_pc__h14825 = imem_rg_pc + 32'd4 ;
  assign nzimm10__h10639 =
	     { instr__h4665[12],
	       instr__h4665[4:3],
	       instr__h4665[5],
	       instr__h4665[2],
	       instr__h4665[6],
	       4'b0 } ;
  assign nzimm10__h10854 =
	     { instr__h4665[10:7],
	       instr__h4665[12:11],
	       instr__h4665[5],
	       instr__h4665[6],
	       2'b0 } ;
  assign offset_BITS_4_TO_0___h8032 = { instr__h4665[11:9], 2'b0 } ;
  assign offset_BITS_4_TO_0___h8463 =
	     { instr__h4665[11:10], instr__h4665[6], 2'b0 } ;
  assign offset__h7520 =
	     { instr__h4665[3:2],
	       instr__h4665[12],
	       instr__h4665[6:4],
	       2'b0 } ;
  assign offset__h8043 =
	     { instr__h4665[5], instr__h4665[12:10], instr__h4665[6], 2'b0 } ;
  assign offset__h8471 =
	     { instr__h4665[12],
	       instr__h4665[8],
	       instr__h4665[10:9],
	       instr__h4665[6],
	       instr__h4665[7],
	       instr__h4665[2],
	       instr__h4665[11],
	       instr__h4665[5:3],
	       1'b0 } ;
  assign offset__h9382 =
	     { instr__h4665[12],
	       instr__h4665[6:5],
	       instr__h4665[2],
	       instr__h4665[11:10],
	       instr__h4665[4:3],
	       1'b0 } ;
  assign output_stage2___1_bypass_rd_val__h7310 =
	     (!near_mem$dmem_valid || !near_mem$dmem_exc) ?
	       ((stage2_rg_stage2[335:331] == 5'd0) ?
		  stage2_rg_stage2[298:267] :
		  near_mem$dmem_word64[31:0]) :
	       stage2_rg_stage2[298:267] ;
  assign rd__h8103 = { 2'b01, instr__h4665[4:2] } ;
  assign rd_val___1__h14108 =
	     rs1_val_bypassed__h4675 + _theResult___snd__h15396 ;
  assign rd_val___1__h14116 =
	     rs1_val_bypassed__h4675 - _theResult___snd__h15396 ;
  assign rd_val___1__h14123 =
	     ((rs1_val_bypassed__h4675 ^ 32'h80000000) <
	      (_theResult___snd__h15396 ^ 32'h80000000)) ?
	       32'd1 :
	       32'd0 ;
  assign rd_val___1__h14130 =
	     (rs1_val_bypassed__h4675 < _theResult___snd__h15396) ?
	       32'd1 :
	       32'd0 ;
  assign rd_val___1__h14137 =
	     rs1_val_bypassed__h4675 ^ _theResult___snd__h15396 ;
  assign rd_val___1__h14144 =
	     rs1_val_bypassed__h4675 | _theResult___snd__h15396 ;
  assign rd_val__h12871 =
	     (stage3_rg_full && stage3_rg_stage3[37] &&
	      stage3_rg_stage3[36:32] == _theResult____h4667[24:20]) ?
	       stage3_rg_stage3[31:0] :
	       gpr_regfile$read_rs2 ;
  assign rd_val__h13292 =
	     (_theResult____h4667[14:12] == 3'b0 &&
	      (_theResult____h4667[6:0] != 7'b0110011 ||
	       !_theResult____h4667[30])) ?
	       rd_val___1__h14108 :
	       _theResult_____1_fst__h14120 ;
  assign rd_val__h13310 = { _theResult____h4667[31:12], 12'h0 } ;
  assign rd_val__h13327 = imem_rg_pc + rd_val__h13310 ;
  assign rd_val__h15292 = rs1_val_bypassed__h4675 << shamt__h13248 ;
  assign rd_val__h15344 = rs1_val_bypassed__h4675 >> shamt__h13248 ;
  assign rd_val__h15366 =
	     rs1_val_bypassed__h4675 >> shamt__h13248 |
	     ~(32'hFFFFFFFF >> shamt__h13248) &
	     {32{rs1_val_bypassed__h4675[31]}} ;
  assign rd_val__h7434 =
	     (stage3_rg_full && stage3_rg_stage3[37] &&
	      stage3_rg_stage3[36:32] == _theResult____h4667[19:15]) ?
	       stage3_rg_stage3[31:0] :
	       gpr_regfile$read_rs1 ;
  assign rg_cur_priv_5_EQ_0b11_27_OR_rg_cur_priv_5_EQ_0_ETC___d739 =
	     (rg_cur_priv == 2'b11 ||
	      rg_cur_priv == 2'b01 && !csr_regfile$read_mstatus[21] ||
	      rg_cur_priv == 2'b0 && csr_regfile$read_misa[13]) &&
	     _theResult____h4667[31:20] == 12'b000100000101 ;
  assign rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1421 =
	     rg_state == 4'd3 &&
	     csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_107___d1108 &&
	     NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1418 &&
	     !stage3_rg_full ;
  assign rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1545 =
	     rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1421 &&
	     IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659 &&
	     (IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 ==
	      4'd7 ||
	      IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 ==
	      4'd8 ||
	      IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 ==
	      4'd9) ;
  assign rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1561 =
	     rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1421 &&
	     IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 ==
	     4'd5 ;
  assign rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1582 =
	     rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1421 &&
	     IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 ==
	     4'd4 ;
  assign rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1588 =
	     rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1421 &&
	     IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 ==
	     4'd6 ;
  assign rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1592 =
	     rg_state_4_EQ_3_100_AND_csr_regfile_csr_mip_re_ETC___d1421 &&
	     IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 ==
	     2'd0 &&
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659 &&
	     IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 ==
	     4'd10 ;
  assign rg_state_4_EQ_3_100_AND_stage3_rg_full_0_OR_NO_ETC___d1233 =
	     rg_state == 4'd3 &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 !=
	      2'd0 ||
	      stage1_rg_full) &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 !=
	      2'd3) &&
	     (stage3_rg_full ||
	      IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 !=
	      2'd0 ||
	      !stage1_rg_full ||
	      NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d1189) &&
	     (csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1230 ||
	      IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 !=
	      2'd0 ||
	      stage3_rg_full) ;
  assign rg_trap_info_435_BITS_67_TO_36_436_EQ_csr_regf_ETC___d1462 =
	     rg_trap_info[67:36] == csr_regfile$csr_trap_actions[97:66] ;
  assign rs1__h8102 = { 2'b01, instr__h4665[9:7] } ;
  assign rs1_val__h22776 =
	     (rg_trap_instr[14:12] == 3'b001) ?
	       rg_csr_val1 :
	       { 27'd0, rg_trap_instr[19:15] } ;
  assign rs1_val_bypassed__h4675 =
	     (_theResult____h4667[19:15] == 5'd0) ? 32'd0 : val__h7436 ;
  assign rs2_val__h13077 =
	     (_theResult____h4667[24:20] == 5'd0) ? 32'd0 : val__h12873 ;
  assign shamt__h13248 =
	     (_theResult____h4667[6:0] == 7'b0010011) ?
	       _theResult____h4667[24:20] :
	       rs2_val__h13077[4:0] ;
  assign stage1_rg_full_97_AND_near_mem_imem_valid_AND__ETC___d1104 =
	     stage1_rg_full &&
	     near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	     IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d1101 &&
	     IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 ==
	     2'd0 ;
  assign td1_rd__h25178 = { 3'd0, csr_regfile$csr_ret_actions[33:32] } ;
  assign theResult__667_BITS_31_TO_20__q18 = _theResult____h4667[31:20] ;
  assign theResult__667_BITS_31_TO_25_CONCAT_theResult__ETC__q7 =
	     { _theResult____h4667[31:25], _theResult____h4667[11:7] } ;
  assign theResult__667_BIT_31_CONCAT_theResult__667_BI_ETC__q3 =
	     { _theResult____h4667[31],
	       _theResult____h4667[7],
	       _theResult____h4667[30:25],
	       _theResult____h4667[11:8],
	       1'b0 } ;
  assign theResult__667_BIT_31_CONCAT_theResult__667_BI_ETC__q4 =
	     { _theResult____h4667[31],
	       _theResult____h4667[19:12],
	       _theResult____h4667[20],
	       _theResult____h4667[30:21],
	       1'b0 } ;
  assign trap_info_tval__h14663 =
	     (_theResult____h4667[6:0] != 7'b1101111 &&
	      _theResult____h4667[6:0] != 7'b1100111 &&
	      (_theResult____h4667[6:0] != 7'b1110011 ||
	       _theResult____h4667[14:12] != 3'b0 ||
	       _theResult____h4667[11:7] != 5'd0 ||
	       _theResult____h4667[19:15] != 5'd0 ||
	       _theResult____h4667[31:20] != 12'b0 &&
	       _theResult____h4667[31:20] != 12'b000000000001)) ?
	       (NOT_imem_rg_pc_BITS_1_TO_0_EQ_0b0_AND_imem_rg__ETC___d499 ?
		  _theResult____h4667 :
		  { 16'd0, instr__h4665[15:0] }) :
	       IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d1038 ;
  assign val__h12873 =
	     (IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d182 ==
	      2'd2 &&
	      IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d489) ?
	       x_out_bypass_rd_val__h7322 :
	       rd_val__h12871 ;
  assign val__h7436 =
	     (IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d182 ==
	      2'd2 &&
	      IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d487) ?
	       x_out_bypass_rd_val__h7322 :
	       rd_val__h7434 ;
  assign value__h14715 =
	     near_mem$imem_exc ? imem_rg_tval : trap_info_tval__h14663 ;
  assign x__h19798 =
	     imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d220 ?
	       { 16'd0, instr__h4665[15:0] } :
	       _theResult____h4667 ;
  assign x__h20175 = { 29'd0, _theResult____h4667[14:12] } ;
  assign x__h22200 = rg_trap_interrupt ? 32'd0 : rg_trap_info[31:0] ;
  assign x__h22271 =
	     csr_regfile_read_csr_mcycle__4_MINUS_rg_start__ETC___d1465[63:0] /
	     _theResult____h22270 ;
  assign x__h24122 = (rg_trap_instr[19:15] == 5'd0) ? 32'd0 : 32'd1 ;
  assign x__h24130 =
	     (rg_trap_instr[19:15] == 5'd0) ?
	       32'hAAAAAAAA :
	       csr_regfile$mav_csr_write ;
  assign x_exc_code__h29915 =
	     (csr_regfile$interrupt_pending[4] && !csr_regfile$nmi_pending) ?
	       csr_regfile$interrupt_pending[3:0] :
	       4'd0 ;
  assign x_out_data_to_stage2_instr__h12961 =
	     imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_rg_p_ETC___d220 ?
	       instr___1__h7482 :
	       instr__h4665 ;
  assign x_out_data_to_stage2_rd__h12963 =
	     (_theResult____h4667[6:0] == 7'b1100011) ?
	       5'd0 :
	       _theResult____h4667[11:7] ;
  assign x_out_data_to_stage2_val2__h12966 =
	     (_theResult____h4667[6:0] == 7'b1100011) ?
	       branch_target__h13081 :
	       rs2_val__h13077 ;
  assign x_out_next_pc__h12928 =
	     IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705 ?
	       data_to_stage2_addr__h12955 :
	       fall_through_pc__h12914 ;
  assign x_out_trap_info_exc_code__h14666 =
	     near_mem$imem_exc ?
	       near_mem$imem_exc_code :
	       alu_outputs_exc_code__h13624 ;
  assign x_rd__h22032 = { 3'd0, csr_regfile$csr_trap_actions[1:0] } ;
  assign x_word3__h22035 = { 32'd0, rg_trap_info[67:36] } ;
  assign x_word3__h24075 = { 52'd0, rg_trap_instr[31:20] } ;
  assign y__h23916 = ~rs1_val__h23645 ;
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[338:336])
      3'd0, 3'd1, 3'd4:
	  x_out_data_to_stage3_rd__h6981 = stage2_rg_stage2[335:331];
      3'd2: x_out_data_to_stage3_rd__h6981 = 5'd0;
      default: x_out_data_to_stage3_rd__h6981 = stage2_rg_stage2[335:331];
    endcase
  end
  always@(stage2_rg_stage2 or stage2_mbox$word or near_mem$dmem_word64)
  begin
    case (stage2_rg_stage2[338:336])
      3'd0, 3'd2:
	  x_out_data_to_stage3_rd_val__h6982 = stage2_rg_stage2[298:267];
      3'd1, 3'd4:
	  x_out_data_to_stage3_rd_val__h6982 = near_mem$dmem_word64[31:0];
      default: x_out_data_to_stage3_rd_val__h6982 = stage2_mbox$word;
    endcase
  end
  always@(stage2_rg_stage2)
  begin
    case (stage2_rg_stage2[338:336])
      3'd0, 3'd1, 3'd4: x_out_bypass_rd__h7321 = stage2_rg_stage2[335:331];
      default: x_out_bypass_rd__h7321 = stage2_rg_stage2[335:331];
    endcase
  end
  always@(rg_trap_instr or rg_csr_val1)
  begin
    case (rg_trap_instr[14:12])
      3'b010, 3'b011: rs1_val__h23645 = rg_csr_val1;
      default: rs1_val__h23645 = { 27'd0, rg_trap_instr[19:15] };
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_mbox$word or output_stage2___1_bypass_rd_val__h7310)
  begin
    case (stage2_rg_stage2[338:336])
      3'd0: x_out_bypass_rd_val__h7322 = stage2_rg_stage2[298:267];
      3'd1, 3'd4:
	  x_out_bypass_rd_val__h7322 = output_stage2___1_bypass_rd_val__h7310;
      default: x_out_bypass_rd_val__h7322 = stage2_mbox$word;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_rg_stage2_0_BITS_338_TO_336_1_EQ_3_7_ETC___d117 or
	  IF_near_mem_dmem_valid__11_THEN_IF_near_mem_dm_ETC___d114)
  begin
    case (stage2_rg_stage2[338:336])
      3'd0: CASE_stage2_rg_stage2_BITS_338_TO_336_0_2_1_IF_ETC__q1 = 2'd2;
      3'd1, 3'd2, 3'd4:
	  CASE_stage2_rg_stage2_BITS_338_TO_336_0_2_1_IF_ETC__q1 =
	      IF_near_mem_dmem_valid__11_THEN_IF_near_mem_dm_ETC___d114;
      default: CASE_stage2_rg_stage2_BITS_338_TO_336_0_2_1_IF_ETC__q1 =
		   IF_stage2_rg_stage2_0_BITS_338_TO_336_1_EQ_3_7_ETC___d117;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_mbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[338:336])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_0_BITS_338_TO_336_1_EQ_1_3_ETC___d134 =
	      !near_mem$dmem_valid || near_mem$dmem_exc;
      default: IF_stage2_rg_stage2_0_BITS_338_TO_336_1_EQ_1_3_ETC___d134 =
		   !stage2_mbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  stage2_mbox$valid or near_mem$dmem_valid or near_mem$dmem_exc)
  begin
    case (stage2_rg_stage2[338:336])
      3'd1, 3'd2, 3'd4:
	  IF_stage2_rg_stage2_0_BITS_338_TO_336_1_EQ_1_3_ETC___d143 =
	      near_mem$dmem_valid && !near_mem$dmem_exc;
      default: IF_stage2_rg_stage2_0_BITS_338_TO_336_1_EQ_1_3_ETC___d143 =
		   stage2_mbox$valid;
    endcase
  end
  always@(stage2_rg_stage2 or
	  IF_stage2_rg_stage2_0_BITS_338_TO_336_1_EQ_3_7_ETC___d117 or
	  IF_NOT_near_mem_dmem_valid__11_30_OR_NOT_near__ETC___d178)
  begin
    case (stage2_rg_stage2[338:336])
      3'd0: CASE_stage2_rg_stage2_BITS_338_TO_336_0_2_1_IF_ETC__q2 = 2'd2;
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_338_TO_336_0_2_1_IF_ETC__q2 =
	      IF_NOT_near_mem_dmem_valid__11_30_OR_NOT_near__ETC___d178;
      3'd2: CASE_stage2_rg_stage2_BITS_338_TO_336_0_2_1_IF_ETC__q2 = 2'd0;
      default: CASE_stage2_rg_stage2_BITS_338_TO_336_0_2_1_IF_ETC__q2 =
		   IF_stage2_rg_stage2_0_BITS_338_TO_336_1_EQ_3_7_ETC___d117;
    endcase
  end
  always@(_theResult____h4667)
  begin
    case (_theResult____h4667[6:0])
      7'b0000011,
      7'b0010011,
      7'b0010111,
      7'b0101111,
      7'b0110011,
      7'b0110111,
      7'b1100111,
      7'b1101111:
	  x_out_data_to_stage2_trace_data_rd__h19086 =
	      _theResult____h4667[11:7];
      default: x_out_data_to_stage2_trace_data_rd__h19086 = 5'd2;
    endcase
  end
  always@(rg_cur_priv)
  begin
    case (rg_cur_priv)
      2'b0: CASE_rg_cur_priv_0b0_8_0b1_9_11__q5 = 4'd8;
      2'b01: CASE_rg_cur_priv_0b0_8_0b1_9_11__q5 = 4'd9;
      default: CASE_rg_cur_priv_0b0_8_0b1_9_11__q5 = 4'd11;
    endcase
  end
  always@(_theResult____h4667 or CASE_rg_cur_priv_0b0_8_0b1_9_11__q5)
  begin
    case (_theResult____h4667[31:20])
      12'b0:
	  CASE_theResult__667_BITS_31_TO_20_0b0_CASE_rg__ETC__q6 =
	      CASE_rg_cur_priv_0b0_8_0b1_9_11__q5;
      12'b000000000001:
	  CASE_theResult__667_BITS_31_TO_20_0b0_CASE_rg__ETC__q6 = 4'd3;
      default: CASE_theResult__667_BITS_31_TO_20_0b0_CASE_rg__ETC__q6 = 4'd2;
    endcase
  end
  always@(_theResult____h4667 or alu_outputs___1_exc_code__h13579)
  begin
    case (_theResult____h4667[6:0])
      7'b0000011,
      7'b0001111,
      7'b0010011,
      7'b0010111,
      7'b0100011,
      7'b0110011,
      7'b0110111,
      7'b1100011:
	  alu_outputs_exc_code__h13624 = 4'd2;
      7'b1100111, 7'b1101111: alu_outputs_exc_code__h13624 = 4'd0;
      7'b1110011:
	  alu_outputs_exc_code__h13624 = alu_outputs___1_exc_code__h13579;
      default: alu_outputs_exc_code__h13624 = 4'd2;
    endcase
  end
  always@(_theResult____h4667 or
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d550 or
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d546 or
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d548)
  begin
    case (_theResult____h4667[14:12])
      3'b0:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d651 =
	      !IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d546;
      3'b001:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d651 =
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d546;
      3'b100:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d651 =
	      !IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d548;
      3'b101:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d651 =
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d548;
      3'b110:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d651 =
	      !IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d550;
      default: IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d651 =
		   _theResult____h4667[14:12] != 3'b111 ||
		   IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d550;
    endcase
  end
  always@(_theResult____h4667 or
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d550 or
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d546 or
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d548)
  begin
    case (_theResult____h4667[14:12])
      3'b0:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d557 =
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d546;
      3'b001:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d557 =
	      !IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d546;
      3'b100:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d557 =
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d548;
      3'b101:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d557 =
	      !IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d548;
      3'b110:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d557 =
	      IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d550;
      default: IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d557 =
		   _theResult____h4667[14:12] == 3'b111 &&
		   !IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d550;
    endcase
  end
  always@(_theResult____h4667)
  begin
    case (_theResult____h4667[6:0])
      7'b0000011:
	  CASE_theResult__667_BITS_6_TO_0_0b11_NOT_theRe_ETC__q8 =
	      _theResult____h4667[14:12] != 3'b0 &&
	      _theResult____h4667[14:12] != 3'b100 &&
	      _theResult____h4667[14:12] != 3'b001 &&
	      _theResult____h4667[14:12] != 3'b101 &&
	      _theResult____h4667[14:12] != 3'b010;
      7'b0100011:
	  CASE_theResult__667_BITS_6_TO_0_0b11_NOT_theRe_ETC__q8 =
	      _theResult____h4667[14:12] != 3'b0 &&
	      _theResult____h4667[14:12] != 3'b001 &&
	      _theResult____h4667[14:12] != 3'b010;
      default: CASE_theResult__667_BITS_6_TO_0_0b11_NOT_theRe_ETC__q8 =
		   _theResult____h4667[6:0] != 7'b0101111 ||
		   _theResult____h4667[31:27] != 5'b00010 &&
		   _theResult____h4667[31:27] != 5'b00011 &&
		   _theResult____h4667[31:27] != 5'b0 &&
		   _theResult____h4667[31:27] != 5'b00001 &&
		   _theResult____h4667[31:27] != 5'b01100 &&
		   _theResult____h4667[31:27] != 5'b01000 &&
		   _theResult____h4667[31:27] != 5'b00100 &&
		   _theResult____h4667[31:27] != 5'b10000 &&
		   _theResult____h4667[31:27] != 5'b11000 &&
		   _theResult____h4667[31:27] != 5'b10100 &&
		   _theResult____h4667[31:27] != 5'b11100 ||
		   _theResult____h4667[14:12] != 3'b010;
    endcase
  end
  always@(_theResult____h4667 or
	  CASE_theResult__667_BITS_6_TO_0_0b11_NOT_theRe_ETC__q8 or
	  NOT_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_im_ETC___d587)
  begin
    case (_theResult____h4667[6:0])
      7'b0010011, 7'b0110011:
	  CASE_theResult__667_BITS_6_TO_0_0b10011_NOT_IF_ETC__q9 =
	      NOT_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_im_ETC___d587;
      default: CASE_theResult__667_BITS_6_TO_0_0b10011_NOT_IF_ETC__q9 =
		   _theResult____h4667[6:0] != 7'b0110111 &&
		   _theResult____h4667[6:0] != 7'b0010111 &&
		   CASE_theResult__667_BITS_6_TO_0_0b11_NOT_theRe_ETC__q8;
    endcase
  end
  always@(_theResult____h4667)
  begin
    case (_theResult____h4667[6:0])
      7'b0000011:
	  CASE_theResult__667_BITS_6_TO_0_0b11_theResult_ETC__q10 =
	      _theResult____h4667[14:12] == 3'b0 ||
	      _theResult____h4667[14:12] == 3'b100 ||
	      _theResult____h4667[14:12] == 3'b001 ||
	      _theResult____h4667[14:12] == 3'b101 ||
	      _theResult____h4667[14:12] == 3'b010;
      7'b0100011:
	  CASE_theResult__667_BITS_6_TO_0_0b11_theResult_ETC__q10 =
	      _theResult____h4667[14:12] == 3'b0 ||
	      _theResult____h4667[14:12] == 3'b001 ||
	      _theResult____h4667[14:12] == 3'b010;
      default: CASE_theResult__667_BITS_6_TO_0_0b11_theResult_ETC__q10 =
		   _theResult____h4667[6:0] == 7'b0101111 &&
		   (_theResult____h4667[31:27] == 5'b00010 ||
		    _theResult____h4667[31:27] == 5'b00011 ||
		    _theResult____h4667[31:27] == 5'b0 ||
		    _theResult____h4667[31:27] == 5'b00001 ||
		    _theResult____h4667[31:27] == 5'b01100 ||
		    _theResult____h4667[31:27] == 5'b01000 ||
		    _theResult____h4667[31:27] == 5'b00100 ||
		    _theResult____h4667[31:27] == 5'b10000 ||
		    _theResult____h4667[31:27] == 5'b11000 ||
		    _theResult____h4667[31:27] == 5'b10100 ||
		    _theResult____h4667[31:27] == 5'b11100) &&
		   _theResult____h4667[14:12] == 3'b010;
    endcase
  end
  always@(_theResult____h4667 or
	  CASE_theResult__667_BITS_6_TO_0_0b11_theResult_ETC__q10 or
	  IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_r_ETC___d676)
  begin
    case (_theResult____h4667[6:0])
      7'b0010011, 7'b0110011:
	  CASE_theResult__667_BITS_6_TO_0_0b10011_IF_ime_ETC__q11 =
	      IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_r_ETC___d676;
      default: CASE_theResult__667_BITS_6_TO_0_0b10011_IF_ime_ETC__q11 =
		   _theResult____h4667[6:0] == 7'b0110111 ||
		   _theResult____h4667[6:0] == 7'b0010111 ||
		   CASE_theResult__667_BITS_6_TO_0_0b11_theResult_ETC__q10;
    endcase
  end
  always@(_theResult____h4667)
  begin
    case (_theResult____h4667[14:12])
      3'b0, 3'b001, 3'b010, 3'b100, 3'b101:
	  CASE_theResult__667_BITS_14_TO_12_0b0_0_0b1_0__ETC__q12 = 4'd0;
      default: CASE_theResult__667_BITS_14_TO_12_0b0_0_0b1_0__ETC__q12 =
		   4'd11;
    endcase
  end
  always@(_theResult____h4667)
  begin
    case (_theResult____h4667[14:12])
      3'b0: CASE_theResult__667_BITS_14_TO_12_0b0_4_0b1_5_11__q13 = 4'd4;
      3'b001: CASE_theResult__667_BITS_14_TO_12_0b0_4_0b1_5_11__q13 = 4'd5;
      default: CASE_theResult__667_BITS_14_TO_12_0b0_4_0b1_5_11__q13 = 4'd11;
    endcase
  end
  always@(_theResult____h4667)
  begin
    case (_theResult____h4667[14:12])
      3'b0, 3'b001, 3'b010:
	  CASE_theResult__667_BITS_14_TO_12_0b0_0_0b1_0__ETC__q14 = 4'd0;
      default: CASE_theResult__667_BITS_14_TO_12_0b0_0_0b1_0__ETC__q14 =
		   4'd11;
    endcase
  end
  always@(_theResult____h4667 or
	  IF_rg_cur_priv_5_EQ_0b11_27_AND_IF_imem_rg_pc__ETC___d741)
  begin
    case (_theResult____h4667[31:20])
      12'b0, 12'b000000000001:
	  CASE_theResult__667_BITS_31_TO_20_0b0_11_0b1_1_ETC__q15 = 4'd11;
      default: CASE_theResult__667_BITS_31_TO_20_0b0_11_0b1_1_ETC__q15 =
		   IF_rg_cur_priv_5_EQ_0b11_27_AND_IF_imem_rg_pc__ETC___d741;
    endcase
  end
  always@(_theResult____h4667 or
	  CASE_theResult__667_BITS_31_TO_20_0b0_11_0b1_1_ETC__q15)
  begin
    case (_theResult____h4667[14:12])
      3'b0:
	  CASE_theResult__667_BITS_14_TO_12_0b0_IF_theRe_ETC__q16 =
	      (_theResult____h4667[11:7] == 5'd0 &&
	       _theResult____h4667[19:15] == 5'd0) ?
		CASE_theResult__667_BITS_31_TO_20_0b0_11_0b1_1_ETC__q15 :
		4'd11;
      3'b001, 3'b101:
	  CASE_theResult__667_BITS_14_TO_12_0b0_IF_theRe_ETC__q16 = 4'd2;
      3'b010, 3'b011, 3'b110, 3'b111:
	  CASE_theResult__667_BITS_14_TO_12_0b0_IF_theRe_ETC__q16 = 4'd3;
      3'd4: CASE_theResult__667_BITS_14_TO_12_0b0_IF_theRe_ETC__q16 = 4'd11;
    endcase
  end
  always@(_theResult____h4667 or
	  CASE_theResult__667_BITS_14_TO_12_0b0_0_0b1_0__ETC__q12 or
	  CASE_theResult__667_BITS_14_TO_12_0b0_4_0b1_5_11__q13 or
	  IF_NOT_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ETC___d713 or
	  CASE_theResult__667_BITS_14_TO_12_0b0_0_0b1_0__ETC__q14 or
	  CASE_theResult__667_BITS_14_TO_12_0b0_IF_theRe_ETC__q16)
  begin
    case (_theResult____h4667[6:0])
      7'b0000011:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d757 =
	      CASE_theResult__667_BITS_14_TO_12_0b0_0_0b1_0__ETC__q12;
      7'b0001111:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d757 =
	      CASE_theResult__667_BITS_14_TO_12_0b0_4_0b1_5_11__q13;
      7'b0010011, 7'b0110011:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d757 =
	      IF_NOT_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ETC___d713;
      7'b0010111, 7'b0110111:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d757 = 4'd0;
      7'b0100011:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d757 =
	      CASE_theResult__667_BITS_14_TO_12_0b0_0_0b1_0__ETC__q14;
      7'b0101111:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d757 =
	      ((_theResult____h4667[31:27] == 5'b00010 ||
		_theResult____h4667[31:27] == 5'b00011 ||
		_theResult____h4667[31:27] == 5'b0 ||
		_theResult____h4667[31:27] == 5'b00001 ||
		_theResult____h4667[31:27] == 5'b01100 ||
		_theResult____h4667[31:27] == 5'b01000 ||
		_theResult____h4667[31:27] == 5'b00100 ||
		_theResult____h4667[31:27] == 5'b10000 ||
		_theResult____h4667[31:27] == 5'b11000 ||
		_theResult____h4667[31:27] == 5'b10100 ||
		_theResult____h4667[31:27] == 5'b11100) &&
	       _theResult____h4667[14:12] == 3'b010) ?
		4'd0 :
		4'd11;
      7'b1110011:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d757 =
	      CASE_theResult__667_BITS_14_TO_12_0b0_IF_theRe_ETC__q16;
      default: IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d757 =
		   4'd11;
    endcase
  end
  always@(_theResult____h4667 or
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d757 or
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d557)
  begin
    case (_theResult____h4667[6:0])
      7'b1100011:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d761 =
	      (_theResult____h4667[14:12] != 3'b0 &&
	       _theResult____h4667[14:12] != 3'b001 &&
	       _theResult____h4667[14:12] != 3'b100 &&
	       _theResult____h4667[14:12] != 3'b101 &&
	       _theResult____h4667[14:12] != 3'b110 &&
	       _theResult____h4667[14:12] != 3'b111) ?
		4'd11 :
		(IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d557 ?
		   4'd1 :
		   4'd0);
      7'b1100111, 7'b1101111:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d761 = 4'd1;
      default: IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d761 =
		   (_theResult____h4667[6:0] == 7'b0110011 &&
		    _theResult____h4667[31:25] == 7'b0000001) ?
		     4'd0 :
		     (((_theResult____h4667[6:0] == 7'b0010011 ||
			_theResult____h4667[6:0] == 7'b0110011) &&
		       (_theResult____h4667[14:12] == 3'b001 ||
			_theResult____h4667[14:12] == 3'b101)) ?
			(_theResult____h4667[25] ? 4'd11 : 4'd0) :
			IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d757);
    endcase
  end
  always@(_theResult____h4667)
  begin
    case (_theResult____h4667[6:0])
      7'b0000011:
	  CASE_theResult__667_BITS_6_TO_0_0b11_1_0b10011_ETC__q17 = 3'd1;
      7'b0010011, 7'b0010111, 7'b0110011, 7'b0110111:
	  CASE_theResult__667_BITS_6_TO_0_0b11_1_0b10011_ETC__q17 = 3'd0;
      7'b0100011:
	  CASE_theResult__667_BITS_6_TO_0_0b11_1_0b10011_ETC__q17 = 3'd2;
      default: CASE_theResult__667_BITS_6_TO_0_0b11_1_0b10011_ETC__q17 = 3'd4;
    endcase
  end
  always@(_theResult____h4667 or
	  CASE_theResult__667_BITS_6_TO_0_0b11_1_0b10011_ETC__q17)
  begin
    case (_theResult____h4667[6:0])
      7'b1100011, 7'b1100111, 7'b1101111:
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 = 3'd0;
      default: IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 =
		   (_theResult____h4667[6:0] == 7'b0110011 &&
		    _theResult____h4667[31:25] == 7'b0000001) ?
		     3'd3 :
		     CASE_theResult__667_BITS_6_TO_0_0b11_1_0b10011_ETC__q17;
    endcase
  end
  always@(_theResult____h4667 or
	  rs1_val_bypassed__h4675 or
	  alu_outputs___1_trace_data_word3__h18962 or
	  alu_outputs___1_trace_data_word3__h18982)
  begin
    case (_theResult____h4667[6:0])
      7'b0000011:
	  x_out_data_to_stage2_trace_data_word3__h19089 =
	      alu_outputs___1_trace_data_word3__h18962;
      7'b0100011:
	  x_out_data_to_stage2_trace_data_word3__h19089 =
	      alu_outputs___1_trace_data_word3__h18982;
      default: x_out_data_to_stage2_trace_data_word3__h19089 =
		   { 32'd0, rs1_val_bypassed__h4675 };
    endcase
  end
  always@(_theResult____h4667 or
	  _theResult_____1_fst__h14155 or
	  rd_val___1__h14123 or
	  rd_val___1__h14130 or rd_val___1__h14137 or rd_val___1__h14144)
  begin
    case (_theResult____h4667[14:12])
      3'b010: _theResult_____1_fst__h14127 = rd_val___1__h14123;
      3'b011: _theResult_____1_fst__h14127 = rd_val___1__h14130;
      3'b100: _theResult_____1_fst__h14127 = rd_val___1__h14137;
      3'b110: _theResult_____1_fst__h14127 = rd_val___1__h14144;
      default: _theResult_____1_fst__h14127 = _theResult_____1_fst__h14155;
    endcase
  end
  always@(_theResult____h4667 or
	  rs1_val_bypassed__h4675 or
	  eaddr__h13346 or
	  eaddr__h13367 or
	  alu_outputs___1_addr__h13105 or
	  alu_outputs___1_addr__h13158 or alu_outputs___1_addr__h13129)
  begin
    case (_theResult____h4667[6:0])
      7'b0000011: x_out_data_to_stage2_addr__h12964 = eaddr__h13346;
      7'b0100011: x_out_data_to_stage2_addr__h12964 = eaddr__h13367;
      7'b1100011:
	  x_out_data_to_stage2_addr__h12964 = alu_outputs___1_addr__h13105;
      7'b1100111:
	  x_out_data_to_stage2_addr__h12964 = alu_outputs___1_addr__h13158;
      7'b1101111:
	  x_out_data_to_stage2_addr__h12964 = alu_outputs___1_addr__h13129;
      default: x_out_data_to_stage2_addr__h12964 = rs1_val_bypassed__h4675;
    endcase
  end
  always@(_theResult____h4667 or
	  IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_r_ETC___d886 or
	  alu_outputs___1_addr__h13105 or
	  alu_outputs___1_addr__h13158 or alu_outputs___1_addr__h13129)
  begin
    case (_theResult____h4667[6:0])
      7'b1100011: x__h19706 = alu_outputs___1_addr__h13105;
      7'b1100111: x__h19706 = alu_outputs___1_addr__h13158;
      7'b1101111: x__h19706 = alu_outputs___1_addr__h13129;
      default: x__h19706 =
		   IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_r_ETC___d886;
    endcase
  end
  always@(_theResult____h4667 or imem_rg_pc or data_to_stage2_addr__h12955)
  begin
    case (_theResult____h4667[6:0])
      7'b1100111, 7'b1101111:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d1038 =
	      data_to_stage2_addr__h12955;
      default: IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d1038 =
		   (_theResult____h4667[6:0] == 7'b1110011 &&
		    _theResult____h4667[14:12] == 3'b0 &&
		    _theResult____h4667[11:7] == 5'd0 &&
		    _theResult____h4667[19:15] == 5'd0 &&
		    _theResult____h4667[31:20] == 12'b000000000001) ?
		     imem_rg_pc :
		     32'd0;
    endcase
  end
  always@(_theResult____h4667 or
	  alu_outputs___1_val1__h13605 or
	  rd_val__h13292 or
	  rd_val__h13327 or rd_val__h13310 or alu_outputs___1_val1__h13583)
  begin
    case (_theResult____h4667[6:0])
      7'b0010011, 7'b0110011:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d953 =
	      rd_val__h13292;
      7'b0010111:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d953 =
	      rd_val__h13327;
      7'b0110111:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d953 =
	      rd_val__h13310;
      7'b1110011:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d953 =
	      alu_outputs___1_val1__h13583;
      default: IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d953 =
		   alu_outputs___1_val1__h13605;
    endcase
  end
  always@(_theResult____h4667 or
	  alu_outputs___1_trace_data_word1__h18980 or
	  rd_val__h13292 or rd_val__h13327 or rd_val__h13310)
  begin
    case (_theResult____h4667[6:0])
      7'b0010011, 7'b0110011:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d1322 =
	      rd_val__h13292;
      7'b0010111:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d1322 =
	      rd_val__h13327;
      7'b0110111:
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d1322 =
	      rd_val__h13310;
      default: IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d1322 =
		   alu_outputs___1_trace_data_word1__h18980;
    endcase
  end
  always@(_theResult____h4667 or
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d1323 or
	  IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_r_ETC___d886)
  begin
    case (_theResult____h4667[6:0])
      7'b1100111, 7'b1101111:
	  x__h19975 =
	      IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_r_ETC___d886;
      default: x__h19975 =
		   IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d1323;
    endcase
  end
  always@(_theResult____h4667 or
	  rs1_val_bypassed__h4675 or
	  IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d954 or
	  IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_r_ETC___d886)
  begin
    case (_theResult____h4667[6:0])
      7'b1100111, 7'b1101111:
	  x_out_data_to_stage2_val1__h12965 =
	      IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_imem_r_ETC___d886;
      default: x_out_data_to_stage2_val1__h12965 =
		   (_theResult____h4667[6:0] == 7'b0110011 &&
		    _theResult____h4667[31:25] == 7'b0000001) ?
		     rs1_val_bypassed__h4675 :
		     IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d954;
    endcase
  end
  always@(_theResult____h4667)
  begin
    case (_theResult____h4667[6:0])
      7'b0000011:
	  CASE_theResult__667_BITS_6_TO_0_0b11_9_0b1111__ETC__q19 = 5'd9;
      7'b0001111, 7'b1100011, 7'b1110011:
	  CASE_theResult__667_BITS_6_TO_0_0b11_9_0b1111__ETC__q19 = 5'd5;
      7'b0010011, 7'b0010111, 7'b0110011, 7'b0110111, 7'b1100111, 7'b1101111:
	  CASE_theResult__667_BITS_6_TO_0_0b11_9_0b1111__ETC__q19 = 5'd6;
      7'b0100011:
	  CASE_theResult__667_BITS_6_TO_0_0b11_9_0b1111__ETC__q19 = 5'd11;
      7'b0101111:
	  CASE_theResult__667_BITS_6_TO_0_0b11_9_0b1111__ETC__q19 = 5'd13;
      default: CASE_theResult__667_BITS_6_TO_0_0b11_9_0b1111__ETC__q19 =
		   5'd14;
    endcase
  end
  always@(stage2_rg_stage2 or stage2_mbox$word or near_mem$dmem_word64)
  begin
    case (stage2_rg_stage2[338:336])
      3'd0, 3'd2:
	  CASE_stage2_rg_stage2_BITS_338_TO_336_0_stage2_ETC__q20 =
	      stage2_rg_stage2[159:128];
      3'd1, 3'd4:
	  CASE_stage2_rg_stage2_BITS_338_TO_336_0_stage2_ETC__q20 =
	      near_mem$dmem_word64[31:0];
      default: CASE_stage2_rg_stage2_BITS_338_TO_336_0_stage2_ETC__q20 =
		   stage2_mbox$word;
    endcase
  end

  // handling of inlined registers

  always@(posedge CLK)
  begin
    if (RST_N == `BSV_RESET_VALUE)
      begin
        cfg_logdelay <= `BSV_ASSIGNMENT_DELAY 64'd0;
	cfg_verbosity <= `BSV_ASSIGNMENT_DELAY 4'd0;
	f_dexie_cfdata_rv <= `BSV_ASSIGNMENT_DELAY
	    97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
	f_dexie_dfmemdata_rv <= `BSV_ASSIGNMENT_DELAY
	    102'h0AAAAAAAAAAAAAAAAAAAAAAAAA;
	f_dexie_dfregdata_rv <= `BSV_ASSIGNMENT_DELAY 70'h0AAAAAAAAAAAAAAAAA;
	imem_rg_cache_addr <= `BSV_ASSIGNMENT_DELAY 32'hFFFFFFFF;
	rg_cur_priv <= `BSV_ASSIGNMENT_DELAY 2'b11;
	rg_prev_mip <= `BSV_ASSIGNMENT_DELAY 32'd0;
	rg_run_on_reset <= `BSV_ASSIGNMENT_DELAY 1'd0;
	rg_state <= `BSV_ASSIGNMENT_DELAY 4'd0;
	stage1_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage2_rg_resetting <= `BSV_ASSIGNMENT_DELAY 1'd0;
	stage3_rg_full <= `BSV_ASSIGNMENT_DELAY 1'd0;
      end
    else
      begin
        if (cfg_logdelay$EN)
	  cfg_logdelay <= `BSV_ASSIGNMENT_DELAY cfg_logdelay$D_IN;
	if (cfg_verbosity$EN)
	  cfg_verbosity <= `BSV_ASSIGNMENT_DELAY cfg_verbosity$D_IN;
	if (f_dexie_cfdata_rv$EN)
	  f_dexie_cfdata_rv <= `BSV_ASSIGNMENT_DELAY f_dexie_cfdata_rv$D_IN;
	if (f_dexie_dfmemdata_rv$EN)
	  f_dexie_dfmemdata_rv <= `BSV_ASSIGNMENT_DELAY
	      f_dexie_dfmemdata_rv$D_IN;
	if (f_dexie_dfregdata_rv$EN)
	  f_dexie_dfregdata_rv <= `BSV_ASSIGNMENT_DELAY
	      f_dexie_dfregdata_rv$D_IN;
	if (imem_rg_cache_addr$EN)
	  imem_rg_cache_addr <= `BSV_ASSIGNMENT_DELAY imem_rg_cache_addr$D_IN;
	if (rg_cur_priv$EN)
	  rg_cur_priv <= `BSV_ASSIGNMENT_DELAY rg_cur_priv$D_IN;
	if (rg_prev_mip$EN)
	  rg_prev_mip <= `BSV_ASSIGNMENT_DELAY rg_prev_mip$D_IN;
	if (rg_run_on_reset$EN)
	  rg_run_on_reset <= `BSV_ASSIGNMENT_DELAY rg_run_on_reset$D_IN;
	if (rg_state$EN) rg_state <= `BSV_ASSIGNMENT_DELAY rg_state$D_IN;
	if (stage1_rg_full$EN)
	  stage1_rg_full <= `BSV_ASSIGNMENT_DELAY stage1_rg_full$D_IN;
	if (stage2_rg_full$EN)
	  stage2_rg_full <= `BSV_ASSIGNMENT_DELAY stage2_rg_full$D_IN;
	if (stage2_rg_resetting$EN)
	  stage2_rg_resetting <= `BSV_ASSIGNMENT_DELAY
	      stage2_rg_resetting$D_IN;
	if (stage3_rg_full$EN)
	  stage3_rg_full <= `BSV_ASSIGNMENT_DELAY stage3_rg_full$D_IN;
      end
    if (imem_rg_cache_b16$EN)
      imem_rg_cache_b16 <= `BSV_ASSIGNMENT_DELAY imem_rg_cache_b16$D_IN;
    if (imem_rg_f3$EN) imem_rg_f3 <= `BSV_ASSIGNMENT_DELAY imem_rg_f3$D_IN;
    if (imem_rg_mstatus_MXR$EN)
      imem_rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY imem_rg_mstatus_MXR$D_IN;
    if (imem_rg_pc$EN) imem_rg_pc <= `BSV_ASSIGNMENT_DELAY imem_rg_pc$D_IN;
    if (imem_rg_priv$EN)
      imem_rg_priv <= `BSV_ASSIGNMENT_DELAY imem_rg_priv$D_IN;
    if (imem_rg_satp$EN)
      imem_rg_satp <= `BSV_ASSIGNMENT_DELAY imem_rg_satp$D_IN;
    if (imem_rg_sstatus_SUM$EN)
      imem_rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY imem_rg_sstatus_SUM$D_IN;
    if (imem_rg_tval$EN)
      imem_rg_tval <= `BSV_ASSIGNMENT_DELAY imem_rg_tval$D_IN;
    if (rg_csr_pc$EN) rg_csr_pc <= `BSV_ASSIGNMENT_DELAY rg_csr_pc$D_IN;
    if (rg_csr_val1$EN) rg_csr_val1 <= `BSV_ASSIGNMENT_DELAY rg_csr_val1$D_IN;
    if (rg_mstatus_MXR$EN)
      rg_mstatus_MXR <= `BSV_ASSIGNMENT_DELAY rg_mstatus_MXR$D_IN;
    if (rg_next_pc$EN) rg_next_pc <= `BSV_ASSIGNMENT_DELAY rg_next_pc$D_IN;
    if (rg_sstatus_SUM$EN)
      rg_sstatus_SUM <= `BSV_ASSIGNMENT_DELAY rg_sstatus_SUM$D_IN;
    if (rg_start_CPI_cycles$EN)
      rg_start_CPI_cycles <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_cycles$D_IN;
    if (rg_start_CPI_instrs$EN)
      rg_start_CPI_instrs <= `BSV_ASSIGNMENT_DELAY rg_start_CPI_instrs$D_IN;
    if (rg_trap_info$EN)
      rg_trap_info <= `BSV_ASSIGNMENT_DELAY rg_trap_info$D_IN;
    if (rg_trap_instr$EN)
      rg_trap_instr <= `BSV_ASSIGNMENT_DELAY rg_trap_instr$D_IN;
    if (rg_trap_interrupt$EN)
      rg_trap_interrupt <= `BSV_ASSIGNMENT_DELAY rg_trap_interrupt$D_IN;
    if (rg_trap_trace_data$EN)
      rg_trap_trace_data <= `BSV_ASSIGNMENT_DELAY rg_trap_trace_data$D_IN;
    if (stage2_rg_stage2$EN)
      stage2_rg_stage2 <= `BSV_ASSIGNMENT_DELAY stage2_rg_stage2$D_IN;
    if (stage3_rg_stage3$EN)
      stage3_rg_stage3 <= `BSV_ASSIGNMENT_DELAY stage3_rg_stage3$D_IN;
  end

  // synopsys translate_off
  `ifdef BSV_NO_INITIAL_BLOCKS
  `else // not BSV_NO_INITIAL_BLOCKS
  initial
  begin
    cfg_logdelay = 64'hAAAAAAAAAAAAAAAA;
    cfg_verbosity = 4'hA;
    f_dexie_cfdata_rv = 97'h0AAAAAAAAAAAAAAAAAAAAAAAA;
    f_dexie_dfmemdata_rv = 102'h2AAAAAAAAAAAAAAAAAAAAAAAAA;
    f_dexie_dfregdata_rv = 70'h2AAAAAAAAAAAAAAAAA;
    imem_rg_cache_addr = 32'hAAAAAAAA;
    imem_rg_cache_b16 = 16'hAAAA;
    imem_rg_f3 = 3'h2;
    imem_rg_mstatus_MXR = 1'h0;
    imem_rg_pc = 32'hAAAAAAAA;
    imem_rg_priv = 2'h2;
    imem_rg_satp = 32'hAAAAAAAA;
    imem_rg_sstatus_SUM = 1'h0;
    imem_rg_tval = 32'hAAAAAAAA;
    rg_csr_pc = 32'hAAAAAAAA;
    rg_csr_val1 = 32'hAAAAAAAA;
    rg_cur_priv = 2'h2;
    rg_mstatus_MXR = 1'h0;
    rg_next_pc = 32'hAAAAAAAA;
    rg_prev_mip = 32'hAAAAAAAA;
    rg_run_on_reset = 1'h0;
    rg_sstatus_SUM = 1'h0;
    rg_start_CPI_cycles = 64'hAAAAAAAAAAAAAAAA;
    rg_start_CPI_instrs = 64'hAAAAAAAAAAAAAAAA;
    rg_state = 4'hA;
    rg_trap_info = 68'hAAAAAAAAAAAAAAAAA;
    rg_trap_instr = 32'hAAAAAAAA;
    rg_trap_interrupt = 1'h0;
    rg_trap_trace_data =
	235'h2AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage1_rg_full = 1'h0;
    stage2_rg_full = 1'h0;
    stage2_rg_resetting = 1'h0;
    stage2_rg_stage2 =
	405'h0AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA;
    stage3_rg_full = 1'h0;
    stage3_rg_stage3 = 104'hAAAAAAAAAAAAAAAAAAAAAAAAAA;
  end
  `endif // BSV_NO_INITIAL_BLOCKS
  // synopsys translate_on

  // handling of system tasks

  // synopsys translate_off
  always@(negedge CLK)
  begin
    #0;
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("%0d: Pipeline State:  minstret:%0d  cur_priv:%0d  mstatus:%0x",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 rg_cur_priv,
		 csr_regfile$read_mstatus);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write("MStatus{",
	       "sd:%0d",
	       csr_regfile$read_mstatus[14:13] == 2'h3 ||
	       csr_regfile$read_mstatus[16:15] == 2'h3);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] == 2'd2)
	$write(" sxl:%0d uxl:%0d", 2'd0, 2'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && csr_regfile$read_misa[27:26] != 2'd2)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tsr:%0d", csr_regfile$read_mstatus[22]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tw:%0d", csr_regfile$read_mstatus[21]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" tvm:%0d", csr_regfile$read_mstatus[20]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mxr:%0d", csr_regfile$read_mstatus[19]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" sum:%0d", csr_regfile$read_mstatus[18]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mprv:%0d", csr_regfile$read_mstatus[17]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" xs:%0d", csr_regfile$read_mstatus[16:15]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" fs:%0d", csr_regfile$read_mstatus[14:13]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" mpp:%0d", csr_regfile$read_mstatus[12:11]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" spp:%0d", csr_regfile$read_mstatus[8]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" pies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[7],
	       csr_regfile$read_mstatus[5],
	       csr_regfile$read_mstatus[4]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$write(" ies:%0d_%0d%0d",
	       csr_regfile$read_mstatus[3],
	       csr_regfile$read_mstatus[1],
	       csr_regfile$read_mstatus[0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("    Stage3: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Output_Stage3");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_full) $write(" PIPE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage3_rg_full) $write(" EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  (!stage3_rg_full || !stage3_rg_stage3[37]))
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage3_rg_full && stage3_rg_stage3[37])
	$write("Rd %0d ",
	       stage3_rg_stage3[36:32],
	       "rd_val:%h",
	       stage3_rg_stage3[31:0]);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage2: pc 0x%08h instr 0x%08h priv %0d",
		 stage2_rg_stage2[402:371],
		 stage2_rg_stage2[370:339],
		 stage2_rg_stage2[404:403]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd0)
	$write("Output_Stage2", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd1)
	$write("Output_Stage2", " BUSY: pc:%0h", stage2_rg_stage2[402:371]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd3)
	$write("Output_Stage2", " NONPIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd0 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd1 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd3)
	$write("Output_Stage2", " PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd0 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd1 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd3)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[402:371],
	       stage2_rg_stage2[370:339],
	       stage2_rg_stage2[404:403]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd0 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd1 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd3)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd0 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd1 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd3 &&
	  stage2_rg_stage2[338:336] != 3'd0 &&
	  IF_stage2_rg_stage2_0_BITS_338_TO_336_1_EQ_1_3_ETC___d134)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd0 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd1 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd3 &&
	  (stage2_rg_stage2[338:336] == 3'd0 ||
	   IF_stage2_rg_stage2_0_BITS_338_TO_336_1_EQ_1_3_ETC___d143))
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd0 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd1 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd3)
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h6981,
	       x_out_data_to_stage3_rd_val__h6982);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd3)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd0 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd1 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd3)
	$write("'h%h", stage2_rg_stage2[402:371]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd0 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd1 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd3)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd0 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd1 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd3)
	$write("'h%h", near_mem$dmem_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd0 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd1 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd3)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd0 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd1 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd3)
	$write("'h%h", stage2_rg_stage2[330:299], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd0 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd1 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd3)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd0 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd1 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd3)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd0 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd1 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd3)
	$write("'h%h", stage2_rg_stage2[402:371]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd0 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd1 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd3)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd0 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd1 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd3)
	$write("'h%h", near_mem$dmem_exc_code);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd0 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd1 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd3)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd0 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd1 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd1)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd3)
	$write("'h%h", stage2_rg_stage2[330:299], " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd0 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd1 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 != 2'd3)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        Bypass  to Stage1: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("Bypass {");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d182 == 2'd0)
	$write("Rd -");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d182 != 2'd0)
	$write("Rd %0d ", x_out_bypass_rd__h7321);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d182 == 2'd0)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d182 == 2'd1)
	$write("-");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d182 != 2'd0 &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d182 != 2'd1)
	$write("rd_val:%h", x_out_bypass_rd_val__h7322);
    if (RST_N != `BSV_RESET_VALUE) if (WILL_FIRE_RL_rl_show_pipe) $write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe)
	$display("    Stage1: pc 0x%08h instr 0x%08h priv %0d",
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h12961,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("        ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492)
	$write("Output_Stage1", " BUSY pc:%h", imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659)
	$write("Output_Stage1", " NONPIPE: pc:%h", imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d708)
	$write("Output_Stage1");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full)
	$write("Output_Stage1", " EMPTY");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d708)
	$write(" PIPE: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703 ||
	   IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 == 4'd0)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703 ||
	   IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 == 4'd1)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703 ||
	   IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 == 4'd2)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703 ||
	   IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 == 4'd3)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703 ||
	   IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 == 4'd4)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703 ||
	   IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 == 4'd5)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703 ||
	   IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 == 4'd6)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703 ||
	   IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 == 4'd7)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703 ||
	   IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 == 4'd8)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703 ||
	   IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 == 4'd9)
	$write("CONTROL_URET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703 ||
	   IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d763 == 4'd10)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  NOT_near_mem_imem_exc__08_61_AND_IF_IF_imem_rg_ETC___d829)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d708)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d708)
	$write("}");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d708)
	$write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n",
	       imem_rg_pc,
	       x_out_data_to_stage2_instr__h12961,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d708)
	$write("            op_stage2:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703 ||
	   IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 == 3'd0)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703 ||
	   IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 == 3'd1)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703 ||
	   IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 == 3'd2)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  !near_mem$imem_exc &&
	  (IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d703 ||
	   IF_IF_imem_rg_pc_BITS_1_TO_0_EQ_0b0_OR_NOT_ime_ETC___d705) &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 == 3'd3)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  NOT_near_mem_imem_exc__08_61_AND_IF_IF_imem_rg_ETC___d866)
	$write("OP_Stage2_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d708)
	$write("  rd:%0d\n", x_out_data_to_stage2_rd__h12963);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d708)
	$write("            addr:%h  val1:%h  val2:%h}",
	       x_out_data_to_stage2_addr__h12964,
	       x_out_data_to_stage2_val1__h12965,
	       x_out_data_to_stage2_val2__h12966);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d708)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d966)
	$write("CONTROL_STRAIGHT");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d969)
	$write("CONTROL_BRANCH");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d972)
	$write("CONTROL_CSRR_W");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d975)
	$write("CONTROL_CSRR_S_or_C");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d978)
	$write("CONTROL_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d981)
	$write("CONTROL_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d984)
	$write("CONTROL_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d987)
	$write("CONTROL_MRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d990)
	$write("CONTROL_SRET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d993)
	$write("CONTROL_URET");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d996)
	$write("CONTROL_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d507 &&
	  near_mem_imem_exc__08_OR_IF_IF_imem_rg_pc_BITS_ETC___d999)
	$write("CONTROL_TRAP");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d708)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659)
	$write(" ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d708)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659)
	$write("Trap_Info { ", "epc: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d708)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659)
	$write("'h%h", imem_rg_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d708)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659)
	$write(", ", "exc_code: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d708)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659)
	$write("'h%h", x_out_trap_info_exc_code__h14666);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d708)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659)
	$write(", ", "tval: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d708)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d659)
	$write("'h%h", value__h14715, " }");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  near_mem_imem_valid_AND_NOT_imem_rg_pc_BITS_1__ETC___d708)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && stage1_rg_full &&
	  NOT_near_mem_imem_valid_99_OR_imem_rg_pc_BITS__ETC___d492)
	$write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe && !stage1_rg_full) $write("");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_show_pipe) $display("----------------");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_mip_cmd &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("%0d: %m.rl_stage1_mip_cmd: MIP new 0x%0h, old 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$csr_mip_read,
		 rg_prev_mip);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage2_nonpipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("%0d: %m.rl_stage2_nonpipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_trap &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("%0d: %m.rl_stage1_trap", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap &&
	  rg_trap_info_435_BITS_67_TO_36_436_EQ_csr_regf_ETC___d1462)
	$display("%0d: %m.rl_stage1_trap: Tight infinite trap loop: pc 0x%0x instr 0x%08x",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$csr_trap_actions[97:66],
		 rg_trap_instr);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap &&
	  rg_trap_info_435_BITS_67_TO_36_436_EQ_csr_regf_ETC___d1462)
	$display("CPI: %0d.%0d = (%0d/%0d) since last 'continue'",
		 cpi__h22272,
		 cpifrac__h22273,
		 delta_CPI_cycles__h22268,
		 _theResult____h22270);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap &&
	  rg_trap_info_435_BITS_67_TO_36_436_EQ_csr_regf_ETC___d1462)
	$finish(32'd0);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap && cur_verbosity__h3261 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 rg_trap_info[67:36],
		 rg_trap_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap && cur_verbosity__h3261 != 4'd0)
	$display("    mcause:0x%0h  epc 0x%0h  tval:0x%0h  next_pc 0x%0h, new_priv %0d new_mstatus 0x%0h",
		 csr_regfile$csr_trap_actions[33:2],
		 rg_trap_info[67:36],
		 rg_trap_info[31:0],
		 csr_regfile$csr_trap_actions[97:66],
		 csr_regfile$csr_trap_actions[1:0],
		 csr_regfile$csr_trap_actions[65:34]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("%0d: %m.rl_stage1_CSRR_W", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("%0d: %m.rl_stage1_CSRR_W_2", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 && csr_regfile$access_permitted_1 &&
	  cur_verbosity__h3261 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 rg_csr_pc,
		 rg_trap_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 && csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("    S1: write CSRRW/CSRRWI Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h22776,
		 rg_trap_instr[31:20],
		 csr_regfile$read_csr[31:0],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_W_2 &&
	  !csr_regfile$access_permitted_1 &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("    rl_stage1_CSRR_W: Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h22776,
		 rg_trap_instr[31:20],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("%0d: %m.rl_stage1_CSRR_S_or_C",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("%0d: %m.rl_stage1_CSRR_S_or_C_2",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  csr_regfile$access_permitted_2 &&
	  cur_verbosity__h3261 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 rg_csr_pc,
		 rg_trap_instr,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("    S1: write CSRR_S_or_C: Rs1 %0d Rs1_val 0x%0h csr 0x%0h csr_val 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h23645,
		 rg_trap_instr[31:20],
		 csr_regfile$read_csr[31:0],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_CSRR_S_or_C_2 &&
	  !csr_regfile$access_permitted_2 &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("    rl_stage1_CSRR_S_or_C: Trap on CSR permissions: Rs1 %0d Rs1_val 0x%0h csr 0x%0h Rd %0d",
		 rg_trap_instr[19:15],
		 rs1_val__h23645,
		 rg_trap_instr[31:20],
		 rg_trap_instr[11:7]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("    CPU_Stage1.enq: 0x%08h", x_out_next_pc__h12928);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_restart_after_csrrx &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("%0d: rl_stage1_restart_after_csrrx: minstret:%0d  pc:%0x  cur_priv:%0d",
		 csr_regfile$read_csr_mcycle,
		 csr_regfile$read_csr_minstret,
		 x_out_next_pc__h12928,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("%0d: %m.rl_stage1_xRET", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h3261 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h12961,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_xRET && cur_verbosity__h3261 != 4'd0)
	$display("    xRET: next_pc:0x%0h  new mstatus:0x%0h  new priv:%0d",
		 csr_regfile$csr_ret_actions[65:34],
		 csr_regfile$csr_ret_actions[31:0],
		 csr_regfile$csr_ret_actions[33:32]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("%0d: %m.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I && cur_verbosity__h3261 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h12961,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("%0d: %m.rl_stage1_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("%0d: %m.rl_finish_FENCE_I", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE_I &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("    CPU.rl_finish_FENCE_I");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("%0d: %m.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE && cur_verbosity__h3261 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h12961,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("%0d: %m.rl_stage1_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("%0d: %m.rl_finish_FENCE", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_FENCE &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("    CPU.rl_finish_FENCE");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("%0d: %m.rl_stage1_SFENCE_VMA", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA && cur_verbosity__h3261 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h12961,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("%0d: %m.rl_stage1_SFENCE_VMA", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("%0d: %m.rl_finish_SFENCE_VMA", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_finish_SFENCE_VMA &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("    CPU.rl_finish_SFENCE_VMA");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("%0d: %m.rl_stage1_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI && cur_verbosity__h3261 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 imem_rg_pc,
		 x_out_data_to_stage2_instr__h12961,
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("    CPU.rl_stage1_WFI");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("%0d: %m.rl_WFI_resume", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume && cur_verbosity__h3261 != 4'd0)
	$display("    WFI resume");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_WFI_resume &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_from_WFI &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("%0d: %m.rl_reset_from_WFI", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_trap_fetch &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("    CPU_Stage1.enq: 0x%08h", rg_next_pc);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_stage1_interrupt &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("%0d: %m.rl_stage1_interrupt", csr_regfile$read_csr_mcycle);
    if (WILL_FIRE_RL_imem_rl_assert_fail)
      begin
        v__h2080 = $stime;
	#0;
      end
    v__h2074 = v__h2080 / 32'd10;
    if (WILL_FIRE_RL_imem_rl_assert_fail)
      $display("%0d: ERROR: CPU_Fetch_C: imem32.is_i32_not_i16 is False",
	       v__h2074);
    if (WILL_FIRE_RL_imem_rl_assert_fail) $finish(32'd1);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("    CPU_Stage1.enq: 0x%08h",
		 soc_map$m_pc_reset_value[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && rg_run_on_reset)
	$display("%0d: %m.rl_reset_complete: restart at PC = 0x%0h",
		 csr_regfile$read_csr_mcycle,
		 soc_map$m_pc_reset_value[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_complete && !rg_run_on_reset)
	$display("%0d: %m.rl_reset_complete: entering DEBUG_MODE",
		 csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("%0d: %m.rl_pipe", csr_regfile$read_csr_mcycle);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe && stage3_rg_full && stage3_rg_stage3[37] &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("    S3.fa_deq: write GRd 0x%0h, rd_val 0x%0h",
		 stage3_rg_stage3[36:32],
		 stage3_rg_stage3[31:0]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd2 &&
	  !dexie_stall_set_or_clear &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$write("    S3.enq: ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd2 &&
	  !dexie_stall_set_or_clear &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$write("data_to_Stage3 {pc:%h  instr:%h  priv:%0d\n",
	       stage2_rg_stage2[402:371],
	       stage2_rg_stage2[370:339],
	       stage2_rg_stage2[404:403]);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd2 &&
	  !dexie_stall_set_or_clear &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$write("        rd_valid:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d1248)
	$write("False");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d1250)
	$write("True");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd2 &&
	  !dexie_stall_set_or_clear &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$write("  grd:%0d  rd_val:%h\n",
	       x_out_data_to_stage3_rd__h6981,
	       x_out_data_to_stage3_rd_val__h6982);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd2 &&
	  !dexie_stall_set_or_clear &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  IF_stage2_rg_full_9_THEN_IF_stage2_rg_stage2_0_ETC___d120 == 2'd2 &&
	  !dexie_stall_set_or_clear &&
	  cur_verbosity__h3261 == 4'd1)
	$display("instret:%0d  PC:0x%0h  instr:0x%0h  priv:%0d",
		 csr_regfile$read_csr_minstret,
		 stage2_rg_stage2[402:371],
		 stage2_rg_stage2[370:339],
		 rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1275 &&
	  !dexie_stall_set_or_clear &&
	  NOT_IF_NOT_stage1_rg_full_97_98_OR_NOT_near_me_ETC___d1371)
	$write("    CPU_Stage2.enq (Data_Stage1_to_Stage2) ");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1275 &&
	  !dexie_stall_set_or_clear &&
	  NOT_IF_NOT_stage1_rg_full_97_98_OR_NOT_near_me_ETC___d1371)
	$write("data_to_Stage 2 {pc:%h  instr:%h  priv:%0d\n",
	       imem_rg_pc,
	       x_out_data_to_stage2_instr__h12961,
	       rg_cur_priv);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1275 &&
	  !dexie_stall_set_or_clear &&
	  NOT_IF_NOT_stage1_rg_full_97_98_OR_NOT_near_me_ETC___d1371)
	$write("            op_stage2:");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1275 &&
	  !dexie_stall_set_or_clear &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43 &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 == 3'd0)
	$write("OP_Stage2_ALU");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1275 &&
	  !dexie_stall_set_or_clear &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43 &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 == 3'd1)
	$write("OP_Stage2_LD");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1379)
	$write("OP_Stage2_ST");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1275 &&
	  !dexie_stall_set_or_clear &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43 &&
	  IF_NOT_stage1_rg_full_97_98_OR_NOT_near_mem_im_ETC___d842 == 3'd3)
	$write("OP_Stage2_M");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1383)
	$write("OP_Stage2_AMO");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1275 &&
	  !dexie_stall_set_or_clear &&
	  NOT_IF_NOT_stage1_rg_full_97_98_OR_NOT_near_me_ETC___d1371)
	$write("  rd:%0d\n", x_out_data_to_stage2_rd__h12963);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1275 &&
	  !dexie_stall_set_or_clear &&
	  NOT_IF_NOT_stage1_rg_full_97_98_OR_NOT_near_me_ETC___d1371)
	$write("            addr:%h  val1:%h  val2:%h}",
	       x_out_data_to_stage2_addr__h12964,
	       x_out_data_to_stage2_val1__h12965,
	       x_out_data_to_stage2_val2__h12966);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_1_ETC___d1275 &&
	  !dexie_stall_set_or_clear &&
	  NOT_IF_NOT_stage1_rg_full_97_98_OR_NOT_near_me_ETC___d1371)
	$write("\n");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_pipe &&
	  csr_regfile_csr_mip_read__106_EQ_rg_prev_mip_107___d1108 &&
	  NOT_csr_regfile_interrupt_pending_rg_cur_priv__ETC___d1192 &&
	  IF_NOT_csr_regfile_interrupt_pending_rg_cur_pr_ETC___d1204 &&
	  NOT_IF_csr_regfile_read_csr_minstret__7_ULT_cf_ETC___d43)
	$display("    CPU_Stage1.enq: 0x%08h", x_out_next_pc__h12928);
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$write("CPU: Bluespec  RISC-V  Piccolo  v3.0");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start) $display(" (RV32)");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("Copyright (c) 2016-2019 Bluespec, Inc. All Rights Reserved.");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start)
	$display("================================================================");
    if (RST_N != `BSV_RESET_VALUE)
      if (WILL_FIRE_RL_rl_reset_start && cur_verbosity__h3261 != 4'd0)
	$display("%0d: %m.rl_reset_start", csr_regfile$read_csr_mcycle);
  end
  // synopsys translate_on
endmodule  // mkCPU

